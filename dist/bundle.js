/*! For license information please see bundle.js.LICENSE.txt */
(()=>{var e={35:(e,n,t)=>{"use strict";t.d(n,{A:()=>l});var r=t(354),o=t.n(r),a=t(314),i=t.n(a)()(o());i.push([e.id,'.settings {\n  padding: 2rem;\n  max-width: 1000px;\n  margin: 0 auto;\n}\n\n.settings-header {\n  text-align: center;\n  margin-bottom: 2rem;\n}\n\n.settings-header h2 {\n  margin: 0 0 0.5rem 0;\n  color: var(--text-primary);\n  font-size: 2rem;\n}\n\n.settings-header p {\n  margin: 0;\n  color: var(--text-secondary);\n  font-size: 1.1rem;\n}\n\n.save-message {\n  display: flex;\n  align-items: center;\n  gap: 0.5rem;\n  padding: 1rem;\n  border-radius: 8px;\n  margin-bottom: 2rem;\n  font-weight: 500;\n}\n\n.save-message.success {\n  background: var(--success-color);\n  color: white;\n}\n\n.save-message.error {\n  background: var(--error-color);\n  color: white;\n}\n\n.settings-sections {\n  display: flex;\n  flex-direction: column;\n  gap: 2rem;\n  margin-bottom: 2rem;\n}\n\n.settings-section {\n  background: var(--bg-secondary);\n  border: 1px solid var(--border-color);\n  border-radius: 12px;\n  padding: 2rem;\n}\n\n.section-header {\n  display: flex;\n  align-items: center;\n  gap: 0.75rem;\n  margin-bottom: 1.5rem;\n  padding-bottom: 1rem;\n  border-bottom: 1px solid var(--border-color);\n}\n\n.section-header h3 {\n  margin: 0;\n  color: var(--text-primary);\n  font-size: 1.3rem;\n}\n\n.section-header svg {\n  color: var(--accent-color);\n}\n\n.setting-item {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: 1rem 0;\n  border-bottom: 1px solid var(--border-color);\n}\n\n.setting-item:last-child {\n  border-bottom: none;\n}\n\n.setting-label {\n  display: flex;\n  flex-direction: column;\n  gap: 0.25rem;\n  cursor: pointer;\n}\n\n.setting-label span {\n  font-weight: 600;\n  color: var(--text-primary);\n}\n\n.setting-label small {\n  color: var(--text-secondary);\n  font-size: 0.85rem;\n}\n\n/* Theme Options */\n.theme-options {\n  display: flex;\n  gap: 1rem;\n}\n\n.theme-option {\n  cursor: pointer;\n}\n\n.theme-option input[type="radio"] {\n  display: none;\n}\n\n.theme-preview {\n  display: flex;\n  align-items: center;\n  gap: 0.5rem;\n  padding: 0.75rem 1rem;\n  border: 2px solid var(--border-color);\n  border-radius: 8px;\n  transition: all 0.2s ease;\n  font-weight: 500;\n}\n\n.theme-preview.light {\n  background: #ffffff;\n  color: #333333;\n  border-color: var(--border-color);\n}\n\n.theme-preview.dark {\n  background: #1a1a1a;\n  color: #ffffff;\n  border-color: var(--border-color);\n}\n\n.theme-option input[type="radio"]:checked + .theme-preview {\n  border-color: var(--accent-color);\n  box-shadow: 0 0 0 3px rgba(0, 123, 255, 0.1);\n}\n\n.theme-option:hover .theme-preview {\n  border-color: var(--accent-color);\n}\n\n/* Setting Select */\n.setting-select {\n  padding: 0.75rem;\n  border: 1px solid var(--border-color);\n  border-radius: 8px;\n  background: var(--bg-primary);\n  color: var(--text-primary);\n  font-size: 1rem;\n  cursor: pointer;\n  min-width: 200px;\n}\n\n.setting-select:focus {\n  outline: none;\n  border-color: var(--accent-color);\n}\n\n/* Toggle Switch */\n.toggle-switch {\n  position: relative;\n  display: inline-block;\n  width: 60px;\n  height: 34px;\n  cursor: pointer;\n}\n\n.toggle-switch input {\n  opacity: 0;\n  width: 0;\n  height: 0;\n}\n\n.toggle-slider {\n  position: absolute;\n  cursor: pointer;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background-color: var(--text-secondary);\n  transition: 0.4s;\n  border-radius: 34px;\n}\n\n.toggle-slider:before {\n  position: absolute;\n  content: "";\n  height: 26px;\n  width: 26px;\n  left: 4px;\n  bottom: 4px;\n  background-color: white;\n  transition: 0.4s;\n  border-radius: 50%;\n}\n\n.toggle-switch input:checked + .toggle-slider {\n  background-color: var(--accent-color);\n}\n\n.toggle-switch input:checked + .toggle-slider:before {\n  transform: translateX(26px);\n}\n\n/* Settings Actions */\n.settings-actions {\n  display: flex;\n  justify-content: flex-end;\n  gap: 1rem;\n  margin-bottom: 2rem;\n}\n\n/* Settings Info */\n.settings-info {\n  background: var(--bg-secondary);\n  border: 1px solid var(--border-color);\n  border-radius: 12px;\n  padding: 1.5rem;\n}\n\n.settings-info h4 {\n  margin: 0 0 1rem 0;\n  color: var(--text-primary);\n  font-size: 1.1rem;\n}\n\n.settings-info ul {\n  margin: 0;\n  padding-left: 1.5rem;\n  color: var(--text-secondary);\n  line-height: 1.6;\n}\n\n.settings-info li {\n  margin-bottom: 0.5rem;\n}\n\n.settings-info li:last-child {\n  margin-bottom: 0;\n}\n\n.settings-info strong {\n  color: var(--text-primary);\n}\n\n/* Button Enhancements */\n.button {\n  display: flex;\n  align-items: center;\n  gap: 0.5rem;\n  background: var(--accent-color);\n  color: white;\n  border: none;\n  padding: 0.75rem 1.5rem;\n  border-radius: 8px;\n  cursor: pointer;\n  font-size: 1rem;\n  font-weight: 500;\n  transition: all 0.2s ease;\n}\n\n.button:hover:not(:disabled) {\n  background: var(--accent-hover);\n  transform: translateY(-1px);\n}\n\n.button:disabled {\n  background: var(--text-secondary);\n  cursor: not-allowed;\n  transform: none;\n}\n\n.button.secondary {\n  background: transparent;\n  color: var(--accent-color);\n  border: 1px solid var(--accent-color);\n}\n\n.button.secondary:hover:not(:disabled) {\n  background: var(--accent-color);\n  color: white;\n}\n\n.button.danger {\n  color: var(--error-color);\n  border-color: var(--error-color);\n}\n\n.button.danger:hover:not(:disabled) {\n  background: var(--error-color);\n  color: white;\n}\n\n/* Responsive Design */\n@media (max-width: 768px) {\n  .settings {\n    padding: 1rem;\n  }\n  \n  .setting-item {\n    flex-direction: column;\n    align-items: flex-start;\n    gap: 1rem;\n  }\n  \n  .theme-options {\n    flex-direction: column;\n    gap: 0.5rem;\n  }\n  \n  .setting-select {\n    min-width: 100%;\n  }\n  \n  .settings-actions {\n    flex-direction: column;\n    align-items: stretch;\n  }\n  \n  .settings-section {\n    padding: 1.5rem;\n  }\n}\n\n/* Hover Effects */\n.settings-section:hover {\n  border-color: var(--accent-color);\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);\n}\n\n.theme-option:hover .theme-preview {\n  transform: translateY(-2px);\n}\n\n.toggle-switch:hover .toggle-slider {\n  box-shadow: 0 0 8px rgba(0, 123, 255, 0.3);\n}\n',"",{version:3,sources:["webpack://./src/components/Settings.css"],names:[],mappings:"AAAA;EACE,aAAa;EACb,iBAAiB;EACjB,cAAc;AAChB;;AAEA;EACE,kBAAkB;EAClB,mBAAmB;AACrB;;AAEA;EACE,oBAAoB;EACpB,0BAA0B;EAC1B,eAAe;AACjB;;AAEA;EACE,SAAS;EACT,4BAA4B;EAC5B,iBAAiB;AACnB;;AAEA;EACE,aAAa;EACb,mBAAmB;EACnB,WAAW;EACX,aAAa;EACb,kBAAkB;EAClB,mBAAmB;EACnB,gBAAgB;AAClB;;AAEA;EACE,gCAAgC;EAChC,YAAY;AACd;;AAEA;EACE,8BAA8B;EAC9B,YAAY;AACd;;AAEA;EACE,aAAa;EACb,sBAAsB;EACtB,SAAS;EACT,mBAAmB;AACrB;;AAEA;EACE,+BAA+B;EAC/B,qCAAqC;EACrC,mBAAmB;EACnB,aAAa;AACf;;AAEA;EACE,aAAa;EACb,mBAAmB;EACnB,YAAY;EACZ,qBAAqB;EACrB,oBAAoB;EACpB,4CAA4C;AAC9C;;AAEA;EACE,SAAS;EACT,0BAA0B;EAC1B,iBAAiB;AACnB;;AAEA;EACE,0BAA0B;AAC5B;;AAEA;EACE,aAAa;EACb,8BAA8B;EAC9B,mBAAmB;EACnB,eAAe;EACf,4CAA4C;AAC9C;;AAEA;EACE,mBAAmB;AACrB;;AAEA;EACE,aAAa;EACb,sBAAsB;EACtB,YAAY;EACZ,eAAe;AACjB;;AAEA;EACE,gBAAgB;EAChB,0BAA0B;AAC5B;;AAEA;EACE,4BAA4B;EAC5B,kBAAkB;AACpB;;AAEA,kBAAkB;AAClB;EACE,aAAa;EACb,SAAS;AACX;;AAEA;EACE,eAAe;AACjB;;AAEA;EACE,aAAa;AACf;;AAEA;EACE,aAAa;EACb,mBAAmB;EACnB,WAAW;EACX,qBAAqB;EACrB,qCAAqC;EACrC,kBAAkB;EAClB,yBAAyB;EACzB,gBAAgB;AAClB;;AAEA;EACE,mBAAmB;EACnB,cAAc;EACd,iCAAiC;AACnC;;AAEA;EACE,mBAAmB;EACnB,cAAc;EACd,iCAAiC;AACnC;;AAEA;EACE,iCAAiC;EACjC,4CAA4C;AAC9C;;AAEA;EACE,iCAAiC;AACnC;;AAEA,mBAAmB;AACnB;EACE,gBAAgB;EAChB,qCAAqC;EACrC,kBAAkB;EAClB,6BAA6B;EAC7B,0BAA0B;EAC1B,eAAe;EACf,eAAe;EACf,gBAAgB;AAClB;;AAEA;EACE,aAAa;EACb,iCAAiC;AACnC;;AAEA,kBAAkB;AAClB;EACE,kBAAkB;EAClB,qBAAqB;EACrB,WAAW;EACX,YAAY;EACZ,eAAe;AACjB;;AAEA;EACE,UAAU;EACV,QAAQ;EACR,SAAS;AACX;;AAEA;EACE,kBAAkB;EAClB,eAAe;EACf,MAAM;EACN,OAAO;EACP,QAAQ;EACR,SAAS;EACT,uCAAuC;EACvC,gBAAgB;EAChB,mBAAmB;AACrB;;AAEA;EACE,kBAAkB;EAClB,WAAW;EACX,YAAY;EACZ,WAAW;EACX,SAAS;EACT,WAAW;EACX,uBAAuB;EACvB,gBAAgB;EAChB,kBAAkB;AACpB;;AAEA;EACE,qCAAqC;AACvC;;AAEA;EACE,2BAA2B;AAC7B;;AAEA,qBAAqB;AACrB;EACE,aAAa;EACb,yBAAyB;EACzB,SAAS;EACT,mBAAmB;AACrB;;AAEA,kBAAkB;AAClB;EACE,+BAA+B;EAC/B,qCAAqC;EACrC,mBAAmB;EACnB,eAAe;AACjB;;AAEA;EACE,kBAAkB;EAClB,0BAA0B;EAC1B,iBAAiB;AACnB;;AAEA;EACE,SAAS;EACT,oBAAoB;EACpB,4BAA4B;EAC5B,gBAAgB;AAClB;;AAEA;EACE,qBAAqB;AACvB;;AAEA;EACE,gBAAgB;AAClB;;AAEA;EACE,0BAA0B;AAC5B;;AAEA,wBAAwB;AACxB;EACE,aAAa;EACb,mBAAmB;EACnB,WAAW;EACX,+BAA+B;EAC/B,YAAY;EACZ,YAAY;EACZ,uBAAuB;EACvB,kBAAkB;EAClB,eAAe;EACf,eAAe;EACf,gBAAgB;EAChB,yBAAyB;AAC3B;;AAEA;EACE,+BAA+B;EAC/B,2BAA2B;AAC7B;;AAEA;EACE,iCAAiC;EACjC,mBAAmB;EACnB,eAAe;AACjB;;AAEA;EACE,uBAAuB;EACvB,0BAA0B;EAC1B,qCAAqC;AACvC;;AAEA;EACE,+BAA+B;EAC/B,YAAY;AACd;;AAEA;EACE,yBAAyB;EACzB,gCAAgC;AAClC;;AAEA;EACE,8BAA8B;EAC9B,YAAY;AACd;;AAEA,sBAAsB;AACtB;EACE;IACE,aAAa;EACf;;EAEA;IACE,sBAAsB;IACtB,uBAAuB;IACvB,SAAS;EACX;;EAEA;IACE,sBAAsB;IACtB,WAAW;EACb;;EAEA;IACE,eAAe;EACjB;;EAEA;IACE,sBAAsB;IACtB,oBAAoB;EACtB;;EAEA;IACE,eAAe;EACjB;AACF;;AAEA,kBAAkB;AAClB;EACE,iCAAiC;EACjC,yCAAyC;AAC3C;;AAEA;EACE,2BAA2B;AAC7B;;AAEA;EACE,0CAA0C;AAC5C",sourcesContent:['.settings {\n  padding: 2rem;\n  max-width: 1000px;\n  margin: 0 auto;\n}\n\n.settings-header {\n  text-align: center;\n  margin-bottom: 2rem;\n}\n\n.settings-header h2 {\n  margin: 0 0 0.5rem 0;\n  color: var(--text-primary);\n  font-size: 2rem;\n}\n\n.settings-header p {\n  margin: 0;\n  color: var(--text-secondary);\n  font-size: 1.1rem;\n}\n\n.save-message {\n  display: flex;\n  align-items: center;\n  gap: 0.5rem;\n  padding: 1rem;\n  border-radius: 8px;\n  margin-bottom: 2rem;\n  font-weight: 500;\n}\n\n.save-message.success {\n  background: var(--success-color);\n  color: white;\n}\n\n.save-message.error {\n  background: var(--error-color);\n  color: white;\n}\n\n.settings-sections {\n  display: flex;\n  flex-direction: column;\n  gap: 2rem;\n  margin-bottom: 2rem;\n}\n\n.settings-section {\n  background: var(--bg-secondary);\n  border: 1px solid var(--border-color);\n  border-radius: 12px;\n  padding: 2rem;\n}\n\n.section-header {\n  display: flex;\n  align-items: center;\n  gap: 0.75rem;\n  margin-bottom: 1.5rem;\n  padding-bottom: 1rem;\n  border-bottom: 1px solid var(--border-color);\n}\n\n.section-header h3 {\n  margin: 0;\n  color: var(--text-primary);\n  font-size: 1.3rem;\n}\n\n.section-header svg {\n  color: var(--accent-color);\n}\n\n.setting-item {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: 1rem 0;\n  border-bottom: 1px solid var(--border-color);\n}\n\n.setting-item:last-child {\n  border-bottom: none;\n}\n\n.setting-label {\n  display: flex;\n  flex-direction: column;\n  gap: 0.25rem;\n  cursor: pointer;\n}\n\n.setting-label span {\n  font-weight: 600;\n  color: var(--text-primary);\n}\n\n.setting-label small {\n  color: var(--text-secondary);\n  font-size: 0.85rem;\n}\n\n/* Theme Options */\n.theme-options {\n  display: flex;\n  gap: 1rem;\n}\n\n.theme-option {\n  cursor: pointer;\n}\n\n.theme-option input[type="radio"] {\n  display: none;\n}\n\n.theme-preview {\n  display: flex;\n  align-items: center;\n  gap: 0.5rem;\n  padding: 0.75rem 1rem;\n  border: 2px solid var(--border-color);\n  border-radius: 8px;\n  transition: all 0.2s ease;\n  font-weight: 500;\n}\n\n.theme-preview.light {\n  background: #ffffff;\n  color: #333333;\n  border-color: var(--border-color);\n}\n\n.theme-preview.dark {\n  background: #1a1a1a;\n  color: #ffffff;\n  border-color: var(--border-color);\n}\n\n.theme-option input[type="radio"]:checked + .theme-preview {\n  border-color: var(--accent-color);\n  box-shadow: 0 0 0 3px rgba(0, 123, 255, 0.1);\n}\n\n.theme-option:hover .theme-preview {\n  border-color: var(--accent-color);\n}\n\n/* Setting Select */\n.setting-select {\n  padding: 0.75rem;\n  border: 1px solid var(--border-color);\n  border-radius: 8px;\n  background: var(--bg-primary);\n  color: var(--text-primary);\n  font-size: 1rem;\n  cursor: pointer;\n  min-width: 200px;\n}\n\n.setting-select:focus {\n  outline: none;\n  border-color: var(--accent-color);\n}\n\n/* Toggle Switch */\n.toggle-switch {\n  position: relative;\n  display: inline-block;\n  width: 60px;\n  height: 34px;\n  cursor: pointer;\n}\n\n.toggle-switch input {\n  opacity: 0;\n  width: 0;\n  height: 0;\n}\n\n.toggle-slider {\n  position: absolute;\n  cursor: pointer;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background-color: var(--text-secondary);\n  transition: 0.4s;\n  border-radius: 34px;\n}\n\n.toggle-slider:before {\n  position: absolute;\n  content: "";\n  height: 26px;\n  width: 26px;\n  left: 4px;\n  bottom: 4px;\n  background-color: white;\n  transition: 0.4s;\n  border-radius: 50%;\n}\n\n.toggle-switch input:checked + .toggle-slider {\n  background-color: var(--accent-color);\n}\n\n.toggle-switch input:checked + .toggle-slider:before {\n  transform: translateX(26px);\n}\n\n/* Settings Actions */\n.settings-actions {\n  display: flex;\n  justify-content: flex-end;\n  gap: 1rem;\n  margin-bottom: 2rem;\n}\n\n/* Settings Info */\n.settings-info {\n  background: var(--bg-secondary);\n  border: 1px solid var(--border-color);\n  border-radius: 12px;\n  padding: 1.5rem;\n}\n\n.settings-info h4 {\n  margin: 0 0 1rem 0;\n  color: var(--text-primary);\n  font-size: 1.1rem;\n}\n\n.settings-info ul {\n  margin: 0;\n  padding-left: 1.5rem;\n  color: var(--text-secondary);\n  line-height: 1.6;\n}\n\n.settings-info li {\n  margin-bottom: 0.5rem;\n}\n\n.settings-info li:last-child {\n  margin-bottom: 0;\n}\n\n.settings-info strong {\n  color: var(--text-primary);\n}\n\n/* Button Enhancements */\n.button {\n  display: flex;\n  align-items: center;\n  gap: 0.5rem;\n  background: var(--accent-color);\n  color: white;\n  border: none;\n  padding: 0.75rem 1.5rem;\n  border-radius: 8px;\n  cursor: pointer;\n  font-size: 1rem;\n  font-weight: 500;\n  transition: all 0.2s ease;\n}\n\n.button:hover:not(:disabled) {\n  background: var(--accent-hover);\n  transform: translateY(-1px);\n}\n\n.button:disabled {\n  background: var(--text-secondary);\n  cursor: not-allowed;\n  transform: none;\n}\n\n.button.secondary {\n  background: transparent;\n  color: var(--accent-color);\n  border: 1px solid var(--accent-color);\n}\n\n.button.secondary:hover:not(:disabled) {\n  background: var(--accent-color);\n  color: white;\n}\n\n.button.danger {\n  color: var(--error-color);\n  border-color: var(--error-color);\n}\n\n.button.danger:hover:not(:disabled) {\n  background: var(--error-color);\n  color: white;\n}\n\n/* Responsive Design */\n@media (max-width: 768px) {\n  .settings {\n    padding: 1rem;\n  }\n  \n  .setting-item {\n    flex-direction: column;\n    align-items: flex-start;\n    gap: 1rem;\n  }\n  \n  .theme-options {\n    flex-direction: column;\n    gap: 0.5rem;\n  }\n  \n  .setting-select {\n    min-width: 100%;\n  }\n  \n  .settings-actions {\n    flex-direction: column;\n    align-items: stretch;\n  }\n  \n  .settings-section {\n    padding: 1.5rem;\n  }\n}\n\n/* Hover Effects */\n.settings-section:hover {\n  border-color: var(--accent-color);\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);\n}\n\n.theme-option:hover .theme-preview {\n  transform: translateY(-2px);\n}\n\n.toggle-switch:hover .toggle-slider {\n  box-shadow: 0 0 8px rgba(0, 123, 255, 0.3);\n}\n'],sourceRoot:""}]);const l=i},56:(e,n,t)=>{"use strict";e.exports=function(e){var n=t.nc;n&&e.setAttribute("nonce",n)}},72:e=>{"use strict";var n=[];function t(e){for(var t=-1,r=0;r<n.length;r++)if(n[r].identifier===e){t=r;break}return t}function r(e,r){for(var a={},i=[],l=0;l<e.length;l++){var s=e[l],u=r.base?s[0]+r.base:s[0],c=a[u]||0,d="".concat(u," ").concat(c);a[u]=c+1;var f=t(d),h={css:s[1],media:s[2],sourceMap:s[3],supports:s[4],layer:s[5]};if(-1!==f)n[f].references++,n[f].updater(h);else{var p=o(h,r);r.byIndex=l,n.splice(l,0,{identifier:d,updater:p,references:1})}i.push(d)}return i}function o(e,n){var t=n.domAPI(n);return t.update(e),function(n){if(n){if(n.css===e.css&&n.media===e.media&&n.sourceMap===e.sourceMap&&n.supports===e.supports&&n.layer===e.layer)return;t.update(e=n)}else t.remove()}}e.exports=function(e,o){var a=r(e=e||[],o=o||{});return function(e){e=e||[];for(var i=0;i<a.length;i++){var l=t(a[i]);n[l].references--}for(var s=r(e,o),u=0;u<a.length;u++){var c=t(a[u]);0===n[c].references&&(n[c].updater(),n.splice(c,1))}a=s}}},113:e=>{"use strict";e.exports=function(e,n){if(n.styleSheet)n.styleSheet.cssText=e;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(e))}}},159:e=>{"use strict";e.exports=function(e){var n=document.createElement("style");return e.setAttributes(n,e.attributes),e.insert(n,e.options),n}},221:(e,n,t)=>{"use strict";var r=t(540);function o(e){var n="https://react.dev/errors/"+e;if(1<arguments.length){n+="?args[]="+encodeURIComponent(arguments[1]);for(var t=2;t<arguments.length;t++)n+="&args[]="+encodeURIComponent(arguments[t])}return"Minified React error #"+e+"; visit "+n+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}function a(){}var i={d:{f:a,r:function(){throw Error(o(522))},D:a,C:a,L:a,m:a,X:a,S:a,M:a},p:0,findDOMNode:null},l=Symbol.for("react.portal"),s=r.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE;function u(e,n){return"font"===e?"":"string"==typeof n?"use-credentials"===n?n:"":void 0}n.__DOM_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE=i,n.createPortal=function(e,n){var t=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!n||1!==n.nodeType&&9!==n.nodeType&&11!==n.nodeType)throw Error(o(299));return function(e,n,t){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:l,key:null==r?null:""+r,children:e,containerInfo:n,implementation:t}}(e,n,null,t)},n.flushSync=function(e){var n=s.T,t=i.p;try{if(s.T=null,i.p=2,e)return e()}finally{s.T=n,i.p=t,i.d.f()}},n.preconnect=function(e,n){"string"==typeof e&&(n=n?"string"==typeof(n=n.crossOrigin)?"use-credentials"===n?n:"":void 0:null,i.d.C(e,n))},n.prefetchDNS=function(e){"string"==typeof e&&i.d.D(e)},n.preinit=function(e,n){if("string"==typeof e&&n&&"string"==typeof n.as){var t=n.as,r=u(t,n.crossOrigin),o="string"==typeof n.integrity?n.integrity:void 0,a="string"==typeof n.fetchPriority?n.fetchPriority:void 0;"style"===t?i.d.S(e,"string"==typeof n.precedence?n.precedence:void 0,{crossOrigin:r,integrity:o,fetchPriority:a}):"script"===t&&i.d.X(e,{crossOrigin:r,integrity:o,fetchPriority:a,nonce:"string"==typeof n.nonce?n.nonce:void 0})}},n.preinitModule=function(e,n){if("string"==typeof e)if("object"==typeof n&&null!==n){if(null==n.as||"script"===n.as){var t=u(n.as,n.crossOrigin);i.d.M(e,{crossOrigin:t,integrity:"string"==typeof n.integrity?n.integrity:void 0,nonce:"string"==typeof n.nonce?n.nonce:void 0})}}else null==n&&i.d.M(e)},n.preload=function(e,n){if("string"==typeof e&&"object"==typeof n&&null!==n&&"string"==typeof n.as){var t=n.as,r=u(t,n.crossOrigin);i.d.L(e,t,{crossOrigin:r,integrity:"string"==typeof n.integrity?n.integrity:void 0,nonce:"string"==typeof n.nonce?n.nonce:void 0,type:"string"==typeof n.type?n.type:void 0,fetchPriority:"string"==typeof n.fetchPriority?n.fetchPriority:void 0,referrerPolicy:"string"==typeof n.referrerPolicy?n.referrerPolicy:void 0,imageSrcSet:"string"==typeof n.imageSrcSet?n.imageSrcSet:void 0,imageSizes:"string"==typeof n.imageSizes?n.imageSizes:void 0,media:"string"==typeof n.media?n.media:void 0})}},n.preloadModule=function(e,n){if("string"==typeof e)if(n){var t=u(n.as,n.crossOrigin);i.d.m(e,{as:"string"==typeof n.as&&"script"!==n.as?n.as:void 0,crossOrigin:t,integrity:"string"==typeof n.integrity?n.integrity:void 0})}else i.d.m(e)},n.requestFormReset=function(e){i.d.r(e)},n.unstable_batchedUpdates=function(e,n){return e(n)},n.useFormState=function(e,n,t){return s.H.useFormState(e,n,t)},n.useFormStatus=function(){return s.H.useHostTransitionStatus()},n.version="19.1.1"},247:(e,n,t)=>{"use strict";var r=t(982),o=t(540),a=t(961);function i(e){var n="https://react.dev/errors/"+e;if(1<arguments.length){n+="?args[]="+encodeURIComponent(arguments[1]);for(var t=2;t<arguments.length;t++)n+="&args[]="+encodeURIComponent(arguments[t])}return"Minified React error #"+e+"; visit "+n+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}function l(e){var n=e,t=e;if(e.alternate)for(;n.return;)n=n.return;else{e=n;do{!!(4098&(n=e).flags)&&(t=n.return),e=n.return}while(e)}return 3===n.tag?t:null}function s(e){if(13===e.tag){var n=e.memoizedState;if(null===n&&null!==(e=e.alternate)&&(n=e.memoizedState),null!==n)return n.dehydrated}return null}function u(e){if(l(e)!==e)throw Error(i(188))}function c(e){var n=e.tag;if(5===n||26===n||27===n||6===n)return e;for(e=e.child;null!==e;){if(null!==(n=c(e)))return n;e=e.sibling}return null}var d=Object.assign,f=Symbol.for("react.element"),h=Symbol.for("react.transitional.element"),p=Symbol.for("react.portal"),m=Symbol.for("react.fragment"),g=Symbol.for("react.strict_mode"),A=Symbol.for("react.profiler"),y=Symbol.for("react.provider"),v=Symbol.for("react.consumer"),b=Symbol.for("react.context"),x=Symbol.for("react.forward_ref"),E=Symbol.for("react.suspense"),C=Symbol.for("react.suspense_list"),w=Symbol.for("react.memo"),_=Symbol.for("react.lazy");Symbol.for("react.scope");var k=Symbol.for("react.activity");Symbol.for("react.legacy_hidden"),Symbol.for("react.tracing_marker");var B=Symbol.for("react.memo_cache_sentinel");Symbol.for("react.view_transition");var S=Symbol.iterator;function z(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=S&&e[S]||e["@@iterator"])?e:null}var N=Symbol.for("react.client.reference");function j(e){if(null==e)return null;if("function"==typeof e)return e.$$typeof===N?null:e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case m:return"Fragment";case A:return"Profiler";case g:return"StrictMode";case E:return"Suspense";case C:return"SuspenseList";case k:return"Activity"}if("object"==typeof e)switch(e.$$typeof){case p:return"Portal";case b:return(e.displayName||"Context")+".Provider";case v:return(e._context.displayName||"Context")+".Consumer";case x:var n=e.render;return(e=e.displayName)||(e=""!==(e=n.displayName||n.name||"")?"ForwardRef("+e+")":"ForwardRef"),e;case w:return null!==(n=e.displayName||null)?n:j(e.type)||"Memo";case _:n=e._payload,e=e._init;try{return j(e(n))}catch(e){}}return null}var P=Array.isArray,T=o.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE,M=a.__DOM_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE,O={pending:!1,data:null,method:null,action:null},R=[],I=-1;function L(e){return{current:e}}function D(e){0>I||(e.current=R[I],R[I]=null,I--)}function F(e,n){I++,R[I]=e.current,e.current=n}var U=L(null),$=L(null),q=L(null),H=L(null);function W(e,n){switch(F(q,n),F($,e),F(U,null),n.nodeType){case 9:case 11:e=(e=n.documentElement)&&(e=e.namespaceURI)?rd(e):0;break;default:if(e=n.tagName,n=n.namespaceURI)e=od(n=rd(n),e);else switch(e){case"svg":e=1;break;case"math":e=2;break;default:e=0}}D(U),F(U,e)}function Y(){D(U),D($),D(q)}function V(e){null!==e.memoizedState&&F(H,e);var n=U.current,t=od(n,e.type);n!==t&&(F($,e),F(U,t))}function X(e){$.current===e&&(D(U),D($)),H.current===e&&(D(H),Vd._currentValue=O)}var Q=Object.prototype.hasOwnProperty,G=r.unstable_scheduleCallback,K=r.unstable_cancelCallback,Z=r.unstable_shouldYield,J=r.unstable_requestPaint,ee=r.unstable_now,ne=r.unstable_getCurrentPriorityLevel,te=r.unstable_ImmediatePriority,re=r.unstable_UserBlockingPriority,oe=r.unstable_NormalPriority,ae=r.unstable_LowPriority,ie=r.unstable_IdlePriority,le=r.log,se=r.unstable_setDisableYieldValue,ue=null,ce=null;function de(e){if("function"==typeof le&&se(e),ce&&"function"==typeof ce.setStrictMode)try{ce.setStrictMode(ue,e)}catch(e){}}var fe=Math.clz32?Math.clz32:function(e){return 0==(e>>>=0)?32:31-(he(e)/pe|0)|0},he=Math.log,pe=Math.LN2,me=256,ge=4194304;function Ae(e){var n=42&e;if(0!==n)return n;switch(e&-e){case 1:return 1;case 2:return 2;case 4:return 4;case 8:return 8;case 16:return 16;case 32:return 32;case 64:return 64;case 128:return 128;case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return 4194048&e;case 4194304:case 8388608:case 16777216:case 33554432:return 62914560&e;case 67108864:return 67108864;case 134217728:return 134217728;case 268435456:return 268435456;case 536870912:return 536870912;case 1073741824:return 0;default:return e}}function ye(e,n,t){var r=e.pendingLanes;if(0===r)return 0;var o=0,a=e.suspendedLanes,i=e.pingedLanes;e=e.warmLanes;var l=134217727&r;return 0!==l?0!==(r=l&~a)?o=Ae(r):0!==(i&=l)?o=Ae(i):t||0!==(t=l&~e)&&(o=Ae(t)):0!==(l=r&~a)?o=Ae(l):0!==i?o=Ae(i):t||0!==(t=r&~e)&&(o=Ae(t)),0===o?0:0!==n&&n!==o&&0===(n&a)&&((a=o&-o)>=(t=n&-n)||32===a&&4194048&t)?n:o}function ve(e,n){return 0===(e.pendingLanes&~(e.suspendedLanes&~e.pingedLanes)&n)}function be(e,n){switch(e){case 1:case 2:case 4:case 8:case 64:return n+250;case 16:case 32:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return n+5e3;default:return-1}}function xe(){var e=me;return!(4194048&(me<<=1))&&(me=256),e}function Ee(){var e=ge;return!(62914560&(ge<<=1))&&(ge=4194304),e}function Ce(e){for(var n=[],t=0;31>t;t++)n.push(e);return n}function we(e,n){e.pendingLanes|=n,268435456!==n&&(e.suspendedLanes=0,e.pingedLanes=0,e.warmLanes=0)}function _e(e,n,t){e.pendingLanes|=n,e.suspendedLanes&=~n;var r=31-fe(n);e.entangledLanes|=n,e.entanglements[r]=1073741824|e.entanglements[r]|4194090&t}function ke(e,n){var t=e.entangledLanes|=n;for(e=e.entanglements;t;){var r=31-fe(t),o=1<<r;o&n|e[r]&n&&(e[r]|=n),t&=~o}}function Be(e){switch(e){case 2:e=1;break;case 8:e=4;break;case 32:e=16;break;case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:case 4194304:case 8388608:case 16777216:case 33554432:e=128;break;case 268435456:e=134217728;break;default:e=0}return e}function Se(e){return 2<(e&=-e)?8<e?134217727&e?32:268435456:8:2}function ze(){var e=M.p;return 0!==e?e:void 0===(e=window.event)?32:lf(e.type)}var Ne=Math.random().toString(36).slice(2),je="__reactFiber$"+Ne,Pe="__reactProps$"+Ne,Te="__reactContainer$"+Ne,Me="__reactEvents$"+Ne,Oe="__reactListeners$"+Ne,Re="__reactHandles$"+Ne,Ie="__reactResources$"+Ne,Le="__reactMarker$"+Ne;function De(e){delete e[je],delete e[Pe],delete e[Me],delete e[Oe],delete e[Re]}function Fe(e){var n=e[je];if(n)return n;for(var t=e.parentNode;t;){if(n=t[Te]||t[je]){if(t=n.alternate,null!==n.child||null!==t&&null!==t.child)for(e=yd(e);null!==e;){if(t=e[je])return t;e=yd(e)}return n}t=(e=t).parentNode}return null}function Ue(e){if(e=e[je]||e[Te]){var n=e.tag;if(5===n||6===n||13===n||26===n||27===n||3===n)return e}return null}function $e(e){var n=e.tag;if(5===n||26===n||27===n||6===n)return e.stateNode;throw Error(i(33))}function qe(e){var n=e[Ie];return n||(n=e[Ie]={hoistableStyles:new Map,hoistableScripts:new Map}),n}function He(e){e[Le]=!0}var We=new Set,Ye={};function Ve(e,n){Xe(e,n),Xe(e+"Capture",n)}function Xe(e,n){for(Ye[e]=n,e=0;e<n.length;e++)We.add(n[e])}var Qe,Ge,Ke=RegExp("^[:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$"),Ze={},Je={};function en(e,n,t){if(o=n,Q.call(Je,o)||!Q.call(Ze,o)&&(Ke.test(o)?Je[o]=!0:(Ze[o]=!0,0)))if(null===t)e.removeAttribute(n);else{switch(typeof t){case"undefined":case"function":case"symbol":return void e.removeAttribute(n);case"boolean":var r=n.toLowerCase().slice(0,5);if("data-"!==r&&"aria-"!==r)return void e.removeAttribute(n)}e.setAttribute(n,""+t)}var o}function nn(e,n,t){if(null===t)e.removeAttribute(n);else{switch(typeof t){case"undefined":case"function":case"symbol":case"boolean":return void e.removeAttribute(n)}e.setAttribute(n,""+t)}}function tn(e,n,t,r){if(null===r)e.removeAttribute(t);else{switch(typeof r){case"undefined":case"function":case"symbol":case"boolean":return void e.removeAttribute(t)}e.setAttributeNS(n,t,""+r)}}function rn(e){if(void 0===Qe)try{throw Error()}catch(e){var n=e.stack.trim().match(/\n( *(at )?)/);Qe=n&&n[1]||"",Ge=-1<e.stack.indexOf("\n    at")?" (<anonymous>)":-1<e.stack.indexOf("@")?"@unknown:0:0":""}return"\n"+Qe+e+Ge}var on=!1;function an(e,n){if(!e||on)return"";on=!0;var t=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{var r={DetermineComponentFrameRoot:function(){try{if(n){var t=function(){throw Error()};if(Object.defineProperty(t.prototype,"props",{set:function(){throw Error()}}),"object"==typeof Reflect&&Reflect.construct){try{Reflect.construct(t,[])}catch(e){var r=e}Reflect.construct(e,[],t)}else{try{t.call()}catch(e){r=e}e.call(t.prototype)}}else{try{throw Error()}catch(e){r=e}(t=e())&&"function"==typeof t.catch&&t.catch(function(){})}}catch(e){if(e&&r&&"string"==typeof e.stack)return[e.stack,r.stack]}return[null,null]}};r.DetermineComponentFrameRoot.displayName="DetermineComponentFrameRoot";var o=Object.getOwnPropertyDescriptor(r.DetermineComponentFrameRoot,"name");o&&o.configurable&&Object.defineProperty(r.DetermineComponentFrameRoot,"name",{value:"DetermineComponentFrameRoot"});var a=r.DetermineComponentFrameRoot(),i=a[0],l=a[1];if(i&&l){var s=i.split("\n"),u=l.split("\n");for(o=r=0;r<s.length&&!s[r].includes("DetermineComponentFrameRoot");)r++;for(;o<u.length&&!u[o].includes("DetermineComponentFrameRoot");)o++;if(r===s.length||o===u.length)for(r=s.length-1,o=u.length-1;1<=r&&0<=o&&s[r]!==u[o];)o--;for(;1<=r&&0<=o;r--,o--)if(s[r]!==u[o]){if(1!==r||1!==o)do{if(r--,0>--o||s[r]!==u[o]){var c="\n"+s[r].replace(" at new "," at ");return e.displayName&&c.includes("<anonymous>")&&(c=c.replace("<anonymous>",e.displayName)),c}}while(1<=r&&0<=o);break}}}finally{on=!1,Error.prepareStackTrace=t}return(t=e?e.displayName||e.name:"")?rn(t):""}function ln(e){switch(e.tag){case 26:case 27:case 5:return rn(e.type);case 16:return rn("Lazy");case 13:return rn("Suspense");case 19:return rn("SuspenseList");case 0:case 15:return an(e.type,!1);case 11:return an(e.type.render,!1);case 1:return an(e.type,!0);case 31:return rn("Activity");default:return""}}function sn(e){try{var n="";do{n+=ln(e),e=e.return}while(e);return n}catch(e){return"\nError generating stack: "+e.message+"\n"+e.stack}}function un(e){switch(typeof e){case"bigint":case"boolean":case"number":case"string":case"undefined":case"object":return e;default:return""}}function cn(e){var n=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===n||"radio"===n)}function dn(e){e._valueTracker||(e._valueTracker=function(e){var n=cn(e)?"checked":"value",t=Object.getOwnPropertyDescriptor(e.constructor.prototype,n),r=""+e[n];if(!e.hasOwnProperty(n)&&void 0!==t&&"function"==typeof t.get&&"function"==typeof t.set){var o=t.get,a=t.set;return Object.defineProperty(e,n,{configurable:!0,get:function(){return o.call(this)},set:function(e){r=""+e,a.call(this,e)}}),Object.defineProperty(e,n,{enumerable:t.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[n]}}}}(e))}function fn(e){if(!e)return!1;var n=e._valueTracker;if(!n)return!0;var t=n.getValue(),r="";return e&&(r=cn(e)?e.checked?"true":"false":e.value),(e=r)!==t&&(n.setValue(e),!0)}function hn(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(n){return e.body}}var pn=/[\n"\\]/g;function mn(e){return e.replace(pn,function(e){return"\\"+e.charCodeAt(0).toString(16)+" "})}function gn(e,n,t,r,o,a,i,l){e.name="",null!=i&&"function"!=typeof i&&"symbol"!=typeof i&&"boolean"!=typeof i?e.type=i:e.removeAttribute("type"),null!=n?"number"===i?(0===n&&""===e.value||e.value!=n)&&(e.value=""+un(n)):e.value!==""+un(n)&&(e.value=""+un(n)):"submit"!==i&&"reset"!==i||e.removeAttribute("value"),null!=n?yn(e,i,un(n)):null!=t?yn(e,i,un(t)):null!=r&&e.removeAttribute("value"),null==o&&null!=a&&(e.defaultChecked=!!a),null!=o&&(e.checked=o&&"function"!=typeof o&&"symbol"!=typeof o),null!=l&&"function"!=typeof l&&"symbol"!=typeof l&&"boolean"!=typeof l?e.name=""+un(l):e.removeAttribute("name")}function An(e,n,t,r,o,a,i,l){if(null!=a&&"function"!=typeof a&&"symbol"!=typeof a&&"boolean"!=typeof a&&(e.type=a),null!=n||null!=t){if(("submit"===a||"reset"===a)&&null==n)return;t=null!=t?""+un(t):"",n=null!=n?""+un(n):t,l||n===e.value||(e.value=n),e.defaultValue=n}r="function"!=typeof(r=null!=r?r:o)&&"symbol"!=typeof r&&!!r,e.checked=l?e.checked:!!r,e.defaultChecked=!!r,null!=i&&"function"!=typeof i&&"symbol"!=typeof i&&"boolean"!=typeof i&&(e.name=i)}function yn(e,n,t){"number"===n&&hn(e.ownerDocument)===e||e.defaultValue===""+t||(e.defaultValue=""+t)}function vn(e,n,t,r){if(e=e.options,n){n={};for(var o=0;o<t.length;o++)n["$"+t[o]]=!0;for(t=0;t<e.length;t++)o=n.hasOwnProperty("$"+e[t].value),e[t].selected!==o&&(e[t].selected=o),o&&r&&(e[t].defaultSelected=!0)}else{for(t=""+un(t),n=null,o=0;o<e.length;o++){if(e[o].value===t)return e[o].selected=!0,void(r&&(e[o].defaultSelected=!0));null!==n||e[o].disabled||(n=e[o])}null!==n&&(n.selected=!0)}}function bn(e,n,t){null==n||((n=""+un(n))!==e.value&&(e.value=n),null!=t)?e.defaultValue=null!=t?""+un(t):"":e.defaultValue!==n&&(e.defaultValue=n)}function xn(e,n,t,r){if(null==n){if(null!=r){if(null!=t)throw Error(i(92));if(P(r)){if(1<r.length)throw Error(i(93));r=r[0]}t=r}null==t&&(t=""),n=t}t=un(n),e.defaultValue=t,(r=e.textContent)===t&&""!==r&&null!==r&&(e.value=r)}function En(e,n){if(n){var t=e.firstChild;if(t&&t===e.lastChild&&3===t.nodeType)return void(t.nodeValue=n)}e.textContent=n}var Cn=new Set("animationIterationCount aspectRatio borderImageOutset borderImageSlice borderImageWidth boxFlex boxFlexGroup boxOrdinalGroup columnCount columns flex flexGrow flexPositive flexShrink flexNegative flexOrder gridArea gridRow gridRowEnd gridRowSpan gridRowStart gridColumn gridColumnEnd gridColumnSpan gridColumnStart fontWeight lineClamp lineHeight opacity order orphans scale tabSize widows zIndex zoom fillOpacity floodOpacity stopOpacity strokeDasharray strokeDashoffset strokeMiterlimit strokeOpacity strokeWidth MozAnimationIterationCount MozBoxFlex MozBoxFlexGroup MozLineClamp msAnimationIterationCount msFlex msZoom msFlexGrow msFlexNegative msFlexOrder msFlexPositive msFlexShrink msGridColumn msGridColumnSpan msGridRow msGridRowSpan WebkitAnimationIterationCount WebkitBoxFlex WebKitBoxFlexGroup WebkitBoxOrdinalGroup WebkitColumnCount WebkitColumns WebkitFlex WebkitFlexGrow WebkitFlexPositive WebkitFlexShrink WebkitLineClamp".split(" "));function wn(e,n,t){var r=0===n.indexOf("--");null==t||"boolean"==typeof t||""===t?r?e.setProperty(n,""):"float"===n?e.cssFloat="":e[n]="":r?e.setProperty(n,t):"number"!=typeof t||0===t||Cn.has(n)?"float"===n?e.cssFloat=t:e[n]=(""+t).trim():e[n]=t+"px"}function _n(e,n,t){if(null!=n&&"object"!=typeof n)throw Error(i(62));if(e=e.style,null!=t){for(var r in t)!t.hasOwnProperty(r)||null!=n&&n.hasOwnProperty(r)||(0===r.indexOf("--")?e.setProperty(r,""):"float"===r?e.cssFloat="":e[r]="");for(var o in n)r=n[o],n.hasOwnProperty(o)&&t[o]!==r&&wn(e,o,r)}else for(var a in n)n.hasOwnProperty(a)&&wn(e,a,n[a])}function kn(e){if(-1===e.indexOf("-"))return!1;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}var Bn=new Map([["acceptCharset","accept-charset"],["htmlFor","for"],["httpEquiv","http-equiv"],["crossOrigin","crossorigin"],["accentHeight","accent-height"],["alignmentBaseline","alignment-baseline"],["arabicForm","arabic-form"],["baselineShift","baseline-shift"],["capHeight","cap-height"],["clipPath","clip-path"],["clipRule","clip-rule"],["colorInterpolation","color-interpolation"],["colorInterpolationFilters","color-interpolation-filters"],["colorProfile","color-profile"],["colorRendering","color-rendering"],["dominantBaseline","dominant-baseline"],["enableBackground","enable-background"],["fillOpacity","fill-opacity"],["fillRule","fill-rule"],["floodColor","flood-color"],["floodOpacity","flood-opacity"],["fontFamily","font-family"],["fontSize","font-size"],["fontSizeAdjust","font-size-adjust"],["fontStretch","font-stretch"],["fontStyle","font-style"],["fontVariant","font-variant"],["fontWeight","font-weight"],["glyphName","glyph-name"],["glyphOrientationHorizontal","glyph-orientation-horizontal"],["glyphOrientationVertical","glyph-orientation-vertical"],["horizAdvX","horiz-adv-x"],["horizOriginX","horiz-origin-x"],["imageRendering","image-rendering"],["letterSpacing","letter-spacing"],["lightingColor","lighting-color"],["markerEnd","marker-end"],["markerMid","marker-mid"],["markerStart","marker-start"],["overlinePosition","overline-position"],["overlineThickness","overline-thickness"],["paintOrder","paint-order"],["panose-1","panose-1"],["pointerEvents","pointer-events"],["renderingIntent","rendering-intent"],["shapeRendering","shape-rendering"],["stopColor","stop-color"],["stopOpacity","stop-opacity"],["strikethroughPosition","strikethrough-position"],["strikethroughThickness","strikethrough-thickness"],["strokeDasharray","stroke-dasharray"],["strokeDashoffset","stroke-dashoffset"],["strokeLinecap","stroke-linecap"],["strokeLinejoin","stroke-linejoin"],["strokeMiterlimit","stroke-miterlimit"],["strokeOpacity","stroke-opacity"],["strokeWidth","stroke-width"],["textAnchor","text-anchor"],["textDecoration","text-decoration"],["textRendering","text-rendering"],["transformOrigin","transform-origin"],["underlinePosition","underline-position"],["underlineThickness","underline-thickness"],["unicodeBidi","unicode-bidi"],["unicodeRange","unicode-range"],["unitsPerEm","units-per-em"],["vAlphabetic","v-alphabetic"],["vHanging","v-hanging"],["vIdeographic","v-ideographic"],["vMathematical","v-mathematical"],["vectorEffect","vector-effect"],["vertAdvY","vert-adv-y"],["vertOriginX","vert-origin-x"],["vertOriginY","vert-origin-y"],["wordSpacing","word-spacing"],["writingMode","writing-mode"],["xmlnsXlink","xmlns:xlink"],["xHeight","x-height"]]),Sn=/^[\u0000-\u001F ]*j[\r\n\t]*a[\r\n\t]*v[\r\n\t]*a[\r\n\t]*s[\r\n\t]*c[\r\n\t]*r[\r\n\t]*i[\r\n\t]*p[\r\n\t]*t[\r\n\t]*:/i;function zn(e){return Sn.test(""+e)?"javascript:throw new Error('React has blocked a javascript: URL as a security precaution.')":e}var Nn=null;function jn(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}var Pn=null,Tn=null;function Mn(e){var n=Ue(e);if(n&&(e=n.stateNode)){var t=e[Pe]||null;e:switch(e=n.stateNode,n.type){case"input":if(gn(e,t.value,t.defaultValue,t.defaultValue,t.checked,t.defaultChecked,t.type,t.name),n=t.name,"radio"===t.type&&null!=n){for(t=e;t.parentNode;)t=t.parentNode;for(t=t.querySelectorAll('input[name="'+mn(""+n)+'"][type="radio"]'),n=0;n<t.length;n++){var r=t[n];if(r!==e&&r.form===e.form){var o=r[Pe]||null;if(!o)throw Error(i(90));gn(r,o.value,o.defaultValue,o.defaultValue,o.checked,o.defaultChecked,o.type,o.name)}}for(n=0;n<t.length;n++)(r=t[n]).form===e.form&&fn(r)}break e;case"textarea":bn(e,t.value,t.defaultValue);break e;case"select":null!=(n=t.value)&&vn(e,!!t.multiple,n,!1)}}}var On=!1;function Rn(e,n,t){if(On)return e(n,t);On=!0;try{return e(n)}finally{if(On=!1,(null!==Pn||null!==Tn)&&(Fu(),Pn&&(n=Pn,e=Tn,Tn=Pn=null,Mn(n),e)))for(n=0;n<e.length;n++)Mn(e[n])}}function In(e,n){var t=e.stateNode;if(null===t)return null;var r=t[Pe]||null;if(null===r)return null;t=r[n];e:switch(n){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}if(e)return null;if(t&&"function"!=typeof t)throw Error(i(231,n,typeof t));return t}var Ln=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),Dn=!1;if(Ln)try{var Fn={};Object.defineProperty(Fn,"passive",{get:function(){Dn=!0}}),window.addEventListener("test",Fn,Fn),window.removeEventListener("test",Fn,Fn)}catch(e){Dn=!1}var Un=null,$n=null,qn=null;function Hn(){if(qn)return qn;var e,n,t=$n,r=t.length,o="value"in Un?Un.value:Un.textContent,a=o.length;for(e=0;e<r&&t[e]===o[e];e++);var i=r-e;for(n=1;n<=i&&t[r-n]===o[a-n];n++);return qn=o.slice(e,1<n?1-n:void 0)}function Wn(e){var n=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===n&&(e=13):e=n,10===e&&(e=13),32<=e||13===e?e:0}function Yn(){return!0}function Vn(){return!1}function Xn(e){function n(n,t,r,o,a){for(var i in this._reactName=n,this._targetInst=r,this.type=t,this.nativeEvent=o,this.target=a,this.currentTarget=null,e)e.hasOwnProperty(i)&&(n=e[i],this[i]=n?n(o):o[i]);return this.isDefaultPrevented=(null!=o.defaultPrevented?o.defaultPrevented:!1===o.returnValue)?Yn:Vn,this.isPropagationStopped=Vn,this}return d(n.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=Yn)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=Yn)},persist:function(){},isPersistent:Yn}),n}var Qn,Gn,Kn,Zn={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},Jn=Xn(Zn),et=d({},Zn,{view:0,detail:0}),nt=Xn(et),tt=d({},et,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:ht,button:0,buttons:0,relatedTarget:function(e){return void 0===e.relatedTarget?e.fromElement===e.srcElement?e.toElement:e.fromElement:e.relatedTarget},movementX:function(e){return"movementX"in e?e.movementX:(e!==Kn&&(Kn&&"mousemove"===e.type?(Qn=e.screenX-Kn.screenX,Gn=e.screenY-Kn.screenY):Gn=Qn=0,Kn=e),Qn)},movementY:function(e){return"movementY"in e?e.movementY:Gn}}),rt=Xn(tt),ot=Xn(d({},tt,{dataTransfer:0})),at=Xn(d({},et,{relatedTarget:0})),it=Xn(d({},Zn,{animationName:0,elapsedTime:0,pseudoElement:0})),lt=Xn(d({},Zn,{clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}})),st=Xn(d({},Zn,{data:0})),ut={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},ct={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},dt={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function ft(e){var n=this.nativeEvent;return n.getModifierState?n.getModifierState(e):!!(e=dt[e])&&!!n[e]}function ht(){return ft}var pt=Xn(d({},et,{key:function(e){if(e.key){var n=ut[e.key]||e.key;if("Unidentified"!==n)return n}return"keypress"===e.type?13===(e=Wn(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?ct[e.keyCode]||"Unidentified":""},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:ht,charCode:function(e){return"keypress"===e.type?Wn(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?Wn(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}})),mt=Xn(d({},tt,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0})),gt=Xn(d({},et,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:ht})),At=Xn(d({},Zn,{propertyName:0,elapsedTime:0,pseudoElement:0})),yt=Xn(d({},tt,{deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:0,deltaMode:0})),vt=Xn(d({},Zn,{newState:0,oldState:0})),bt=[9,13,27,32],xt=Ln&&"CompositionEvent"in window,Et=null;Ln&&"documentMode"in document&&(Et=document.documentMode);var Ct=Ln&&"TextEvent"in window&&!Et,wt=Ln&&(!xt||Et&&8<Et&&11>=Et),_t=String.fromCharCode(32),kt=!1;function Bt(e,n){switch(e){case"keyup":return-1!==bt.indexOf(n.keyCode);case"keydown":return 229!==n.keyCode;case"keypress":case"mousedown":case"focusout":return!0;default:return!1}}function St(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var zt=!1,Nt={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function jt(e){var n=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===n?!!Nt[e.type]:"textarea"===n}function Pt(e,n,t,r){Pn?Tn?Tn.push(r):Tn=[r]:Pn=r,0<(n=qc(n,"onChange")).length&&(t=new Jn("onChange","change",null,t,r),e.push({event:t,listeners:n}))}var Tt=null,Mt=null;function Ot(e){Oc(e,0)}function Rt(e){if(fn($e(e)))return e}function It(e,n){if("change"===e)return n}var Lt=!1;if(Ln){var Dt;if(Ln){var Ft="oninput"in document;if(!Ft){var Ut=document.createElement("div");Ut.setAttribute("oninput","return;"),Ft="function"==typeof Ut.oninput}Dt=Ft}else Dt=!1;Lt=Dt&&(!document.documentMode||9<document.documentMode)}function $t(){Tt&&(Tt.detachEvent("onpropertychange",qt),Mt=Tt=null)}function qt(e){if("value"===e.propertyName&&Rt(Mt)){var n=[];Pt(n,Mt,e,jn(e)),Rn(Ot,n)}}function Ht(e,n,t){"focusin"===e?($t(),Mt=t,(Tt=n).attachEvent("onpropertychange",qt)):"focusout"===e&&$t()}function Wt(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return Rt(Mt)}function Yt(e,n){if("click"===e)return Rt(n)}function Vt(e,n){if("input"===e||"change"===e)return Rt(n)}var Xt="function"==typeof Object.is?Object.is:function(e,n){return e===n&&(0!==e||1/e==1/n)||e!=e&&n!=n};function Qt(e,n){if(Xt(e,n))return!0;if("object"!=typeof e||null===e||"object"!=typeof n||null===n)return!1;var t=Object.keys(e),r=Object.keys(n);if(t.length!==r.length)return!1;for(r=0;r<t.length;r++){var o=t[r];if(!Q.call(n,o)||!Xt(e[o],n[o]))return!1}return!0}function Gt(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function Kt(e,n){var t,r=Gt(e);for(e=0;r;){if(3===r.nodeType){if(t=e+r.textContent.length,e<=n&&t>=n)return{node:r,offset:n-e};e=t}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=Gt(r)}}function Zt(e,n){return!(!e||!n)&&(e===n||(!e||3!==e.nodeType)&&(n&&3===n.nodeType?Zt(e,n.parentNode):"contains"in e?e.contains(n):!!e.compareDocumentPosition&&!!(16&e.compareDocumentPosition(n))))}function Jt(e){for(var n=hn((e=null!=e&&null!=e.ownerDocument&&null!=e.ownerDocument.defaultView?e.ownerDocument.defaultView:window).document);n instanceof e.HTMLIFrameElement;){try{var t="string"==typeof n.contentWindow.location.href}catch(e){t=!1}if(!t)break;n=hn((e=n.contentWindow).document)}return n}function er(e){var n=e&&e.nodeName&&e.nodeName.toLowerCase();return n&&("input"===n&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===n||"true"===e.contentEditable)}var nr=Ln&&"documentMode"in document&&11>=document.documentMode,tr=null,rr=null,or=null,ar=!1;function ir(e,n,t){var r=t.window===t?t.document:9===t.nodeType?t:t.ownerDocument;ar||null==tr||tr!==hn(r)||(r="selectionStart"in(r=tr)&&er(r)?{start:r.selectionStart,end:r.selectionEnd}:{anchorNode:(r=(r.ownerDocument&&r.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:r.anchorOffset,focusNode:r.focusNode,focusOffset:r.focusOffset},or&&Qt(or,r)||(or=r,0<(r=qc(rr,"onSelect")).length&&(n=new Jn("onSelect","select",null,n,t),e.push({event:n,listeners:r}),n.target=tr)))}function lr(e,n){var t={};return t[e.toLowerCase()]=n.toLowerCase(),t["Webkit"+e]="webkit"+n,t["Moz"+e]="moz"+n,t}var sr={animationend:lr("Animation","AnimationEnd"),animationiteration:lr("Animation","AnimationIteration"),animationstart:lr("Animation","AnimationStart"),transitionrun:lr("Transition","TransitionRun"),transitionstart:lr("Transition","TransitionStart"),transitioncancel:lr("Transition","TransitionCancel"),transitionend:lr("Transition","TransitionEnd")},ur={},cr={};function dr(e){if(ur[e])return ur[e];if(!sr[e])return e;var n,t=sr[e];for(n in t)if(t.hasOwnProperty(n)&&n in cr)return ur[e]=t[n];return e}Ln&&(cr=document.createElement("div").style,"AnimationEvent"in window||(delete sr.animationend.animation,delete sr.animationiteration.animation,delete sr.animationstart.animation),"TransitionEvent"in window||delete sr.transitionend.transition);var fr=dr("animationend"),hr=dr("animationiteration"),pr=dr("animationstart"),mr=dr("transitionrun"),gr=dr("transitionstart"),Ar=dr("transitioncancel"),yr=dr("transitionend"),vr=new Map,br="abort auxClick beforeToggle cancel canPlay canPlayThrough click close contextMenu copy cut drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error gotPointerCapture input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart lostPointerCapture mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing pointerCancel pointerDown pointerMove pointerOut pointerOver pointerUp progress rateChange reset resize seeked seeking stalled submit suspend timeUpdate touchCancel touchEnd touchStart volumeChange scroll toggle touchMove waiting wheel".split(" ");function xr(e,n){vr.set(e,n),Ve(n,[e])}br.push("scrollEnd");var Er=new WeakMap;function Cr(e,n){if("object"==typeof e&&null!==e){var t=Er.get(e);return void 0!==t?t:(n={value:e,source:n,stack:sn(n)},Er.set(e,n),n)}return{value:e,source:n,stack:sn(n)}}var wr=[],_r=0,kr=0;function Br(){for(var e=_r,n=kr=_r=0;n<e;){var t=wr[n];wr[n++]=null;var r=wr[n];wr[n++]=null;var o=wr[n];wr[n++]=null;var a=wr[n];if(wr[n++]=null,null!==r&&null!==o){var i=r.pending;null===i?o.next=o:(o.next=i.next,i.next=o),r.pending=o}0!==a&&jr(t,o,a)}}function Sr(e,n,t,r){wr[_r++]=e,wr[_r++]=n,wr[_r++]=t,wr[_r++]=r,kr|=r,e.lanes|=r,null!==(e=e.alternate)&&(e.lanes|=r)}function zr(e,n,t,r){return Sr(e,n,t,r),Pr(e)}function Nr(e,n){return Sr(e,null,null,n),Pr(e)}function jr(e,n,t){e.lanes|=t;var r=e.alternate;null!==r&&(r.lanes|=t);for(var o=!1,a=e.return;null!==a;)a.childLanes|=t,null!==(r=a.alternate)&&(r.childLanes|=t),22===a.tag&&(null===(e=a.stateNode)||1&e._visibility||(o=!0)),e=a,a=a.return;return 3===e.tag?(a=e.stateNode,o&&null!==n&&(o=31-fe(t),null===(r=(e=a.hiddenUpdates)[o])?e[o]=[n]:r.push(n),n.lane=536870912|t),a):null}function Pr(e){if(50<ju)throw ju=0,Pu=null,Error(i(185));for(var n=e.return;null!==n;)n=(e=n).return;return 3===e.tag?e.stateNode:null}var Tr={};function Mr(e,n,t,r){this.tag=e,this.key=t,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.refCleanup=this.ref=null,this.pendingProps=n,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.subtreeFlags=this.flags=0,this.deletions=null,this.childLanes=this.lanes=0,this.alternate=null}function Or(e,n,t,r){return new Mr(e,n,t,r)}function Rr(e){return!(!(e=e.prototype)||!e.isReactComponent)}function Ir(e,n){var t=e.alternate;return null===t?((t=Or(e.tag,n,e.key,e.mode)).elementType=e.elementType,t.type=e.type,t.stateNode=e.stateNode,t.alternate=e,e.alternate=t):(t.pendingProps=n,t.type=e.type,t.flags=0,t.subtreeFlags=0,t.deletions=null),t.flags=65011712&e.flags,t.childLanes=e.childLanes,t.lanes=e.lanes,t.child=e.child,t.memoizedProps=e.memoizedProps,t.memoizedState=e.memoizedState,t.updateQueue=e.updateQueue,n=e.dependencies,t.dependencies=null===n?null:{lanes:n.lanes,firstContext:n.firstContext},t.sibling=e.sibling,t.index=e.index,t.ref=e.ref,t.refCleanup=e.refCleanup,t}function Lr(e,n){e.flags&=65011714;var t=e.alternate;return null===t?(e.childLanes=0,e.lanes=n,e.child=null,e.subtreeFlags=0,e.memoizedProps=null,e.memoizedState=null,e.updateQueue=null,e.dependencies=null,e.stateNode=null):(e.childLanes=t.childLanes,e.lanes=t.lanes,e.child=t.child,e.subtreeFlags=0,e.deletions=null,e.memoizedProps=t.memoizedProps,e.memoizedState=t.memoizedState,e.updateQueue=t.updateQueue,e.type=t.type,n=t.dependencies,e.dependencies=null===n?null:{lanes:n.lanes,firstContext:n.firstContext}),e}function Dr(e,n,t,r,o,a){var l=0;if(r=e,"function"==typeof e)Rr(e)&&(l=1);else if("string"==typeof e)l=function(e,n,t){if(1===t||null!=n.itemProp)return!1;switch(e){case"meta":case"title":return!0;case"style":if("string"!=typeof n.precedence||"string"!=typeof n.href||""===n.href)break;return!0;case"link":if("string"!=typeof n.rel||"string"!=typeof n.href||""===n.href||n.onLoad||n.onError)break;return"stylesheet"!==n.rel||(e=n.disabled,"string"==typeof n.precedence&&null==e);case"script":if(n.async&&"function"!=typeof n.async&&"symbol"!=typeof n.async&&!n.onLoad&&!n.onError&&n.src&&"string"==typeof n.src)return!0}return!1}(e,t,U.current)?26:"html"===e||"head"===e||"body"===e?27:5;else e:switch(e){case k:return(e=Or(31,t,n,o)).elementType=k,e.lanes=a,e;case m:return Fr(t.children,o,a,n);case g:l=8,o|=24;break;case A:return(e=Or(12,t,n,2|o)).elementType=A,e.lanes=a,e;case E:return(e=Or(13,t,n,o)).elementType=E,e.lanes=a,e;case C:return(e=Or(19,t,n,o)).elementType=C,e.lanes=a,e;default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case y:case b:l=10;break e;case v:l=9;break e;case x:l=11;break e;case w:l=14;break e;case _:l=16,r=null;break e}l=29,t=Error(i(130,null===e?"null":typeof e,"")),r=null}return(n=Or(l,t,n,o)).elementType=e,n.type=r,n.lanes=a,n}function Fr(e,n,t,r){return(e=Or(7,e,r,n)).lanes=t,e}function Ur(e,n,t){return(e=Or(6,e,null,n)).lanes=t,e}function $r(e,n,t){return(n=Or(4,null!==e.children?e.children:[],e.key,n)).lanes=t,n.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},n}var qr=[],Hr=0,Wr=null,Yr=0,Vr=[],Xr=0,Qr=null,Gr=1,Kr="";function Zr(e,n){qr[Hr++]=Yr,qr[Hr++]=Wr,Wr=e,Yr=n}function Jr(e,n,t){Vr[Xr++]=Gr,Vr[Xr++]=Kr,Vr[Xr++]=Qr,Qr=e;var r=Gr;e=Kr;var o=32-fe(r)-1;r&=~(1<<o),t+=1;var a=32-fe(n)+o;if(30<a){var i=o-o%5;a=(r&(1<<i)-1).toString(32),r>>=i,o-=i,Gr=1<<32-fe(n)+o|t<<o|r,Kr=a+e}else Gr=1<<a|t<<o|r,Kr=e}function eo(e){null!==e.return&&(Zr(e,1),Jr(e,1,0))}function no(e){for(;e===Wr;)Wr=qr[--Hr],qr[Hr]=null,Yr=qr[--Hr],qr[Hr]=null;for(;e===Qr;)Qr=Vr[--Xr],Vr[Xr]=null,Kr=Vr[--Xr],Vr[Xr]=null,Gr=Vr[--Xr],Vr[Xr]=null}var to=null,ro=null,oo=!1,ao=null,io=!1,lo=Error(i(519));function so(e){throw mo(Cr(Error(i(418,"")),e)),lo}function uo(e){var n=e.stateNode,t=e.type,r=e.memoizedProps;switch(n[je]=e,n[Pe]=r,t){case"dialog":Rc("cancel",n),Rc("close",n);break;case"iframe":case"object":case"embed":Rc("load",n);break;case"video":case"audio":for(t=0;t<Tc.length;t++)Rc(Tc[t],n);break;case"source":Rc("error",n);break;case"img":case"image":case"link":Rc("error",n),Rc("load",n);break;case"details":Rc("toggle",n);break;case"input":Rc("invalid",n),An(n,r.value,r.defaultValue,r.checked,r.defaultChecked,r.type,r.name,!0),dn(n);break;case"select":Rc("invalid",n);break;case"textarea":Rc("invalid",n),xn(n,r.value,r.defaultValue,r.children),dn(n)}"string"!=typeof(t=r.children)&&"number"!=typeof t&&"bigint"!=typeof t||n.textContent===""+t||!0===r.suppressHydrationWarning||Qc(n.textContent,t)?(null!=r.popover&&(Rc("beforetoggle",n),Rc("toggle",n)),null!=r.onScroll&&Rc("scroll",n),null!=r.onScrollEnd&&Rc("scrollend",n),null!=r.onClick&&(n.onclick=Gc),n=!0):n=!1,n||so(e)}function co(e){for(to=e.return;to;)switch(to.tag){case 5:case 13:return void(io=!1);case 27:case 3:return void(io=!0);default:to=to.return}}function fo(e){if(e!==to)return!1;if(!oo)return co(e),oo=!0,!1;var n,t=e.tag;if((n=3!==t&&27!==t)&&((n=5===t)&&(n=!("form"!==(n=e.type)&&"button"!==n)||ad(e.type,e.memoizedProps)),n=!n),n&&ro&&so(e),co(e),13===t){if(!(e=null!==(e=e.memoizedState)?e.dehydrated:null))throw Error(i(317));e:{for(e=e.nextSibling,t=0;e;){if(8===e.nodeType)if("/$"===(n=e.data)){if(0===t){ro=gd(e.nextSibling);break e}t--}else"$"!==n&&"$!"!==n&&"$?"!==n||t++;e=e.nextSibling}ro=null}}else 27===t?(t=ro,fd(e.type)?(e=Ad,Ad=null,ro=e):ro=t):ro=to?gd(e.stateNode.nextSibling):null;return!0}function ho(){ro=to=null,oo=!1}function po(){var e=ao;return null!==e&&(null===yu?yu=e:yu.push.apply(yu,e),ao=null),e}function mo(e){null===ao?ao=[e]:ao.push(e)}var go=L(null),Ao=null,yo=null;function vo(e,n,t){F(go,n._currentValue),n._currentValue=t}function bo(e){e._currentValue=go.current,D(go)}function xo(e,n,t){for(;null!==e;){var r=e.alternate;if((e.childLanes&n)!==n?(e.childLanes|=n,null!==r&&(r.childLanes|=n)):null!==r&&(r.childLanes&n)!==n&&(r.childLanes|=n),e===t)break;e=e.return}}function Eo(e,n,t,r){var o=e.child;for(null!==o&&(o.return=e);null!==o;){var a=o.dependencies;if(null!==a){var l=o.child;a=a.firstContext;e:for(;null!==a;){var s=a;a=o;for(var u=0;u<n.length;u++)if(s.context===n[u]){a.lanes|=t,null!==(s=a.alternate)&&(s.lanes|=t),xo(a.return,t,e),r||(l=null);break e}a=s.next}}else if(18===o.tag){if(null===(l=o.return))throw Error(i(341));l.lanes|=t,null!==(a=l.alternate)&&(a.lanes|=t),xo(l,t,e),l=null}else l=o.child;if(null!==l)l.return=o;else for(l=o;null!==l;){if(l===e){l=null;break}if(null!==(o=l.sibling)){o.return=l.return,l=o;break}l=l.return}o=l}}function Co(e,n,t,r){e=null;for(var o=n,a=!1;null!==o;){if(!a)if(524288&o.flags)a=!0;else if(262144&o.flags)break;if(10===o.tag){var l=o.alternate;if(null===l)throw Error(i(387));if(null!==(l=l.memoizedProps)){var s=o.type;Xt(o.pendingProps.value,l.value)||(null!==e?e.push(s):e=[s])}}else if(o===H.current){if(null===(l=o.alternate))throw Error(i(387));l.memoizedState.memoizedState!==o.memoizedState.memoizedState&&(null!==e?e.push(Vd):e=[Vd])}o=o.return}null!==e&&Eo(n,e,t,r),n.flags|=262144}function wo(e){for(e=e.firstContext;null!==e;){if(!Xt(e.context._currentValue,e.memoizedValue))return!0;e=e.next}return!1}function _o(e){Ao=e,yo=null,null!==(e=e.dependencies)&&(e.firstContext=null)}function ko(e){return So(Ao,e)}function Bo(e,n){return null===Ao&&_o(e),So(e,n)}function So(e,n){var t=n._currentValue;if(n={context:n,memoizedValue:t,next:null},null===yo){if(null===e)throw Error(i(308));yo=n,e.dependencies={lanes:0,firstContext:n},e.flags|=524288}else yo=yo.next=n;return t}var zo="undefined"!=typeof AbortController?AbortController:function(){var e=[],n=this.signal={aborted:!1,addEventListener:function(n,t){e.push(t)}};this.abort=function(){n.aborted=!0,e.forEach(function(e){return e()})}},No=r.unstable_scheduleCallback,jo=r.unstable_NormalPriority,Po={$$typeof:b,Consumer:null,Provider:null,_currentValue:null,_currentValue2:null,_threadCount:0};function To(){return{controller:new zo,data:new Map,refCount:0}}function Mo(e){e.refCount--,0===e.refCount&&No(jo,function(){e.controller.abort()})}var Oo=null,Ro=0,Io=0,Lo=null;function Do(){if(0===--Ro&&null!==Oo){null!==Lo&&(Lo.status="fulfilled");var e=Oo;Oo=null,Io=0,Lo=null;for(var n=0;n<e.length;n++)(0,e[n])()}}var Fo=T.S;T.S=function(e,n){"object"==typeof n&&null!==n&&"function"==typeof n.then&&function(e,n){if(null===Oo){var t=Oo=[];Ro=0,Io=Sc(),Lo={status:"pending",value:void 0,then:function(e){t.push(e)}}}Ro++,n.then(Do,Do)}(0,n),null!==Fo&&Fo(e,n)};var Uo=L(null);function $o(){var e=Uo.current;return null!==e?e:tu.pooledCache}function qo(e,n){F(Uo,null===n?Uo.current:n.pool)}function Ho(){var e=$o();return null===e?null:{parent:Po._currentValue,pool:e}}var Wo=Error(i(460)),Yo=Error(i(474)),Vo=Error(i(542)),Xo={then:function(){}};function Qo(e){return"fulfilled"===(e=e.status)||"rejected"===e}function Go(){}function Ko(e,n,t){switch(void 0===(t=e[t])?e.push(n):t!==n&&(n.then(Go,Go),n=t),n.status){case"fulfilled":return n.value;case"rejected":throw ea(e=n.reason),e;default:if("string"==typeof n.status)n.then(Go,Go);else{if(null!==(e=tu)&&100<e.shellSuspendCounter)throw Error(i(482));(e=n).status="pending",e.then(function(e){if("pending"===n.status){var t=n;t.status="fulfilled",t.value=e}},function(e){if("pending"===n.status){var t=n;t.status="rejected",t.reason=e}})}switch(n.status){case"fulfilled":return n.value;case"rejected":throw ea(e=n.reason),e}throw Zo=n,Wo}}var Zo=null;function Jo(){if(null===Zo)throw Error(i(459));var e=Zo;return Zo=null,e}function ea(e){if(e===Wo||e===Vo)throw Error(i(483))}var na=!1;function ta(e){e.updateQueue={baseState:e.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null,lanes:0,hiddenCallbacks:null},callbacks:null}}function ra(e,n){e=e.updateQueue,n.updateQueue===e&&(n.updateQueue={baseState:e.baseState,firstBaseUpdate:e.firstBaseUpdate,lastBaseUpdate:e.lastBaseUpdate,shared:e.shared,callbacks:null})}function oa(e){return{lane:e,tag:0,payload:null,callback:null,next:null}}function aa(e,n,t){var r=e.updateQueue;if(null===r)return null;if(r=r.shared,2&nu){var o=r.pending;return null===o?n.next=n:(n.next=o.next,o.next=n),r.pending=n,n=Pr(e),jr(e,null,t),n}return Sr(e,r,n,t),Pr(e)}function ia(e,n,t){if(null!==(n=n.updateQueue)&&(n=n.shared,4194048&t)){var r=n.lanes;t|=r&=e.pendingLanes,n.lanes=t,ke(e,t)}}function la(e,n){var t=e.updateQueue,r=e.alternate;if(null!==r&&t===(r=r.updateQueue)){var o=null,a=null;if(null!==(t=t.firstBaseUpdate)){do{var i={lane:t.lane,tag:t.tag,payload:t.payload,callback:null,next:null};null===a?o=a=i:a=a.next=i,t=t.next}while(null!==t);null===a?o=a=n:a=a.next=n}else o=a=n;return t={baseState:r.baseState,firstBaseUpdate:o,lastBaseUpdate:a,shared:r.shared,callbacks:r.callbacks},void(e.updateQueue=t)}null===(e=t.lastBaseUpdate)?t.firstBaseUpdate=n:e.next=n,t.lastBaseUpdate=n}var sa=!1;function ua(){if(sa&&null!==Lo)throw Lo}function ca(e,n,t,r){sa=!1;var o=e.updateQueue;na=!1;var a=o.firstBaseUpdate,i=o.lastBaseUpdate,l=o.shared.pending;if(null!==l){o.shared.pending=null;var s=l,u=s.next;s.next=null,null===i?a=u:i.next=u,i=s;var c=e.alternate;null!==c&&(l=(c=c.updateQueue).lastBaseUpdate)!==i&&(null===l?c.firstBaseUpdate=u:l.next=u,c.lastBaseUpdate=s)}if(null!==a){var f=o.baseState;for(i=0,c=u=s=null,l=a;;){var h=-536870913&l.lane,p=h!==l.lane;if(p?(ou&h)===h:(r&h)===h){0!==h&&h===Io&&(sa=!0),null!==c&&(c=c.next={lane:0,tag:l.tag,payload:l.payload,callback:null,next:null});e:{var m=e,g=l;h=n;var A=t;switch(g.tag){case 1:if("function"==typeof(m=g.payload)){f=m.call(A,f,h);break e}f=m;break e;case 3:m.flags=-65537&m.flags|128;case 0:if(null==(h="function"==typeof(m=g.payload)?m.call(A,f,h):m))break e;f=d({},f,h);break e;case 2:na=!0}}null!==(h=l.callback)&&(e.flags|=64,p&&(e.flags|=8192),null===(p=o.callbacks)?o.callbacks=[h]:p.push(h))}else p={lane:h,tag:l.tag,payload:l.payload,callback:l.callback,next:null},null===c?(u=c=p,s=f):c=c.next=p,i|=h;if(null===(l=l.next)){if(null===(l=o.shared.pending))break;l=(p=l).next,p.next=null,o.lastBaseUpdate=p,o.shared.pending=null}}null===c&&(s=f),o.baseState=s,o.firstBaseUpdate=u,o.lastBaseUpdate=c,null===a&&(o.shared.lanes=0),fu|=i,e.lanes=i,e.memoizedState=f}}function da(e,n){if("function"!=typeof e)throw Error(i(191,e));e.call(n)}function fa(e,n){var t=e.callbacks;if(null!==t)for(e.callbacks=null,e=0;e<t.length;e++)da(t[e],n)}var ha=L(null),pa=L(0);function ma(e,n){F(pa,e=cu),F(ha,n),cu=e|n.baseLanes}function ga(){F(pa,cu),F(ha,ha.current)}function Aa(){cu=pa.current,D(ha),D(pa)}var ya=0,va=null,ba=null,xa=null,Ea=!1,Ca=!1,wa=!1,_a=0,ka=0,Ba=null,Sa=0;function za(){throw Error(i(321))}function Na(e,n){if(null===n)return!1;for(var t=0;t<n.length&&t<e.length;t++)if(!Xt(e[t],n[t]))return!1;return!0}function ja(e,n,t,r,o,a){return ya=a,va=n,n.memoizedState=null,n.updateQueue=null,n.lanes=0,T.H=null===e||null===e.memoizedState?Wi:Yi,wa=!1,a=t(r,o),wa=!1,Ca&&(a=Ta(n,t,r,o)),Pa(e),a}function Pa(e){T.H=Hi;var n=null!==ba&&null!==ba.next;if(ya=0,xa=ba=va=null,Ea=!1,ka=0,Ba=null,n)throw Error(i(300));null===e||kl||null!==(e=e.dependencies)&&wo(e)&&(kl=!0)}function Ta(e,n,t,r){va=e;var o=0;do{if(Ca&&(Ba=null),ka=0,Ca=!1,25<=o)throw Error(i(301));if(o+=1,xa=ba=null,null!=e.updateQueue){var a=e.updateQueue;a.lastEffect=null,a.events=null,a.stores=null,null!=a.memoCache&&(a.memoCache.index=0)}T.H=Vi,a=n(t,r)}while(Ca);return a}function Ma(){var e=T.H,n=e.useState()[0];return n="function"==typeof n.then?Fa(n):n,e=e.useState()[0],(null!==ba?ba.memoizedState:null)!==e&&(va.flags|=1024),n}function Oa(){var e=0!==_a;return _a=0,e}function Ra(e,n,t){n.updateQueue=e.updateQueue,n.flags&=-2053,e.lanes&=~t}function Ia(e){if(Ea){for(e=e.memoizedState;null!==e;){var n=e.queue;null!==n&&(n.pending=null),e=e.next}Ea=!1}ya=0,xa=ba=va=null,Ca=!1,ka=_a=0,Ba=null}function La(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===xa?va.memoizedState=xa=e:xa=xa.next=e,xa}function Da(){if(null===ba){var e=va.alternate;e=null!==e?e.memoizedState:null}else e=ba.next;var n=null===xa?va.memoizedState:xa.next;if(null!==n)xa=n,ba=e;else{if(null===e){if(null===va.alternate)throw Error(i(467));throw Error(i(310))}e={memoizedState:(ba=e).memoizedState,baseState:ba.baseState,baseQueue:ba.baseQueue,queue:ba.queue,next:null},null===xa?va.memoizedState=xa=e:xa=xa.next=e}return xa}function Fa(e){var n=ka;return ka+=1,null===Ba&&(Ba=[]),e=Ko(Ba,e,n),n=va,null===(null===xa?n.memoizedState:xa.next)&&(n=n.alternate,T.H=null===n||null===n.memoizedState?Wi:Yi),e}function Ua(e){if(null!==e&&"object"==typeof e){if("function"==typeof e.then)return Fa(e);if(e.$$typeof===b)return ko(e)}throw Error(i(438,String(e)))}function $a(e){var n=null,t=va.updateQueue;if(null!==t&&(n=t.memoCache),null==n){var r=va.alternate;null!==r&&null!==(r=r.updateQueue)&&null!=(r=r.memoCache)&&(n={data:r.data.map(function(e){return e.slice()}),index:0})}if(null==n&&(n={data:[],index:0}),null===t&&(t={lastEffect:null,events:null,stores:null,memoCache:null},va.updateQueue=t),t.memoCache=n,void 0===(t=n.data[n.index]))for(t=n.data[n.index]=Array(e),r=0;r<e;r++)t[r]=B;return n.index++,t}function qa(e,n){return"function"==typeof n?n(e):n}function Ha(e){return Wa(Da(),ba,e)}function Wa(e,n,t){var r=e.queue;if(null===r)throw Error(i(311));r.lastRenderedReducer=t;var o=e.baseQueue,a=r.pending;if(null!==a){if(null!==o){var l=o.next;o.next=a.next,a.next=l}n.baseQueue=o=a,r.pending=null}if(a=e.baseState,null===o)e.memoizedState=a;else{var s=l=null,u=null,c=n=o.next,d=!1;do{var f=-536870913&c.lane;if(f!==c.lane?(ou&f)===f:(ya&f)===f){var h=c.revertLane;if(0===h)null!==u&&(u=u.next={lane:0,revertLane:0,action:c.action,hasEagerState:c.hasEagerState,eagerState:c.eagerState,next:null}),f===Io&&(d=!0);else{if((ya&h)===h){c=c.next,h===Io&&(d=!0);continue}f={lane:0,revertLane:c.revertLane,action:c.action,hasEagerState:c.hasEagerState,eagerState:c.eagerState,next:null},null===u?(s=u=f,l=a):u=u.next=f,va.lanes|=h,fu|=h}f=c.action,wa&&t(a,f),a=c.hasEagerState?c.eagerState:t(a,f)}else h={lane:f,revertLane:c.revertLane,action:c.action,hasEagerState:c.hasEagerState,eagerState:c.eagerState,next:null},null===u?(s=u=h,l=a):u=u.next=h,va.lanes|=f,fu|=f;c=c.next}while(null!==c&&c!==n);if(null===u?l=a:u.next=s,!Xt(a,e.memoizedState)&&(kl=!0,d&&null!==(t=Lo)))throw t;e.memoizedState=a,e.baseState=l,e.baseQueue=u,r.lastRenderedState=a}return null===o&&(r.lanes=0),[e.memoizedState,r.dispatch]}function Ya(e){var n=Da(),t=n.queue;if(null===t)throw Error(i(311));t.lastRenderedReducer=e;var r=t.dispatch,o=t.pending,a=n.memoizedState;if(null!==o){t.pending=null;var l=o=o.next;do{a=e(a,l.action),l=l.next}while(l!==o);Xt(a,n.memoizedState)||(kl=!0),n.memoizedState=a,null===n.baseQueue&&(n.baseState=a),t.lastRenderedState=a}return[a,r]}function Va(e,n,t){var r=va,o=Da(),a=oo;if(a){if(void 0===t)throw Error(i(407));t=t()}else t=n();var l=!Xt((ba||o).memoizedState,t);if(l&&(o.memoizedState=t,kl=!0),o=o.queue,gi(2048,8,Ga.bind(null,r,o,e),[e]),o.getSnapshot!==n||l||null!==xa&&1&xa.memoizedState.tag){if(r.flags|=2048,hi(9,{destroy:void 0,resource:void 0},Qa.bind(null,r,o,t,n),null),null===tu)throw Error(i(349));a||124&ya||Xa(r,n,t)}return t}function Xa(e,n,t){e.flags|=16384,e={getSnapshot:n,value:t},null===(n=va.updateQueue)?(n={lastEffect:null,events:null,stores:null,memoCache:null},va.updateQueue=n,n.stores=[e]):null===(t=n.stores)?n.stores=[e]:t.push(e)}function Qa(e,n,t,r){n.value=t,n.getSnapshot=r,Ka(n)&&Za(e)}function Ga(e,n,t){return t(function(){Ka(n)&&Za(e)})}function Ka(e){var n=e.getSnapshot;e=e.value;try{var t=n();return!Xt(e,t)}catch(e){return!0}}function Za(e){var n=Nr(e,2);null!==n&&Ou(n,0,2)}function Ja(e){var n=La();if("function"==typeof e){var t=e;if(e=t(),wa){de(!0);try{t()}finally{de(!1)}}}return n.memoizedState=n.baseState=e,n.queue={pending:null,lanes:0,dispatch:null,lastRenderedReducer:qa,lastRenderedState:e},n}function ei(e,n,t,r){return e.baseState=t,Wa(e,ba,"function"==typeof r?r:qa)}function ni(e,n,t,r,o){if(Ui(e))throw Error(i(485));if(null!==(e=n.action)){var a={payload:o,action:e,next:null,isTransition:!0,status:"pending",value:null,reason:null,listeners:[],then:function(e){a.listeners.push(e)}};null!==T.T?t(!0):a.isTransition=!1,r(a),null===(t=n.pending)?(a.next=n.pending=a,ti(n,a)):(a.next=t.next,n.pending=t.next=a)}}function ti(e,n){var t=n.action,r=n.payload,o=e.state;if(n.isTransition){var a=T.T,i={};T.T=i;try{var l=t(o,r),s=T.S;null!==s&&s(i,l),ri(e,n,l)}catch(t){ai(e,n,t)}finally{T.T=a}}else try{ri(e,n,a=t(o,r))}catch(t){ai(e,n,t)}}function ri(e,n,t){null!==t&&"object"==typeof t&&"function"==typeof t.then?t.then(function(t){oi(e,n,t)},function(t){return ai(e,n,t)}):oi(e,n,t)}function oi(e,n,t){n.status="fulfilled",n.value=t,ii(n),e.state=t,null!==(n=e.pending)&&((t=n.next)===n?e.pending=null:(t=t.next,n.next=t,ti(e,t)))}function ai(e,n,t){var r=e.pending;if(e.pending=null,null!==r){r=r.next;do{n.status="rejected",n.reason=t,ii(n),n=n.next}while(n!==r)}e.action=null}function ii(e){e=e.listeners;for(var n=0;n<e.length;n++)(0,e[n])()}function li(e,n){return n}function si(e,n){if(oo){var t=tu.formState;if(null!==t){e:{var r=va;if(oo){if(ro){n:{for(var o=ro,a=io;8!==o.nodeType;){if(!a){o=null;break n}if(null===(o=gd(o.nextSibling))){o=null;break n}}o="F!"===(a=o.data)||"F"===a?o:null}if(o){ro=gd(o.nextSibling),r="F!"===o.data;break e}}so(r)}r=!1}r&&(n=t[0])}}return(t=La()).memoizedState=t.baseState=n,r={pending:null,lanes:0,dispatch:null,lastRenderedReducer:li,lastRenderedState:n},t.queue=r,t=Li.bind(null,va,r),r.dispatch=t,r=Ja(!1),a=Fi.bind(null,va,!1,r.queue),o={state:n,dispatch:null,action:e,pending:null},(r=La()).queue=o,t=ni.bind(null,va,o,a,t),o.dispatch=t,r.memoizedState=e,[n,t,!1]}function ui(e){return ci(Da(),ba,e)}function ci(e,n,t){if(n=Wa(e,n,li)[0],e=Ha(qa)[0],"object"==typeof n&&null!==n&&"function"==typeof n.then)try{var r=Fa(n)}catch(e){if(e===Wo)throw Vo;throw e}else r=n;var o=(n=Da()).queue,a=o.dispatch;return t!==n.memoizedState&&(va.flags|=2048,hi(9,{destroy:void 0,resource:void 0},di.bind(null,o,t),null)),[r,a,e]}function di(e,n){e.action=n}function fi(e){var n=Da(),t=ba;if(null!==t)return ci(n,t,e);Da(),n=n.memoizedState;var r=(t=Da()).queue.dispatch;return t.memoizedState=e,[n,r,!1]}function hi(e,n,t,r){return e={tag:e,create:t,deps:r,inst:n,next:null},null===(n=va.updateQueue)&&(n={lastEffect:null,events:null,stores:null,memoCache:null},va.updateQueue=n),null===(t=n.lastEffect)?n.lastEffect=e.next=e:(r=t.next,t.next=e,e.next=r,n.lastEffect=e),e}function pi(){return Da().memoizedState}function mi(e,n,t,r){var o=La();r=void 0===r?null:r,va.flags|=e,o.memoizedState=hi(1|n,{destroy:void 0,resource:void 0},t,r)}function gi(e,n,t,r){var o=Da();r=void 0===r?null:r;var a=o.memoizedState.inst;null!==ba&&null!==r&&Na(r,ba.memoizedState.deps)?o.memoizedState=hi(n,a,t,r):(va.flags|=e,o.memoizedState=hi(1|n,a,t,r))}function Ai(e,n){mi(8390656,8,e,n)}function yi(e,n){gi(2048,8,e,n)}function vi(e,n){return gi(4,2,e,n)}function bi(e,n){return gi(4,4,e,n)}function xi(e,n){if("function"==typeof n){e=e();var t=n(e);return function(){"function"==typeof t?t():n(null)}}if(null!=n)return e=e(),n.current=e,function(){n.current=null}}function Ei(e,n,t){t=null!=t?t.concat([e]):null,gi(4,4,xi.bind(null,n,e),t)}function Ci(){}function wi(e,n){var t=Da();n=void 0===n?null:n;var r=t.memoizedState;return null!==n&&Na(n,r[1])?r[0]:(t.memoizedState=[e,n],e)}function _i(e,n){var t=Da();n=void 0===n?null:n;var r=t.memoizedState;if(null!==n&&Na(n,r[1]))return r[0];if(r=e(),wa){de(!0);try{e()}finally{de(!1)}}return t.memoizedState=[r,n],r}function ki(e,n,t){return void 0===t||1073741824&ya?e.memoizedState=n:(e.memoizedState=t,e=Mu(),va.lanes|=e,fu|=e,t)}function Bi(e,n,t,r){return Xt(t,n)?t:null!==ha.current?(e=ki(e,t,r),Xt(e,n)||(kl=!0),e):42&ya?(e=Mu(),va.lanes|=e,fu|=e,n):(kl=!0,e.memoizedState=t)}function Si(e,n,t,r,o){var a=M.p;M.p=0!==a&&8>a?a:8;var i,l,s,u=T.T,c={};T.T=c,Fi(e,!1,n,t);try{var d=o(),f=T.S;null!==f&&f(c,d),null!==d&&"object"==typeof d&&"function"==typeof d.then?Di(e,n,(i=r,l=[],s={status:"pending",value:null,reason:null,then:function(e){l.push(e)}},d.then(function(){s.status="fulfilled",s.value=i;for(var e=0;e<l.length;e++)(0,l[e])(i)},function(e){for(s.status="rejected",s.reason=e,e=0;e<l.length;e++)(0,l[e])(void 0)}),s),Tu()):Di(e,n,r,Tu())}catch(t){Di(e,n,{then:function(){},status:"rejected",reason:t},Tu())}finally{M.p=a,T.T=u}}function zi(){}function Ni(e,n,t,r){if(5!==e.tag)throw Error(i(476));var o=ji(e).queue;Si(e,o,n,O,null===t?zi:function(){return Pi(e),t(r)})}function ji(e){var n=e.memoizedState;if(null!==n)return n;var t={};return(n={memoizedState:O,baseState:O,baseQueue:null,queue:{pending:null,lanes:0,dispatch:null,lastRenderedReducer:qa,lastRenderedState:O},next:null}).next={memoizedState:t,baseState:t,baseQueue:null,queue:{pending:null,lanes:0,dispatch:null,lastRenderedReducer:qa,lastRenderedState:t},next:null},e.memoizedState=n,null!==(e=e.alternate)&&(e.memoizedState=n),n}function Pi(e){Di(e,ji(e).next.queue,{},Tu())}function Ti(){return ko(Vd)}function Mi(){return Da().memoizedState}function Oi(){return Da().memoizedState}function Ri(e){for(var n=e.return;null!==n;){switch(n.tag){case 24:case 3:var t=Tu(),r=aa(n,e=oa(t),t);return null!==r&&(Ou(r,0,t),ia(r,n,t)),n={cache:To()},void(e.payload=n)}n=n.return}}function Ii(e,n,t){var r=Tu();t={lane:r,revertLane:0,action:t,hasEagerState:!1,eagerState:null,next:null},Ui(e)?$i(n,t):null!==(t=zr(e,n,t,r))&&(Ou(t,0,r),qi(t,n,r))}function Li(e,n,t){Di(e,n,t,Tu())}function Di(e,n,t,r){var o={lane:r,revertLane:0,action:t,hasEagerState:!1,eagerState:null,next:null};if(Ui(e))$i(n,o);else{var a=e.alternate;if(0===e.lanes&&(null===a||0===a.lanes)&&null!==(a=n.lastRenderedReducer))try{var i=n.lastRenderedState,l=a(i,t);if(o.hasEagerState=!0,o.eagerState=l,Xt(l,i))return Sr(e,n,o,0),null===tu&&Br(),!1}catch(e){}if(null!==(t=zr(e,n,o,r)))return Ou(t,0,r),qi(t,n,r),!0}return!1}function Fi(e,n,t,r){if(r={lane:2,revertLane:Sc(),action:r,hasEagerState:!1,eagerState:null,next:null},Ui(e)){if(n)throw Error(i(479))}else null!==(n=zr(e,t,r,2))&&Ou(n,0,2)}function Ui(e){var n=e.alternate;return e===va||null!==n&&n===va}function $i(e,n){Ca=Ea=!0;var t=e.pending;null===t?n.next=n:(n.next=t.next,t.next=n),e.pending=n}function qi(e,n,t){if(4194048&t){var r=n.lanes;t|=r&=e.pendingLanes,n.lanes=t,ke(e,t)}}var Hi={readContext:ko,use:Ua,useCallback:za,useContext:za,useEffect:za,useImperativeHandle:za,useLayoutEffect:za,useInsertionEffect:za,useMemo:za,useReducer:za,useRef:za,useState:za,useDebugValue:za,useDeferredValue:za,useTransition:za,useSyncExternalStore:za,useId:za,useHostTransitionStatus:za,useFormState:za,useActionState:za,useOptimistic:za,useMemoCache:za,useCacheRefresh:za},Wi={readContext:ko,use:Ua,useCallback:function(e,n){return La().memoizedState=[e,void 0===n?null:n],e},useContext:ko,useEffect:Ai,useImperativeHandle:function(e,n,t){t=null!=t?t.concat([e]):null,mi(4194308,4,xi.bind(null,n,e),t)},useLayoutEffect:function(e,n){return mi(4194308,4,e,n)},useInsertionEffect:function(e,n){mi(4,2,e,n)},useMemo:function(e,n){var t=La();n=void 0===n?null:n;var r=e();if(wa){de(!0);try{e()}finally{de(!1)}}return t.memoizedState=[r,n],r},useReducer:function(e,n,t){var r=La();if(void 0!==t){var o=t(n);if(wa){de(!0);try{t(n)}finally{de(!1)}}}else o=n;return r.memoizedState=r.baseState=o,e={pending:null,lanes:0,dispatch:null,lastRenderedReducer:e,lastRenderedState:o},r.queue=e,e=e.dispatch=Ii.bind(null,va,e),[r.memoizedState,e]},useRef:function(e){return e={current:e},La().memoizedState=e},useState:function(e){var n=(e=Ja(e)).queue,t=Li.bind(null,va,n);return n.dispatch=t,[e.memoizedState,t]},useDebugValue:Ci,useDeferredValue:function(e,n){return ki(La(),e,n)},useTransition:function(){var e=Ja(!1);return e=Si.bind(null,va,e.queue,!0,!1),La().memoizedState=e,[!1,e]},useSyncExternalStore:function(e,n,t){var r=va,o=La();if(oo){if(void 0===t)throw Error(i(407));t=t()}else{if(t=n(),null===tu)throw Error(i(349));124&ou||Xa(r,n,t)}o.memoizedState=t;var a={value:t,getSnapshot:n};return o.queue=a,Ai(Ga.bind(null,r,a,e),[e]),r.flags|=2048,hi(9,{destroy:void 0,resource:void 0},Qa.bind(null,r,a,t,n),null),t},useId:function(){var e=La(),n=tu.identifierPrefix;if(oo){var t=Kr;n="«"+n+"R"+(t=(Gr&~(1<<32-fe(Gr)-1)).toString(32)+t),0<(t=_a++)&&(n+="H"+t.toString(32)),n+="»"}else n="«"+n+"r"+(t=Sa++).toString(32)+"»";return e.memoizedState=n},useHostTransitionStatus:Ti,useFormState:si,useActionState:si,useOptimistic:function(e){var n=La();n.memoizedState=n.baseState=e;var t={pending:null,lanes:0,dispatch:null,lastRenderedReducer:null,lastRenderedState:null};return n.queue=t,n=Fi.bind(null,va,!0,t),t.dispatch=n,[e,n]},useMemoCache:$a,useCacheRefresh:function(){return La().memoizedState=Ri.bind(null,va)}},Yi={readContext:ko,use:Ua,useCallback:wi,useContext:ko,useEffect:yi,useImperativeHandle:Ei,useInsertionEffect:vi,useLayoutEffect:bi,useMemo:_i,useReducer:Ha,useRef:pi,useState:function(){return Ha(qa)},useDebugValue:Ci,useDeferredValue:function(e,n){return Bi(Da(),ba.memoizedState,e,n)},useTransition:function(){var e=Ha(qa)[0],n=Da().memoizedState;return["boolean"==typeof e?e:Fa(e),n]},useSyncExternalStore:Va,useId:Mi,useHostTransitionStatus:Ti,useFormState:ui,useActionState:ui,useOptimistic:function(e,n){return ei(Da(),0,e,n)},useMemoCache:$a,useCacheRefresh:Oi},Vi={readContext:ko,use:Ua,useCallback:wi,useContext:ko,useEffect:yi,useImperativeHandle:Ei,useInsertionEffect:vi,useLayoutEffect:bi,useMemo:_i,useReducer:Ya,useRef:pi,useState:function(){return Ya(qa)},useDebugValue:Ci,useDeferredValue:function(e,n){var t=Da();return null===ba?ki(t,e,n):Bi(t,ba.memoizedState,e,n)},useTransition:function(){var e=Ya(qa)[0],n=Da().memoizedState;return["boolean"==typeof e?e:Fa(e),n]},useSyncExternalStore:Va,useId:Mi,useHostTransitionStatus:Ti,useFormState:fi,useActionState:fi,useOptimistic:function(e,n){var t=Da();return null!==ba?ei(t,0,e,n):(t.baseState=e,[e,t.queue.dispatch])},useMemoCache:$a,useCacheRefresh:Oi},Xi=null,Qi=0;function Gi(e){var n=Qi;return Qi+=1,null===Xi&&(Xi=[]),Ko(Xi,e,n)}function Ki(e,n){n=n.props.ref,e.ref=void 0!==n?n:null}function Zi(e,n){if(n.$$typeof===f)throw Error(i(525));throw e=Object.prototype.toString.call(n),Error(i(31,"[object Object]"===e?"object with keys {"+Object.keys(n).join(", ")+"}":e))}function Ji(e){return(0,e._init)(e._payload)}function el(e){function n(n,t){if(e){var r=n.deletions;null===r?(n.deletions=[t],n.flags|=16):r.push(t)}}function t(t,r){if(!e)return null;for(;null!==r;)n(t,r),r=r.sibling;return null}function r(e){for(var n=new Map;null!==e;)null!==e.key?n.set(e.key,e):n.set(e.index,e),e=e.sibling;return n}function o(e,n){return(e=Ir(e,n)).index=0,e.sibling=null,e}function a(n,t,r){return n.index=r,e?null!==(r=n.alternate)?(r=r.index)<t?(n.flags|=67108866,t):r:(n.flags|=67108866,t):(n.flags|=1048576,t)}function l(n){return e&&null===n.alternate&&(n.flags|=67108866),n}function s(e,n,t,r){return null===n||6!==n.tag?((n=Ur(t,e.mode,r)).return=e,n):((n=o(n,t)).return=e,n)}function u(e,n,t,r){var a=t.type;return a===m?d(e,n,t.props.children,r,t.key):null!==n&&(n.elementType===a||"object"==typeof a&&null!==a&&a.$$typeof===_&&Ji(a)===n.type)?(Ki(n=o(n,t.props),t),n.return=e,n):(Ki(n=Dr(t.type,t.key,t.props,null,e.mode,r),t),n.return=e,n)}function c(e,n,t,r){return null===n||4!==n.tag||n.stateNode.containerInfo!==t.containerInfo||n.stateNode.implementation!==t.implementation?((n=$r(t,e.mode,r)).return=e,n):((n=o(n,t.children||[])).return=e,n)}function d(e,n,t,r,a){return null===n||7!==n.tag?((n=Fr(t,e.mode,r,a)).return=e,n):((n=o(n,t)).return=e,n)}function f(e,n,t){if("string"==typeof n&&""!==n||"number"==typeof n||"bigint"==typeof n)return(n=Ur(""+n,e.mode,t)).return=e,n;if("object"==typeof n&&null!==n){switch(n.$$typeof){case h:return Ki(t=Dr(n.type,n.key,n.props,null,e.mode,t),n),t.return=e,t;case p:return(n=$r(n,e.mode,t)).return=e,n;case _:return f(e,n=(0,n._init)(n._payload),t)}if(P(n)||z(n))return(n=Fr(n,e.mode,t,null)).return=e,n;if("function"==typeof n.then)return f(e,Gi(n),t);if(n.$$typeof===b)return f(e,Bo(e,n),t);Zi(e,n)}return null}function g(e,n,t,r){var o=null!==n?n.key:null;if("string"==typeof t&&""!==t||"number"==typeof t||"bigint"==typeof t)return null!==o?null:s(e,n,""+t,r);if("object"==typeof t&&null!==t){switch(t.$$typeof){case h:return t.key===o?u(e,n,t,r):null;case p:return t.key===o?c(e,n,t,r):null;case _:return g(e,n,t=(o=t._init)(t._payload),r)}if(P(t)||z(t))return null!==o?null:d(e,n,t,r,null);if("function"==typeof t.then)return g(e,n,Gi(t),r);if(t.$$typeof===b)return g(e,n,Bo(e,t),r);Zi(e,t)}return null}function A(e,n,t,r,o){if("string"==typeof r&&""!==r||"number"==typeof r||"bigint"==typeof r)return s(n,e=e.get(t)||null,""+r,o);if("object"==typeof r&&null!==r){switch(r.$$typeof){case h:return u(n,e=e.get(null===r.key?t:r.key)||null,r,o);case p:return c(n,e=e.get(null===r.key?t:r.key)||null,r,o);case _:return A(e,n,t,r=(0,r._init)(r._payload),o)}if(P(r)||z(r))return d(n,e=e.get(t)||null,r,o,null);if("function"==typeof r.then)return A(e,n,t,Gi(r),o);if(r.$$typeof===b)return A(e,n,t,Bo(n,r),o);Zi(n,r)}return null}function y(s,u,c,d){if("object"==typeof c&&null!==c&&c.type===m&&null===c.key&&(c=c.props.children),"object"==typeof c&&null!==c){switch(c.$$typeof){case h:e:{for(var v=c.key;null!==u;){if(u.key===v){if((v=c.type)===m){if(7===u.tag){t(s,u.sibling),(d=o(u,c.props.children)).return=s,s=d;break e}}else if(u.elementType===v||"object"==typeof v&&null!==v&&v.$$typeof===_&&Ji(v)===u.type){t(s,u.sibling),Ki(d=o(u,c.props),c),d.return=s,s=d;break e}t(s,u);break}n(s,u),u=u.sibling}c.type===m?((d=Fr(c.props.children,s.mode,d,c.key)).return=s,s=d):(Ki(d=Dr(c.type,c.key,c.props,null,s.mode,d),c),d.return=s,s=d)}return l(s);case p:e:{for(v=c.key;null!==u;){if(u.key===v){if(4===u.tag&&u.stateNode.containerInfo===c.containerInfo&&u.stateNode.implementation===c.implementation){t(s,u.sibling),(d=o(u,c.children||[])).return=s,s=d;break e}t(s,u);break}n(s,u),u=u.sibling}(d=$r(c,s.mode,d)).return=s,s=d}return l(s);case _:return y(s,u,c=(v=c._init)(c._payload),d)}if(P(c))return function(o,i,l,s){for(var u=null,c=null,d=i,h=i=0,p=null;null!==d&&h<l.length;h++){d.index>h?(p=d,d=null):p=d.sibling;var m=g(o,d,l[h],s);if(null===m){null===d&&(d=p);break}e&&d&&null===m.alternate&&n(o,d),i=a(m,i,h),null===c?u=m:c.sibling=m,c=m,d=p}if(h===l.length)return t(o,d),oo&&Zr(o,h),u;if(null===d){for(;h<l.length;h++)null!==(d=f(o,l[h],s))&&(i=a(d,i,h),null===c?u=d:c.sibling=d,c=d);return oo&&Zr(o,h),u}for(d=r(d);h<l.length;h++)null!==(p=A(d,o,h,l[h],s))&&(e&&null!==p.alternate&&d.delete(null===p.key?h:p.key),i=a(p,i,h),null===c?u=p:c.sibling=p,c=p);return e&&d.forEach(function(e){return n(o,e)}),oo&&Zr(o,h),u}(s,u,c,d);if(z(c)){if("function"!=typeof(v=z(c)))throw Error(i(150));return function(o,l,s,u){if(null==s)throw Error(i(151));for(var c=null,d=null,h=l,p=l=0,m=null,y=s.next();null!==h&&!y.done;p++,y=s.next()){h.index>p?(m=h,h=null):m=h.sibling;var v=g(o,h,y.value,u);if(null===v){null===h&&(h=m);break}e&&h&&null===v.alternate&&n(o,h),l=a(v,l,p),null===d?c=v:d.sibling=v,d=v,h=m}if(y.done)return t(o,h),oo&&Zr(o,p),c;if(null===h){for(;!y.done;p++,y=s.next())null!==(y=f(o,y.value,u))&&(l=a(y,l,p),null===d?c=y:d.sibling=y,d=y);return oo&&Zr(o,p),c}for(h=r(h);!y.done;p++,y=s.next())null!==(y=A(h,o,p,y.value,u))&&(e&&null!==y.alternate&&h.delete(null===y.key?p:y.key),l=a(y,l,p),null===d?c=y:d.sibling=y,d=y);return e&&h.forEach(function(e){return n(o,e)}),oo&&Zr(o,p),c}(s,u,c=v.call(c),d)}if("function"==typeof c.then)return y(s,u,Gi(c),d);if(c.$$typeof===b)return y(s,u,Bo(s,c),d);Zi(s,c)}return"string"==typeof c&&""!==c||"number"==typeof c||"bigint"==typeof c?(c=""+c,null!==u&&6===u.tag?(t(s,u.sibling),(d=o(u,c)).return=s,s=d):(t(s,u),(d=Ur(c,s.mode,d)).return=s,s=d),l(s)):t(s,u)}return function(e,n,t,r){try{Qi=0;var o=y(e,n,t,r);return Xi=null,o}catch(n){if(n===Wo||n===Vo)throw n;var a=Or(29,n,null,e.mode);return a.lanes=r,a.return=e,a}}}var nl=el(!0),tl=el(!1),rl=L(null),ol=null;function al(e){var n=e.alternate;F(ul,1&ul.current),F(rl,e),null===ol&&(null===n||null!==ha.current||null!==n.memoizedState)&&(ol=e)}function il(e){if(22===e.tag){if(F(ul,ul.current),F(rl,e),null===ol){var n=e.alternate;null!==n&&null!==n.memoizedState&&(ol=e)}}else ll()}function ll(){F(ul,ul.current),F(rl,rl.current)}function sl(e){D(rl),ol===e&&(ol=null),D(ul)}var ul=L(0);function cl(e){for(var n=e;null!==n;){if(13===n.tag){var t=n.memoizedState;if(null!==t&&(null===(t=t.dehydrated)||"$?"===t.data||md(t)))return n}else if(19===n.tag&&void 0!==n.memoizedProps.revealOrder){if(128&n.flags)return n}else if(null!==n.child){n.child.return=n,n=n.child;continue}if(n===e)break;for(;null===n.sibling;){if(null===n.return||n.return===e)return null;n=n.return}n.sibling.return=n.return,n=n.sibling}return null}function dl(e,n,t,r){t=null==(t=t(r,n=e.memoizedState))?n:d({},n,t),e.memoizedState=t,0===e.lanes&&(e.updateQueue.baseState=t)}var fl={enqueueSetState:function(e,n,t){e=e._reactInternals;var r=Tu(),o=oa(r);o.payload=n,null!=t&&(o.callback=t),null!==(n=aa(e,o,r))&&(Ou(n,0,r),ia(n,e,r))},enqueueReplaceState:function(e,n,t){e=e._reactInternals;var r=Tu(),o=oa(r);o.tag=1,o.payload=n,null!=t&&(o.callback=t),null!==(n=aa(e,o,r))&&(Ou(n,0,r),ia(n,e,r))},enqueueForceUpdate:function(e,n){e=e._reactInternals;var t=Tu(),r=oa(t);r.tag=2,null!=n&&(r.callback=n),null!==(n=aa(e,r,t))&&(Ou(n,0,t),ia(n,e,t))}};function hl(e,n,t,r,o,a,i){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(r,a,i):!(n.prototype&&n.prototype.isPureReactComponent&&Qt(t,r)&&Qt(o,a))}function pl(e,n,t,r){e=n.state,"function"==typeof n.componentWillReceiveProps&&n.componentWillReceiveProps(t,r),"function"==typeof n.UNSAFE_componentWillReceiveProps&&n.UNSAFE_componentWillReceiveProps(t,r),n.state!==e&&fl.enqueueReplaceState(n,n.state,null)}function ml(e,n){var t=n;if("ref"in n)for(var r in t={},n)"ref"!==r&&(t[r]=n[r]);if(e=e.defaultProps)for(var o in t===n&&(t=d({},t)),e)void 0===t[o]&&(t[o]=e[o]);return t}var gl="function"==typeof reportError?reportError:function(e){if("object"==typeof window&&"function"==typeof window.ErrorEvent){var n=new window.ErrorEvent("error",{bubbles:!0,cancelable:!0,message:"object"==typeof e&&null!==e&&"string"==typeof e.message?String(e.message):String(e),error:e});if(!window.dispatchEvent(n))return}else if("object"==typeof process&&"function"==typeof process.emit)return void process.emit("uncaughtException",e);console.error(e)};function Al(e){gl(e)}function yl(e){console.error(e)}function vl(e){gl(e)}function bl(e,n){try{(0,e.onUncaughtError)(n.value,{componentStack:n.stack})}catch(e){setTimeout(function(){throw e})}}function xl(e,n,t){try{(0,e.onCaughtError)(t.value,{componentStack:t.stack,errorBoundary:1===n.tag?n.stateNode:null})}catch(e){setTimeout(function(){throw e})}}function El(e,n,t){return(t=oa(t)).tag=3,t.payload={element:null},t.callback=function(){bl(e,n)},t}function Cl(e){return(e=oa(e)).tag=3,e}function wl(e,n,t,r){var o=t.type.getDerivedStateFromError;if("function"==typeof o){var a=r.value;e.payload=function(){return o(a)},e.callback=function(){xl(n,t,r)}}var i=t.stateNode;null!==i&&"function"==typeof i.componentDidCatch&&(e.callback=function(){xl(n,t,r),"function"!=typeof o&&(null===Cu?Cu=new Set([this]):Cu.add(this));var e=r.stack;this.componentDidCatch(r.value,{componentStack:null!==e?e:""})})}var _l=Error(i(461)),kl=!1;function Bl(e,n,t,r){n.child=null===e?tl(n,null,t,r):nl(n,e.child,t,r)}function Sl(e,n,t,r,o){t=t.render;var a=n.ref;if("ref"in r){var i={};for(var l in r)"ref"!==l&&(i[l]=r[l])}else i=r;return _o(n),r=ja(e,n,t,i,a,o),l=Oa(),null===e||kl?(oo&&l&&eo(n),n.flags|=1,Bl(e,n,r,o),n.child):(Ra(e,n,o),Xl(e,n,o))}function zl(e,n,t,r,o){if(null===e){var a=t.type;return"function"!=typeof a||Rr(a)||void 0!==a.defaultProps||null!==t.compare?((e=Dr(t.type,null,r,n,n.mode,o)).ref=n.ref,e.return=n,n.child=e):(n.tag=15,n.type=a,Nl(e,n,a,r,o))}if(a=e.child,!Ql(e,o)){var i=a.memoizedProps;if((t=null!==(t=t.compare)?t:Qt)(i,r)&&e.ref===n.ref)return Xl(e,n,o)}return n.flags|=1,(e=Ir(a,r)).ref=n.ref,e.return=n,n.child=e}function Nl(e,n,t,r,o){if(null!==e){var a=e.memoizedProps;if(Qt(a,r)&&e.ref===n.ref){if(kl=!1,n.pendingProps=r=a,!Ql(e,o))return n.lanes=e.lanes,Xl(e,n,o);131072&e.flags&&(kl=!0)}}return Ml(e,n,t,r,o)}function jl(e,n,t){var r=n.pendingProps,o=r.children,a=null!==e?e.memoizedState:null;if("hidden"===r.mode){if(128&n.flags){if(r=null!==a?a.baseLanes|t:t,null!==e){for(o=n.child=e.child,a=0;null!==o;)a=a|o.lanes|o.childLanes,o=o.sibling;n.childLanes=a&~r}else n.childLanes=0,n.child=null;return Pl(e,n,r,t)}if(!(536870912&t))return n.lanes=n.childLanes=536870912,Pl(e,n,null!==a?a.baseLanes|t:t,t);n.memoizedState={baseLanes:0,cachePool:null},null!==e&&qo(0,null!==a?a.cachePool:null),null!==a?ma(n,a):ga(),il(n)}else null!==a?(qo(0,a.cachePool),ma(n,a),ll(),n.memoizedState=null):(null!==e&&qo(0,null),ga(),ll());return Bl(e,n,o,t),n.child}function Pl(e,n,t,r){var o=$o();return o=null===o?null:{parent:Po._currentValue,pool:o},n.memoizedState={baseLanes:t,cachePool:o},null!==e&&qo(0,null),ga(),il(n),null!==e&&Co(e,n,r,!0),null}function Tl(e,n){var t=n.ref;if(null===t)null!==e&&null!==e.ref&&(n.flags|=4194816);else{if("function"!=typeof t&&"object"!=typeof t)throw Error(i(284));null!==e&&e.ref===t||(n.flags|=4194816)}}function Ml(e,n,t,r,o){return _o(n),t=ja(e,n,t,r,void 0,o),r=Oa(),null===e||kl?(oo&&r&&eo(n),n.flags|=1,Bl(e,n,t,o),n.child):(Ra(e,n,o),Xl(e,n,o))}function Ol(e,n,t,r,o,a){return _o(n),n.updateQueue=null,t=Ta(n,r,t,o),Pa(e),r=Oa(),null===e||kl?(oo&&r&&eo(n),n.flags|=1,Bl(e,n,t,a),n.child):(Ra(e,n,a),Xl(e,n,a))}function Rl(e,n,t,r,o){if(_o(n),null===n.stateNode){var a=Tr,i=t.contextType;"object"==typeof i&&null!==i&&(a=ko(i)),a=new t(r,a),n.memoizedState=null!==a.state&&void 0!==a.state?a.state:null,a.updater=fl,n.stateNode=a,a._reactInternals=n,(a=n.stateNode).props=r,a.state=n.memoizedState,a.refs={},ta(n),i=t.contextType,a.context="object"==typeof i&&null!==i?ko(i):Tr,a.state=n.memoizedState,"function"==typeof(i=t.getDerivedStateFromProps)&&(dl(n,t,i,r),a.state=n.memoizedState),"function"==typeof t.getDerivedStateFromProps||"function"==typeof a.getSnapshotBeforeUpdate||"function"!=typeof a.UNSAFE_componentWillMount&&"function"!=typeof a.componentWillMount||(i=a.state,"function"==typeof a.componentWillMount&&a.componentWillMount(),"function"==typeof a.UNSAFE_componentWillMount&&a.UNSAFE_componentWillMount(),i!==a.state&&fl.enqueueReplaceState(a,a.state,null),ca(n,r,a,o),ua(),a.state=n.memoizedState),"function"==typeof a.componentDidMount&&(n.flags|=4194308),r=!0}else if(null===e){a=n.stateNode;var l=n.memoizedProps,s=ml(t,l);a.props=s;var u=a.context,c=t.contextType;i=Tr,"object"==typeof c&&null!==c&&(i=ko(c));var d=t.getDerivedStateFromProps;c="function"==typeof d||"function"==typeof a.getSnapshotBeforeUpdate,l=n.pendingProps!==l,c||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||(l||u!==i)&&pl(n,a,r,i),na=!1;var f=n.memoizedState;a.state=f,ca(n,r,a,o),ua(),u=n.memoizedState,l||f!==u||na?("function"==typeof d&&(dl(n,t,d,r),u=n.memoizedState),(s=na||hl(n,t,s,r,f,u,i))?(c||"function"!=typeof a.UNSAFE_componentWillMount&&"function"!=typeof a.componentWillMount||("function"==typeof a.componentWillMount&&a.componentWillMount(),"function"==typeof a.UNSAFE_componentWillMount&&a.UNSAFE_componentWillMount()),"function"==typeof a.componentDidMount&&(n.flags|=4194308)):("function"==typeof a.componentDidMount&&(n.flags|=4194308),n.memoizedProps=r,n.memoizedState=u),a.props=r,a.state=u,a.context=i,r=s):("function"==typeof a.componentDidMount&&(n.flags|=4194308),r=!1)}else{a=n.stateNode,ra(e,n),c=ml(t,i=n.memoizedProps),a.props=c,d=n.pendingProps,f=a.context,u=t.contextType,s=Tr,"object"==typeof u&&null!==u&&(s=ko(u)),(u="function"==typeof(l=t.getDerivedStateFromProps)||"function"==typeof a.getSnapshotBeforeUpdate)||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||(i!==d||f!==s)&&pl(n,a,r,s),na=!1,f=n.memoizedState,a.state=f,ca(n,r,a,o),ua();var h=n.memoizedState;i!==d||f!==h||na||null!==e&&null!==e.dependencies&&wo(e.dependencies)?("function"==typeof l&&(dl(n,t,l,r),h=n.memoizedState),(c=na||hl(n,t,c,r,f,h,s)||null!==e&&null!==e.dependencies&&wo(e.dependencies))?(u||"function"!=typeof a.UNSAFE_componentWillUpdate&&"function"!=typeof a.componentWillUpdate||("function"==typeof a.componentWillUpdate&&a.componentWillUpdate(r,h,s),"function"==typeof a.UNSAFE_componentWillUpdate&&a.UNSAFE_componentWillUpdate(r,h,s)),"function"==typeof a.componentDidUpdate&&(n.flags|=4),"function"==typeof a.getSnapshotBeforeUpdate&&(n.flags|=1024)):("function"!=typeof a.componentDidUpdate||i===e.memoizedProps&&f===e.memoizedState||(n.flags|=4),"function"!=typeof a.getSnapshotBeforeUpdate||i===e.memoizedProps&&f===e.memoizedState||(n.flags|=1024),n.memoizedProps=r,n.memoizedState=h),a.props=r,a.state=h,a.context=s,r=c):("function"!=typeof a.componentDidUpdate||i===e.memoizedProps&&f===e.memoizedState||(n.flags|=4),"function"!=typeof a.getSnapshotBeforeUpdate||i===e.memoizedProps&&f===e.memoizedState||(n.flags|=1024),r=!1)}return a=r,Tl(e,n),r=!!(128&n.flags),a||r?(a=n.stateNode,t=r&&"function"!=typeof t.getDerivedStateFromError?null:a.render(),n.flags|=1,null!==e&&r?(n.child=nl(n,e.child,null,o),n.child=nl(n,null,t,o)):Bl(e,n,t,o),n.memoizedState=a.state,e=n.child):e=Xl(e,n,o),e}function Il(e,n,t,r){return ho(),n.flags|=256,Bl(e,n,t,r),n.child}var Ll={dehydrated:null,treeContext:null,retryLane:0,hydrationErrors:null};function Dl(e){return{baseLanes:e,cachePool:Ho()}}function Fl(e,n,t){return e=null!==e?e.childLanes&~t:0,n&&(e|=mu),e}function Ul(e,n,t){var r,o=n.pendingProps,a=!1,l=!!(128&n.flags);if((r=l)||(r=(null===e||null!==e.memoizedState)&&!!(2&ul.current)),r&&(a=!0,n.flags&=-129),r=!!(32&n.flags),n.flags&=-33,null===e){if(oo){if(a?al(n):ll(),oo){var s,u=ro;if(s=u){e:{for(s=u,u=io;8!==s.nodeType;){if(!u){u=null;break e}if(null===(s=gd(s.nextSibling))){u=null;break e}}u=s}null!==u?(n.memoizedState={dehydrated:u,treeContext:null!==Qr?{id:Gr,overflow:Kr}:null,retryLane:536870912,hydrationErrors:null},(s=Or(18,null,null,0)).stateNode=u,s.return=n,n.child=s,to=n,ro=null,s=!0):s=!1}s||so(n)}if(null!==(u=n.memoizedState)&&null!==(u=u.dehydrated))return md(u)?n.lanes=32:n.lanes=536870912,null;sl(n)}return u=o.children,o=o.fallback,a?(ll(),u=ql({mode:"hidden",children:u},a=n.mode),o=Fr(o,a,t,null),u.return=n,o.return=n,u.sibling=o,n.child=u,(a=n.child).memoizedState=Dl(t),a.childLanes=Fl(e,r,t),n.memoizedState=Ll,o):(al(n),$l(n,u))}if(null!==(s=e.memoizedState)&&null!==(u=s.dehydrated)){if(l)256&n.flags?(al(n),n.flags&=-257,n=Hl(e,n,t)):null!==n.memoizedState?(ll(),n.child=e.child,n.flags|=128,n=null):(ll(),a=o.fallback,u=n.mode,o=ql({mode:"visible",children:o.children},u),(a=Fr(a,u,t,null)).flags|=2,o.return=n,a.return=n,o.sibling=a,n.child=o,nl(n,e.child,null,t),(o=n.child).memoizedState=Dl(t),o.childLanes=Fl(e,r,t),n.memoizedState=Ll,n=a);else if(al(n),md(u)){if(r=u.nextSibling&&u.nextSibling.dataset)var c=r.dgst;r=c,(o=Error(i(419))).stack="",o.digest=r,mo({value:o,source:null,stack:null}),n=Hl(e,n,t)}else if(kl||Co(e,n,t,!1),r=0!==(t&e.childLanes),kl||r){if(null!==(r=tu)&&0!==(o=0!==((o=42&(o=t&-t)?1:Be(o))&(r.suspendedLanes|t))?0:o)&&o!==s.retryLane)throw s.retryLane=o,Nr(e,o),Ou(r,0,o),_l;"$?"===u.data||Yu(),n=Hl(e,n,t)}else"$?"===u.data?(n.flags|=192,n.child=e.child,n=null):(e=s.treeContext,ro=gd(u.nextSibling),to=n,oo=!0,ao=null,io=!1,null!==e&&(Vr[Xr++]=Gr,Vr[Xr++]=Kr,Vr[Xr++]=Qr,Gr=e.id,Kr=e.overflow,Qr=n),(n=$l(n,o.children)).flags|=4096);return n}return a?(ll(),a=o.fallback,u=n.mode,c=(s=e.child).sibling,(o=Ir(s,{mode:"hidden",children:o.children})).subtreeFlags=65011712&s.subtreeFlags,null!==c?a=Ir(c,a):(a=Fr(a,u,t,null)).flags|=2,a.return=n,o.return=n,o.sibling=a,n.child=o,o=a,a=n.child,null===(u=e.child.memoizedState)?u=Dl(t):(null!==(s=u.cachePool)?(c=Po._currentValue,s=s.parent!==c?{parent:c,pool:c}:s):s=Ho(),u={baseLanes:u.baseLanes|t,cachePool:s}),a.memoizedState=u,a.childLanes=Fl(e,r,t),n.memoizedState=Ll,o):(al(n),e=(t=e.child).sibling,(t=Ir(t,{mode:"visible",children:o.children})).return=n,t.sibling=null,null!==e&&(null===(r=n.deletions)?(n.deletions=[e],n.flags|=16):r.push(e)),n.child=t,n.memoizedState=null,t)}function $l(e,n){return(n=ql({mode:"visible",children:n},e.mode)).return=e,e.child=n}function ql(e,n){return(e=Or(22,e,null,n)).lanes=0,e.stateNode={_visibility:1,_pendingMarkers:null,_retryCache:null,_transitions:null},e}function Hl(e,n,t){return nl(n,e.child,null,t),(e=$l(n,n.pendingProps.children)).flags|=2,n.memoizedState=null,e}function Wl(e,n,t){e.lanes|=n;var r=e.alternate;null!==r&&(r.lanes|=n),xo(e.return,n,t)}function Yl(e,n,t,r,o){var a=e.memoizedState;null===a?e.memoizedState={isBackwards:n,rendering:null,renderingStartTime:0,last:r,tail:t,tailMode:o}:(a.isBackwards=n,a.rendering=null,a.renderingStartTime=0,a.last=r,a.tail=t,a.tailMode=o)}function Vl(e,n,t){var r=n.pendingProps,o=r.revealOrder,a=r.tail;if(Bl(e,n,r.children,t),2&(r=ul.current))r=1&r|2,n.flags|=128;else{if(null!==e&&128&e.flags)e:for(e=n.child;null!==e;){if(13===e.tag)null!==e.memoizedState&&Wl(e,t,n);else if(19===e.tag)Wl(e,t,n);else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===n)break e;for(;null===e.sibling;){if(null===e.return||e.return===n)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}r&=1}switch(F(ul,r),o){case"forwards":for(t=n.child,o=null;null!==t;)null!==(e=t.alternate)&&null===cl(e)&&(o=t),t=t.sibling;null===(t=o)?(o=n.child,n.child=null):(o=t.sibling,t.sibling=null),Yl(n,!1,o,t,a);break;case"backwards":for(t=null,o=n.child,n.child=null;null!==o;){if(null!==(e=o.alternate)&&null===cl(e)){n.child=o;break}e=o.sibling,o.sibling=t,t=o,o=e}Yl(n,!0,t,null,a);break;case"together":Yl(n,!1,null,null,void 0);break;default:n.memoizedState=null}return n.child}function Xl(e,n,t){if(null!==e&&(n.dependencies=e.dependencies),fu|=n.lanes,0===(t&n.childLanes)){if(null===e)return null;if(Co(e,n,t,!1),0===(t&n.childLanes))return null}if(null!==e&&n.child!==e.child)throw Error(i(153));if(null!==n.child){for(t=Ir(e=n.child,e.pendingProps),n.child=t,t.return=n;null!==e.sibling;)e=e.sibling,(t=t.sibling=Ir(e,e.pendingProps)).return=n;t.sibling=null}return n.child}function Ql(e,n){return 0!==(e.lanes&n)||!(null===(e=e.dependencies)||!wo(e))}function Gl(e,n,t){if(null!==e)if(e.memoizedProps!==n.pendingProps)kl=!0;else{if(!(Ql(e,t)||128&n.flags))return kl=!1,function(e,n,t){switch(n.tag){case 3:W(n,n.stateNode.containerInfo),vo(0,Po,e.memoizedState.cache),ho();break;case 27:case 5:V(n);break;case 4:W(n,n.stateNode.containerInfo);break;case 10:vo(0,n.type,n.memoizedProps.value);break;case 13:var r=n.memoizedState;if(null!==r)return null!==r.dehydrated?(al(n),n.flags|=128,null):0!==(t&n.child.childLanes)?Ul(e,n,t):(al(n),null!==(e=Xl(e,n,t))?e.sibling:null);al(n);break;case 19:var o=!!(128&e.flags);if((r=0!==(t&n.childLanes))||(Co(e,n,t,!1),r=0!==(t&n.childLanes)),o){if(r)return Vl(e,n,t);n.flags|=128}if(null!==(o=n.memoizedState)&&(o.rendering=null,o.tail=null,o.lastEffect=null),F(ul,ul.current),r)break;return null;case 22:case 23:return n.lanes=0,jl(e,n,t);case 24:vo(0,Po,e.memoizedState.cache)}return Xl(e,n,t)}(e,n,t);kl=!!(131072&e.flags)}else kl=!1,oo&&1048576&n.flags&&Jr(n,Yr,n.index);switch(n.lanes=0,n.tag){case 16:e:{e=n.pendingProps;var r=n.elementType,o=r._init;if(r=o(r._payload),n.type=r,"function"!=typeof r){if(null!=r){if((o=r.$$typeof)===x){n.tag=11,n=Sl(null,n,r,e,t);break e}if(o===w){n.tag=14,n=zl(null,n,r,e,t);break e}}throw n=j(r)||r,Error(i(306,n,""))}Rr(r)?(e=ml(r,e),n.tag=1,n=Rl(null,n,r,e,t)):(n.tag=0,n=Ml(null,n,r,e,t))}return n;case 0:return Ml(e,n,n.type,n.pendingProps,t);case 1:return Rl(e,n,r=n.type,o=ml(r,n.pendingProps),t);case 3:e:{if(W(n,n.stateNode.containerInfo),null===e)throw Error(i(387));r=n.pendingProps;var a=n.memoizedState;o=a.element,ra(e,n),ca(n,r,null,t);var l=n.memoizedState;if(r=l.cache,vo(0,Po,r),r!==a.cache&&Eo(n,[Po],t,!0),ua(),r=l.element,a.isDehydrated){if(a={element:r,isDehydrated:!1,cache:l.cache},n.updateQueue.baseState=a,n.memoizedState=a,256&n.flags){n=Il(e,n,r,t);break e}if(r!==o){mo(o=Cr(Error(i(424)),n)),n=Il(e,n,r,t);break e}for(e=9===(e=n.stateNode.containerInfo).nodeType?e.body:"HTML"===e.nodeName?e.ownerDocument.body:e,ro=gd(e.firstChild),to=n,oo=!0,ao=null,io=!0,t=tl(n,null,r,t),n.child=t;t;)t.flags=-3&t.flags|4096,t=t.sibling}else{if(ho(),r===o){n=Xl(e,n,t);break e}Bl(e,n,r,t)}n=n.child}return n;case 26:return Tl(e,n),null===e?(t=Bd(n.type,null,n.pendingProps,null))?n.memoizedState=t:oo||(t=n.type,e=n.pendingProps,(r=td(q.current).createElement(t))[je]=n,r[Pe]=e,Jc(r,t,e),He(r),n.stateNode=r):n.memoizedState=Bd(n.type,e.memoizedProps,n.pendingProps,e.memoizedState),null;case 27:return V(n),null===e&&oo&&(r=n.stateNode=vd(n.type,n.pendingProps,q.current),to=n,io=!0,o=ro,fd(n.type)?(Ad=o,ro=gd(r.firstChild)):ro=o),Bl(e,n,n.pendingProps.children,t),Tl(e,n),null===e&&(n.flags|=4194304),n.child;case 5:return null===e&&oo&&((o=r=ro)&&(null!==(r=function(e,n,t,r){for(;1===e.nodeType;){var o=t;if(e.nodeName.toLowerCase()!==n.toLowerCase()){if(!r&&("INPUT"!==e.nodeName||"hidden"!==e.type))break}else if(r){if(!e[Le])switch(n){case"meta":if(!e.hasAttribute("itemprop"))break;return e;case"link":if("stylesheet"===(a=e.getAttribute("rel"))&&e.hasAttribute("data-precedence"))break;if(a!==o.rel||e.getAttribute("href")!==(null==o.href||""===o.href?null:o.href)||e.getAttribute("crossorigin")!==(null==o.crossOrigin?null:o.crossOrigin)||e.getAttribute("title")!==(null==o.title?null:o.title))break;return e;case"style":if(e.hasAttribute("data-precedence"))break;return e;case"script":if(((a=e.getAttribute("src"))!==(null==o.src?null:o.src)||e.getAttribute("type")!==(null==o.type?null:o.type)||e.getAttribute("crossorigin")!==(null==o.crossOrigin?null:o.crossOrigin))&&a&&e.hasAttribute("async")&&!e.hasAttribute("itemprop"))break;return e;default:return e}}else{if("input"!==n||"hidden"!==e.type)return e;var a=null==o.name?null:""+o.name;if("hidden"===o.type&&e.getAttribute("name")===a)return e}if(null===(e=gd(e.nextSibling)))break}return null}(r,n.type,n.pendingProps,io))?(n.stateNode=r,to=n,ro=gd(r.firstChild),io=!1,o=!0):o=!1),o||so(n)),V(n),o=n.type,a=n.pendingProps,l=null!==e?e.memoizedProps:null,r=a.children,ad(o,a)?r=null:null!==l&&ad(o,l)&&(n.flags|=32),null!==n.memoizedState&&(o=ja(e,n,Ma,null,null,t),Vd._currentValue=o),Tl(e,n),Bl(e,n,r,t),n.child;case 6:return null===e&&oo&&((e=t=ro)&&(null!==(t=function(e,n,t){if(""===n)return null;for(;3!==e.nodeType;){if((1!==e.nodeType||"INPUT"!==e.nodeName||"hidden"!==e.type)&&!t)return null;if(null===(e=gd(e.nextSibling)))return null}return e}(t,n.pendingProps,io))?(n.stateNode=t,to=n,ro=null,e=!0):e=!1),e||so(n)),null;case 13:return Ul(e,n,t);case 4:return W(n,n.stateNode.containerInfo),r=n.pendingProps,null===e?n.child=nl(n,null,r,t):Bl(e,n,r,t),n.child;case 11:return Sl(e,n,n.type,n.pendingProps,t);case 7:return Bl(e,n,n.pendingProps,t),n.child;case 8:case 12:return Bl(e,n,n.pendingProps.children,t),n.child;case 10:return r=n.pendingProps,vo(0,n.type,r.value),Bl(e,n,r.children,t),n.child;case 9:return o=n.type._context,r=n.pendingProps.children,_o(n),r=r(o=ko(o)),n.flags|=1,Bl(e,n,r,t),n.child;case 14:return zl(e,n,n.type,n.pendingProps,t);case 15:return Nl(e,n,n.type,n.pendingProps,t);case 19:return Vl(e,n,t);case 31:return r=n.pendingProps,t=n.mode,r={mode:r.mode,children:r.children},null===e?((t=ql(r,t)).ref=n.ref,n.child=t,t.return=n,n=t):((t=Ir(e.child,r)).ref=n.ref,n.child=t,t.return=n,n=t),n;case 22:return jl(e,n,t);case 24:return _o(n),r=ko(Po),null===e?(null===(o=$o())&&(o=tu,a=To(),o.pooledCache=a,a.refCount++,null!==a&&(o.pooledCacheLanes|=t),o=a),n.memoizedState={parent:r,cache:o},ta(n),vo(0,Po,o)):(0!==(e.lanes&t)&&(ra(e,n),ca(n,null,null,t),ua()),o=e.memoizedState,a=n.memoizedState,o.parent!==r?(o={parent:r,cache:r},n.memoizedState=o,0===n.lanes&&(n.memoizedState=n.updateQueue.baseState=o),vo(0,Po,r)):(r=a.cache,vo(0,Po,r),r!==o.cache&&Eo(n,[Po],t,!0))),Bl(e,n,n.pendingProps.children,t),n.child;case 29:throw n.pendingProps}throw Error(i(156,n.tag))}function Kl(e){e.flags|=4}function Zl(e,n){if("stylesheet"!==n.type||4&n.state.loading)e.flags&=-16777217;else if(e.flags|=16777216,!Fd(n)){if(null!==(n=rl.current)&&((4194048&ou)===ou?null!==ol:(62914560&ou)!==ou&&!(536870912&ou)||n!==ol))throw Zo=Xo,Yo;e.flags|=8192}}function Jl(e,n){null!==n&&(e.flags|=4),16384&e.flags&&(n=22!==e.tag?Ee():536870912,e.lanes|=n,gu|=n)}function es(e,n){if(!oo)switch(e.tailMode){case"hidden":n=e.tail;for(var t=null;null!==n;)null!==n.alternate&&(t=n),n=n.sibling;null===t?e.tail=null:t.sibling=null;break;case"collapsed":t=e.tail;for(var r=null;null!==t;)null!==t.alternate&&(r=t),t=t.sibling;null===r?n||null===e.tail?e.tail=null:e.tail.sibling=null:r.sibling=null}}function ns(e){var n=null!==e.alternate&&e.alternate.child===e.child,t=0,r=0;if(n)for(var o=e.child;null!==o;)t|=o.lanes|o.childLanes,r|=65011712&o.subtreeFlags,r|=65011712&o.flags,o.return=e,o=o.sibling;else for(o=e.child;null!==o;)t|=o.lanes|o.childLanes,r|=o.subtreeFlags,r|=o.flags,o.return=e,o=o.sibling;return e.subtreeFlags|=r,e.childLanes=t,n}function ts(e,n,t){var r=n.pendingProps;switch(no(n),n.tag){case 31:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:case 1:return ns(n),null;case 3:return t=n.stateNode,r=null,null!==e&&(r=e.memoizedState.cache),n.memoizedState.cache!==r&&(n.flags|=2048),bo(Po),Y(),t.pendingContext&&(t.context=t.pendingContext,t.pendingContext=null),null!==e&&null!==e.child||(fo(n)?Kl(n):null===e||e.memoizedState.isDehydrated&&!(256&n.flags)||(n.flags|=1024,po())),ns(n),null;case 26:return t=n.memoizedState,null===e?(Kl(n),null!==t?(ns(n),Zl(n,t)):(ns(n),n.flags&=-16777217)):t?t!==e.memoizedState?(Kl(n),ns(n),Zl(n,t)):(ns(n),n.flags&=-16777217):(e.memoizedProps!==r&&Kl(n),ns(n),n.flags&=-16777217),null;case 27:X(n),t=q.current;var o=n.type;if(null!==e&&null!=n.stateNode)e.memoizedProps!==r&&Kl(n);else{if(!r){if(null===n.stateNode)throw Error(i(166));return ns(n),null}e=U.current,fo(n)?uo(n):(e=vd(o,r,t),n.stateNode=e,Kl(n))}return ns(n),null;case 5:if(X(n),t=n.type,null!==e&&null!=n.stateNode)e.memoizedProps!==r&&Kl(n);else{if(!r){if(null===n.stateNode)throw Error(i(166));return ns(n),null}if(e=U.current,fo(n))uo(n);else{switch(o=td(q.current),e){case 1:e=o.createElementNS("http://www.w3.org/2000/svg",t);break;case 2:e=o.createElementNS("http://www.w3.org/1998/Math/MathML",t);break;default:switch(t){case"svg":e=o.createElementNS("http://www.w3.org/2000/svg",t);break;case"math":e=o.createElementNS("http://www.w3.org/1998/Math/MathML",t);break;case"script":(e=o.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild);break;case"select":e="string"==typeof r.is?o.createElement("select",{is:r.is}):o.createElement("select"),r.multiple?e.multiple=!0:r.size&&(e.size=r.size);break;default:e="string"==typeof r.is?o.createElement(t,{is:r.is}):o.createElement(t)}}e[je]=n,e[Pe]=r;e:for(o=n.child;null!==o;){if(5===o.tag||6===o.tag)e.appendChild(o.stateNode);else if(4!==o.tag&&27!==o.tag&&null!==o.child){o.child.return=o,o=o.child;continue}if(o===n)break e;for(;null===o.sibling;){if(null===o.return||o.return===n)break e;o=o.return}o.sibling.return=o.return,o=o.sibling}n.stateNode=e;e:switch(Jc(e,t,r),t){case"button":case"input":case"select":case"textarea":e=!!r.autoFocus;break e;case"img":e=!0;break e;default:e=!1}e&&Kl(n)}}return ns(n),n.flags&=-16777217,null;case 6:if(e&&null!=n.stateNode)e.memoizedProps!==r&&Kl(n);else{if("string"!=typeof r&&null===n.stateNode)throw Error(i(166));if(e=q.current,fo(n)){if(e=n.stateNode,t=n.memoizedProps,r=null,null!==(o=to))switch(o.tag){case 27:case 5:r=o.memoizedProps}e[je]=n,(e=!!(e.nodeValue===t||null!==r&&!0===r.suppressHydrationWarning||Qc(e.nodeValue,t)))||so(n)}else(e=td(e).createTextNode(r))[je]=n,n.stateNode=e}return ns(n),null;case 13:if(r=n.memoizedState,null===e||null!==e.memoizedState&&null!==e.memoizedState.dehydrated){if(o=fo(n),null!==r&&null!==r.dehydrated){if(null===e){if(!o)throw Error(i(318));if(!(o=null!==(o=n.memoizedState)?o.dehydrated:null))throw Error(i(317));o[je]=n}else ho(),!(128&n.flags)&&(n.memoizedState=null),n.flags|=4;ns(n),o=!1}else o=po(),null!==e&&null!==e.memoizedState&&(e.memoizedState.hydrationErrors=o),o=!0;if(!o)return 256&n.flags?(sl(n),n):(sl(n),null)}if(sl(n),128&n.flags)return n.lanes=t,n;if(t=null!==r,e=null!==e&&null!==e.memoizedState,t){o=null,null!==(r=n.child).alternate&&null!==r.alternate.memoizedState&&null!==r.alternate.memoizedState.cachePool&&(o=r.alternate.memoizedState.cachePool.pool);var a=null;null!==r.memoizedState&&null!==r.memoizedState.cachePool&&(a=r.memoizedState.cachePool.pool),a!==o&&(r.flags|=2048)}return t!==e&&t&&(n.child.flags|=8192),Jl(n,n.updateQueue),ns(n),null;case 4:return Y(),null===e&&Dc(n.stateNode.containerInfo),ns(n),null;case 10:return bo(n.type),ns(n),null;case 19:if(D(ul),null===(o=n.memoizedState))return ns(n),null;if(r=!!(128&n.flags),null===(a=o.rendering))if(r)es(o,!1);else{if(0!==du||null!==e&&128&e.flags)for(e=n.child;null!==e;){if(null!==(a=cl(e))){for(n.flags|=128,es(o,!1),e=a.updateQueue,n.updateQueue=e,Jl(n,e),n.subtreeFlags=0,e=t,t=n.child;null!==t;)Lr(t,e),t=t.sibling;return F(ul,1&ul.current|2),n.child}e=e.sibling}null!==o.tail&&ee()>xu&&(n.flags|=128,r=!0,es(o,!1),n.lanes=4194304)}else{if(!r)if(null!==(e=cl(a))){if(n.flags|=128,r=!0,e=e.updateQueue,n.updateQueue=e,Jl(n,e),es(o,!0),null===o.tail&&"hidden"===o.tailMode&&!a.alternate&&!oo)return ns(n),null}else 2*ee()-o.renderingStartTime>xu&&536870912!==t&&(n.flags|=128,r=!0,es(o,!1),n.lanes=4194304);o.isBackwards?(a.sibling=n.child,n.child=a):(null!==(e=o.last)?e.sibling=a:n.child=a,o.last=a)}return null!==o.tail?(n=o.tail,o.rendering=n,o.tail=n.sibling,o.renderingStartTime=ee(),n.sibling=null,e=ul.current,F(ul,r?1&e|2:1&e),n):(ns(n),null);case 22:case 23:return sl(n),Aa(),r=null!==n.memoizedState,null!==e?null!==e.memoizedState!==r&&(n.flags|=8192):r&&(n.flags|=8192),r?!!(536870912&t)&&!(128&n.flags)&&(ns(n),6&n.subtreeFlags&&(n.flags|=8192)):ns(n),null!==(t=n.updateQueue)&&Jl(n,t.retryQueue),t=null,null!==e&&null!==e.memoizedState&&null!==e.memoizedState.cachePool&&(t=e.memoizedState.cachePool.pool),r=null,null!==n.memoizedState&&null!==n.memoizedState.cachePool&&(r=n.memoizedState.cachePool.pool),r!==t&&(n.flags|=2048),null!==e&&D(Uo),null;case 24:return t=null,null!==e&&(t=e.memoizedState.cache),n.memoizedState.cache!==t&&(n.flags|=2048),bo(Po),ns(n),null;case 25:case 30:return null}throw Error(i(156,n.tag))}function rs(e,n){switch(no(n),n.tag){case 1:return 65536&(e=n.flags)?(n.flags=-65537&e|128,n):null;case 3:return bo(Po),Y(),65536&(e=n.flags)&&!(128&e)?(n.flags=-65537&e|128,n):null;case 26:case 27:case 5:return X(n),null;case 13:if(sl(n),null!==(e=n.memoizedState)&&null!==e.dehydrated){if(null===n.alternate)throw Error(i(340));ho()}return 65536&(e=n.flags)?(n.flags=-65537&e|128,n):null;case 19:return D(ul),null;case 4:return Y(),null;case 10:return bo(n.type),null;case 22:case 23:return sl(n),Aa(),null!==e&&D(Uo),65536&(e=n.flags)?(n.flags=-65537&e|128,n):null;case 24:return bo(Po),null;default:return null}}function os(e,n){switch(no(n),n.tag){case 3:bo(Po),Y();break;case 26:case 27:case 5:X(n);break;case 4:Y();break;case 13:sl(n);break;case 19:D(ul);break;case 10:bo(n.type);break;case 22:case 23:sl(n),Aa(),null!==e&&D(Uo);break;case 24:bo(Po)}}function as(e,n){try{var t=n.updateQueue,r=null!==t?t.lastEffect:null;if(null!==r){var o=r.next;t=o;do{if((t.tag&e)===e){r=void 0;var a=t.create,i=t.inst;r=a(),i.destroy=r}t=t.next}while(t!==o)}}catch(e){uc(n,n.return,e)}}function is(e,n,t){try{var r=n.updateQueue,o=null!==r?r.lastEffect:null;if(null!==o){var a=o.next;r=a;do{if((r.tag&e)===e){var i=r.inst,l=i.destroy;if(void 0!==l){i.destroy=void 0,o=n;var s=t,u=l;try{u()}catch(e){uc(o,s,e)}}}r=r.next}while(r!==a)}}catch(e){uc(n,n.return,e)}}function ls(e){var n=e.updateQueue;if(null!==n){var t=e.stateNode;try{fa(n,t)}catch(n){uc(e,e.return,n)}}}function ss(e,n,t){t.props=ml(e.type,e.memoizedProps),t.state=e.memoizedState;try{t.componentWillUnmount()}catch(t){uc(e,n,t)}}function us(e,n){try{var t=e.ref;if(null!==t){switch(e.tag){case 26:case 27:case 5:var r=e.stateNode;break;default:r=e.stateNode}"function"==typeof t?e.refCleanup=t(r):t.current=r}}catch(t){uc(e,n,t)}}function cs(e,n){var t=e.ref,r=e.refCleanup;if(null!==t)if("function"==typeof r)try{r()}catch(t){uc(e,n,t)}finally{e.refCleanup=null,null!=(e=e.alternate)&&(e.refCleanup=null)}else if("function"==typeof t)try{t(null)}catch(t){uc(e,n,t)}else t.current=null}function ds(e){var n=e.type,t=e.memoizedProps,r=e.stateNode;try{e:switch(n){case"button":case"input":case"select":case"textarea":t.autoFocus&&r.focus();break e;case"img":t.src?r.src=t.src:t.srcSet&&(r.srcset=t.srcSet)}}catch(n){uc(e,e.return,n)}}function fs(e,n,t){try{var r=e.stateNode;!function(e,n,t,r){switch(n){case"div":case"span":case"svg":case"path":case"a":case"g":case"p":case"li":break;case"input":var o=null,a=null,l=null,s=null,u=null,c=null,d=null;for(p in t){var f=t[p];if(t.hasOwnProperty(p)&&null!=f)switch(p){case"checked":case"value":break;case"defaultValue":u=f;default:r.hasOwnProperty(p)||Kc(e,n,p,null,r,f)}}for(var h in r){var p=r[h];if(f=t[h],r.hasOwnProperty(h)&&(null!=p||null!=f))switch(h){case"type":a=p;break;case"name":o=p;break;case"checked":c=p;break;case"defaultChecked":d=p;break;case"value":l=p;break;case"defaultValue":s=p;break;case"children":case"dangerouslySetInnerHTML":if(null!=p)throw Error(i(137,n));break;default:p!==f&&Kc(e,n,h,p,r,f)}}return void gn(e,l,s,u,c,d,a,o);case"select":for(a in p=l=s=h=null,t)if(u=t[a],t.hasOwnProperty(a)&&null!=u)switch(a){case"value":break;case"multiple":p=u;default:r.hasOwnProperty(a)||Kc(e,n,a,null,r,u)}for(o in r)if(a=r[o],u=t[o],r.hasOwnProperty(o)&&(null!=a||null!=u))switch(o){case"value":h=a;break;case"defaultValue":s=a;break;case"multiple":l=a;default:a!==u&&Kc(e,n,o,a,r,u)}return n=s,t=l,r=p,void(null!=h?vn(e,!!t,h,!1):!!r!=!!t&&(null!=n?vn(e,!!t,n,!0):vn(e,!!t,t?[]:"",!1)));case"textarea":for(s in p=h=null,t)if(o=t[s],t.hasOwnProperty(s)&&null!=o&&!r.hasOwnProperty(s))switch(s){case"value":case"children":break;default:Kc(e,n,s,null,r,o)}for(l in r)if(o=r[l],a=t[l],r.hasOwnProperty(l)&&(null!=o||null!=a))switch(l){case"value":h=o;break;case"defaultValue":p=o;break;case"children":break;case"dangerouslySetInnerHTML":if(null!=o)throw Error(i(91));break;default:o!==a&&Kc(e,n,l,o,r,a)}return void bn(e,h,p);case"option":for(var m in t)h=t[m],t.hasOwnProperty(m)&&null!=h&&!r.hasOwnProperty(m)&&("selected"===m?e.selected=!1:Kc(e,n,m,null,r,h));for(u in r)h=r[u],p=t[u],!r.hasOwnProperty(u)||h===p||null==h&&null==p||("selected"===u?e.selected=h&&"function"!=typeof h&&"symbol"!=typeof h:Kc(e,n,u,h,r,p));return;case"img":case"link":case"area":case"base":case"br":case"col":case"embed":case"hr":case"keygen":case"meta":case"param":case"source":case"track":case"wbr":case"menuitem":for(var g in t)h=t[g],t.hasOwnProperty(g)&&null!=h&&!r.hasOwnProperty(g)&&Kc(e,n,g,null,r,h);for(c in r)if(h=r[c],p=t[c],r.hasOwnProperty(c)&&h!==p&&(null!=h||null!=p))switch(c){case"children":case"dangerouslySetInnerHTML":if(null!=h)throw Error(i(137,n));break;default:Kc(e,n,c,h,r,p)}return;default:if(kn(n)){for(var A in t)h=t[A],t.hasOwnProperty(A)&&void 0!==h&&!r.hasOwnProperty(A)&&Zc(e,n,A,void 0,r,h);for(d in r)h=r[d],p=t[d],!r.hasOwnProperty(d)||h===p||void 0===h&&void 0===p||Zc(e,n,d,h,r,p);return}}for(var y in t)h=t[y],t.hasOwnProperty(y)&&null!=h&&!r.hasOwnProperty(y)&&Kc(e,n,y,null,r,h);for(f in r)h=r[f],p=t[f],!r.hasOwnProperty(f)||h===p||null==h&&null==p||Kc(e,n,f,h,r,p)}(r,e.type,t,n),r[Pe]=n}catch(n){uc(e,e.return,n)}}function hs(e){return 5===e.tag||3===e.tag||26===e.tag||27===e.tag&&fd(e.type)||4===e.tag}function ps(e){e:for(;;){for(;null===e.sibling;){if(null===e.return||hs(e.return))return null;e=e.return}for(e.sibling.return=e.return,e=e.sibling;5!==e.tag&&6!==e.tag&&18!==e.tag;){if(27===e.tag&&fd(e.type))continue e;if(2&e.flags)continue e;if(null===e.child||4===e.tag)continue e;e.child.return=e,e=e.child}if(!(2&e.flags))return e.stateNode}}function ms(e,n,t){var r=e.tag;if(5===r||6===r)e=e.stateNode,n?(9===t.nodeType?t.body:"HTML"===t.nodeName?t.ownerDocument.body:t).insertBefore(e,n):((n=9===t.nodeType?t.body:"HTML"===t.nodeName?t.ownerDocument.body:t).appendChild(e),null!=(t=t._reactRootContainer)||null!==n.onclick||(n.onclick=Gc));else if(4!==r&&(27===r&&fd(e.type)&&(t=e.stateNode,n=null),null!==(e=e.child)))for(ms(e,n,t),e=e.sibling;null!==e;)ms(e,n,t),e=e.sibling}function gs(e,n,t){var r=e.tag;if(5===r||6===r)e=e.stateNode,n?t.insertBefore(e,n):t.appendChild(e);else if(4!==r&&(27===r&&fd(e.type)&&(t=e.stateNode),null!==(e=e.child)))for(gs(e,n,t),e=e.sibling;null!==e;)gs(e,n,t),e=e.sibling}function As(e){var n=e.stateNode,t=e.memoizedProps;try{for(var r=e.type,o=n.attributes;o.length;)n.removeAttributeNode(o[0]);Jc(n,r,t),n[je]=e,n[Pe]=t}catch(n){uc(e,e.return,n)}}var ys=!1,vs=!1,bs=!1,xs="function"==typeof WeakSet?WeakSet:Set,Es=null;function Cs(e,n,t){var r=t.flags;switch(t.tag){case 0:case 11:case 15:Rs(e,t),4&r&&as(5,t);break;case 1:if(Rs(e,t),4&r)if(e=t.stateNode,null===n)try{e.componentDidMount()}catch(e){uc(t,t.return,e)}else{var o=ml(t.type,n.memoizedProps);n=n.memoizedState;try{e.componentDidUpdate(o,n,e.__reactInternalSnapshotBeforeUpdate)}catch(e){uc(t,t.return,e)}}64&r&&ls(t),512&r&&us(t,t.return);break;case 3:if(Rs(e,t),64&r&&null!==(e=t.updateQueue)){if(n=null,null!==t.child)switch(t.child.tag){case 27:case 5:case 1:n=t.child.stateNode}try{fa(e,n)}catch(e){uc(t,t.return,e)}}break;case 27:null===n&&4&r&&As(t);case 26:case 5:Rs(e,t),null===n&&4&r&&ds(t),512&r&&us(t,t.return);break;case 12:Rs(e,t);break;case 13:Rs(e,t),4&r&&zs(e,t),64&r&&null!==(e=t.memoizedState)&&null!==(e=e.dehydrated)&&function(e,n){var t=e.ownerDocument;if("$?"!==e.data||"complete"===t.readyState)n();else{var r=function(){n(),t.removeEventListener("DOMContentLoaded",r)};t.addEventListener("DOMContentLoaded",r),e._reactRetry=r}}(e,t=hc.bind(null,t));break;case 22:if(!(r=null!==t.memoizedState||ys)){n=null!==n&&null!==n.memoizedState||vs,o=ys;var a=vs;ys=r,(vs=n)&&!a?Ls(e,t,!!(8772&t.subtreeFlags)):Rs(e,t),ys=o,vs=a}break;case 30:break;default:Rs(e,t)}}function ws(e){var n=e.alternate;null!==n&&(e.alternate=null,ws(n)),e.child=null,e.deletions=null,e.sibling=null,5===e.tag&&null!==(n=e.stateNode)&&De(n),e.stateNode=null,e.return=null,e.dependencies=null,e.memoizedProps=null,e.memoizedState=null,e.pendingProps=null,e.stateNode=null,e.updateQueue=null}var _s=null,ks=!1;function Bs(e,n,t){for(t=t.child;null!==t;)Ss(e,n,t),t=t.sibling}function Ss(e,n,t){if(ce&&"function"==typeof ce.onCommitFiberUnmount)try{ce.onCommitFiberUnmount(ue,t)}catch(e){}switch(t.tag){case 26:vs||cs(t,n),Bs(e,n,t),t.memoizedState?t.memoizedState.count--:t.stateNode&&(t=t.stateNode).parentNode.removeChild(t);break;case 27:vs||cs(t,n);var r=_s,o=ks;fd(t.type)&&(_s=t.stateNode,ks=!1),Bs(e,n,t),bd(t.stateNode),_s=r,ks=o;break;case 5:vs||cs(t,n);case 6:if(r=_s,o=ks,_s=null,Bs(e,n,t),ks=o,null!==(_s=r))if(ks)try{(9===_s.nodeType?_s.body:"HTML"===_s.nodeName?_s.ownerDocument.body:_s).removeChild(t.stateNode)}catch(e){uc(t,n,e)}else try{_s.removeChild(t.stateNode)}catch(e){uc(t,n,e)}break;case 18:null!==_s&&(ks?(hd(9===(e=_s).nodeType?e.body:"HTML"===e.nodeName?e.ownerDocument.body:e,t.stateNode),_f(e)):hd(_s,t.stateNode));break;case 4:r=_s,o=ks,_s=t.stateNode.containerInfo,ks=!0,Bs(e,n,t),_s=r,ks=o;break;case 0:case 11:case 14:case 15:vs||is(2,t,n),vs||is(4,t,n),Bs(e,n,t);break;case 1:vs||(cs(t,n),"function"==typeof(r=t.stateNode).componentWillUnmount&&ss(t,n,r)),Bs(e,n,t);break;case 21:Bs(e,n,t);break;case 22:vs=(r=vs)||null!==t.memoizedState,Bs(e,n,t),vs=r;break;default:Bs(e,n,t)}}function zs(e,n){if(null===n.memoizedState&&null!==(e=n.alternate)&&null!==(e=e.memoizedState)&&null!==(e=e.dehydrated))try{_f(e)}catch(e){uc(n,n.return,e)}}function Ns(e,n){var t=function(e){switch(e.tag){case 13:case 19:var n=e.stateNode;return null===n&&(n=e.stateNode=new xs),n;case 22:return null===(n=(e=e.stateNode)._retryCache)&&(n=e._retryCache=new xs),n;default:throw Error(i(435,e.tag))}}(e);n.forEach(function(n){var r=pc.bind(null,e,n);t.has(n)||(t.add(n),n.then(r,r))})}function js(e,n){var t=n.deletions;if(null!==t)for(var r=0;r<t.length;r++){var o=t[r],a=e,l=n,s=l;e:for(;null!==s;){switch(s.tag){case 27:if(fd(s.type)){_s=s.stateNode,ks=!1;break e}break;case 5:_s=s.stateNode,ks=!1;break e;case 3:case 4:_s=s.stateNode.containerInfo,ks=!0;break e}s=s.return}if(null===_s)throw Error(i(160));Ss(a,l,o),_s=null,ks=!1,null!==(a=o.alternate)&&(a.return=null),o.return=null}if(13878&n.subtreeFlags)for(n=n.child;null!==n;)Ts(n,e),n=n.sibling}var Ps=null;function Ts(e,n){var t=e.alternate,r=e.flags;switch(e.tag){case 0:case 11:case 14:case 15:js(n,e),Ms(e),4&r&&(is(3,e,e.return),as(3,e),is(5,e,e.return));break;case 1:js(n,e),Ms(e),512&r&&(vs||null===t||cs(t,t.return)),64&r&&ys&&null!==(e=e.updateQueue)&&null!==(r=e.callbacks)&&(t=e.shared.hiddenCallbacks,e.shared.hiddenCallbacks=null===t?r:t.concat(r));break;case 26:var o=Ps;if(js(n,e),Ms(e),512&r&&(vs||null===t||cs(t,t.return)),4&r){var a=null!==t?t.memoizedState:null;if(r=e.memoizedState,null===t)if(null===r)if(null===e.stateNode){e:{r=e.type,t=e.memoizedProps,o=o.ownerDocument||o;n:switch(r){case"title":(!(a=o.getElementsByTagName("title")[0])||a[Le]||a[je]||"http://www.w3.org/2000/svg"===a.namespaceURI||a.hasAttribute("itemprop"))&&(a=o.createElement(r),o.head.insertBefore(a,o.querySelector("head > title"))),Jc(a,r,t),a[je]=e,He(a),r=a;break e;case"link":var l=Ld("link","href",o).get(r+(t.href||""));if(l)for(var s=0;s<l.length;s++)if((a=l[s]).getAttribute("href")===(null==t.href||""===t.href?null:t.href)&&a.getAttribute("rel")===(null==t.rel?null:t.rel)&&a.getAttribute("title")===(null==t.title?null:t.title)&&a.getAttribute("crossorigin")===(null==t.crossOrigin?null:t.crossOrigin)){l.splice(s,1);break n}Jc(a=o.createElement(r),r,t),o.head.appendChild(a);break;case"meta":if(l=Ld("meta","content",o).get(r+(t.content||"")))for(s=0;s<l.length;s++)if((a=l[s]).getAttribute("content")===(null==t.content?null:""+t.content)&&a.getAttribute("name")===(null==t.name?null:t.name)&&a.getAttribute("property")===(null==t.property?null:t.property)&&a.getAttribute("http-equiv")===(null==t.httpEquiv?null:t.httpEquiv)&&a.getAttribute("charset")===(null==t.charSet?null:t.charSet)){l.splice(s,1);break n}Jc(a=o.createElement(r),r,t),o.head.appendChild(a);break;default:throw Error(i(468,r))}a[je]=e,He(a),r=a}e.stateNode=r}else Dd(o,e.type,e.stateNode);else e.stateNode=Td(o,r,e.memoizedProps);else a!==r?(null===a?null!==t.stateNode&&(t=t.stateNode).parentNode.removeChild(t):a.count--,null===r?Dd(o,e.type,e.stateNode):Td(o,r,e.memoizedProps)):null===r&&null!==e.stateNode&&fs(e,e.memoizedProps,t.memoizedProps)}break;case 27:js(n,e),Ms(e),512&r&&(vs||null===t||cs(t,t.return)),null!==t&&4&r&&fs(e,e.memoizedProps,t.memoizedProps);break;case 5:if(js(n,e),Ms(e),512&r&&(vs||null===t||cs(t,t.return)),32&e.flags){o=e.stateNode;try{En(o,"")}catch(n){uc(e,e.return,n)}}4&r&&null!=e.stateNode&&fs(e,o=e.memoizedProps,null!==t?t.memoizedProps:o),1024&r&&(bs=!0);break;case 6:if(js(n,e),Ms(e),4&r){if(null===e.stateNode)throw Error(i(162));r=e.memoizedProps,t=e.stateNode;try{t.nodeValue=r}catch(n){uc(e,e.return,n)}}break;case 3:if(Id=null,o=Ps,Ps=Cd(n.containerInfo),js(n,e),Ps=o,Ms(e),4&r&&null!==t&&t.memoizedState.isDehydrated)try{_f(n.containerInfo)}catch(n){uc(e,e.return,n)}bs&&(bs=!1,Os(e));break;case 4:r=Ps,Ps=Cd(e.stateNode.containerInfo),js(n,e),Ms(e),Ps=r;break;case 12:default:js(n,e),Ms(e);break;case 13:js(n,e),Ms(e),8192&e.child.flags&&null!==e.memoizedState!=(null!==t&&null!==t.memoizedState)&&(bu=ee()),4&r&&null!==(r=e.updateQueue)&&(e.updateQueue=null,Ns(e,r));break;case 22:o=null!==e.memoizedState;var u=null!==t&&null!==t.memoizedState,c=ys,d=vs;if(ys=c||o,vs=d||u,js(n,e),vs=d,ys=c,Ms(e),8192&r)e:for(n=e.stateNode,n._visibility=o?-2&n._visibility:1|n._visibility,o&&(null===t||u||ys||vs||Is(e)),t=null,n=e;;){if(5===n.tag||26===n.tag){if(null===t){u=t=n;try{if(a=u.stateNode,o)"function"==typeof(l=a.style).setProperty?l.setProperty("display","none","important"):l.display="none";else{s=u.stateNode;var f=u.memoizedProps.style,h=null!=f&&f.hasOwnProperty("display")?f.display:null;s.style.display=null==h||"boolean"==typeof h?"":(""+h).trim()}}catch(e){uc(u,u.return,e)}}}else if(6===n.tag){if(null===t){u=n;try{u.stateNode.nodeValue=o?"":u.memoizedProps}catch(e){uc(u,u.return,e)}}}else if((22!==n.tag&&23!==n.tag||null===n.memoizedState||n===e)&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===e)break e;for(;null===n.sibling;){if(null===n.return||n.return===e)break e;t===n&&(t=null),n=n.return}t===n&&(t=null),n.sibling.return=n.return,n=n.sibling}4&r&&null!==(r=e.updateQueue)&&null!==(t=r.retryQueue)&&(r.retryQueue=null,Ns(e,t));break;case 19:js(n,e),Ms(e),4&r&&null!==(r=e.updateQueue)&&(e.updateQueue=null,Ns(e,r));case 30:case 21:}}function Ms(e){var n=e.flags;if(2&n){try{for(var t,r=e.return;null!==r;){if(hs(r)){t=r;break}r=r.return}if(null==t)throw Error(i(160));switch(t.tag){case 27:var o=t.stateNode;gs(e,ps(e),o);break;case 5:var a=t.stateNode;32&t.flags&&(En(a,""),t.flags&=-33),gs(e,ps(e),a);break;case 3:case 4:var l=t.stateNode.containerInfo;ms(e,ps(e),l);break;default:throw Error(i(161))}}catch(n){uc(e,e.return,n)}e.flags&=-3}4096&n&&(e.flags&=-4097)}function Os(e){if(1024&e.subtreeFlags)for(e=e.child;null!==e;){var n=e;Os(n),5===n.tag&&1024&n.flags&&n.stateNode.reset(),e=e.sibling}}function Rs(e,n){if(8772&n.subtreeFlags)for(n=n.child;null!==n;)Cs(e,n.alternate,n),n=n.sibling}function Is(e){for(e=e.child;null!==e;){var n=e;switch(n.tag){case 0:case 11:case 14:case 15:is(4,n,n.return),Is(n);break;case 1:cs(n,n.return);var t=n.stateNode;"function"==typeof t.componentWillUnmount&&ss(n,n.return,t),Is(n);break;case 27:bd(n.stateNode);case 26:case 5:cs(n,n.return),Is(n);break;case 22:null===n.memoizedState&&Is(n);break;default:Is(n)}e=e.sibling}}function Ls(e,n,t){for(t=t&&!!(8772&n.subtreeFlags),n=n.child;null!==n;){var r=n.alternate,o=e,a=n,i=a.flags;switch(a.tag){case 0:case 11:case 15:Ls(o,a,t),as(4,a);break;case 1:if(Ls(o,a,t),"function"==typeof(o=(r=a).stateNode).componentDidMount)try{o.componentDidMount()}catch(e){uc(r,r.return,e)}if(null!==(o=(r=a).updateQueue)){var l=r.stateNode;try{var s=o.shared.hiddenCallbacks;if(null!==s)for(o.shared.hiddenCallbacks=null,o=0;o<s.length;o++)da(s[o],l)}catch(e){uc(r,r.return,e)}}t&&64&i&&ls(a),us(a,a.return);break;case 27:As(a);case 26:case 5:Ls(o,a,t),t&&null===r&&4&i&&ds(a),us(a,a.return);break;case 12:Ls(o,a,t);break;case 13:Ls(o,a,t),t&&4&i&&zs(o,a);break;case 22:null===a.memoizedState&&Ls(o,a,t),us(a,a.return);break;case 30:break;default:Ls(o,a,t)}n=n.sibling}}function Ds(e,n){var t=null;null!==e&&null!==e.memoizedState&&null!==e.memoizedState.cachePool&&(t=e.memoizedState.cachePool.pool),e=null,null!==n.memoizedState&&null!==n.memoizedState.cachePool&&(e=n.memoizedState.cachePool.pool),e!==t&&(null!=e&&e.refCount++,null!=t&&Mo(t))}function Fs(e,n){e=null,null!==n.alternate&&(e=n.alternate.memoizedState.cache),(n=n.memoizedState.cache)!==e&&(n.refCount++,null!=e&&Mo(e))}function Us(e,n,t,r){if(10256&n.subtreeFlags)for(n=n.child;null!==n;)$s(e,n,t,r),n=n.sibling}function $s(e,n,t,r){var o=n.flags;switch(n.tag){case 0:case 11:case 15:Us(e,n,t,r),2048&o&&as(9,n);break;case 1:case 13:default:Us(e,n,t,r);break;case 3:Us(e,n,t,r),2048&o&&(e=null,null!==n.alternate&&(e=n.alternate.memoizedState.cache),(n=n.memoizedState.cache)!==e&&(n.refCount++,null!=e&&Mo(e)));break;case 12:if(2048&o){Us(e,n,t,r),e=n.stateNode;try{var a=n.memoizedProps,i=a.id,l=a.onPostCommit;"function"==typeof l&&l(i,null===n.alternate?"mount":"update",e.passiveEffectDuration,-0)}catch(e){uc(n,n.return,e)}}else Us(e,n,t,r);break;case 23:break;case 22:a=n.stateNode,i=n.alternate,null!==n.memoizedState?2&a._visibility?Us(e,n,t,r):Hs(e,n):2&a._visibility?Us(e,n,t,r):(a._visibility|=2,qs(e,n,t,r,!!(10256&n.subtreeFlags))),2048&o&&Ds(i,n);break;case 24:Us(e,n,t,r),2048&o&&Fs(n.alternate,n)}}function qs(e,n,t,r,o){for(o=o&&!!(10256&n.subtreeFlags),n=n.child;null!==n;){var a=e,i=n,l=t,s=r,u=i.flags;switch(i.tag){case 0:case 11:case 15:qs(a,i,l,s,o),as(8,i);break;case 23:break;case 22:var c=i.stateNode;null!==i.memoizedState?2&c._visibility?qs(a,i,l,s,o):Hs(a,i):(c._visibility|=2,qs(a,i,l,s,o)),o&&2048&u&&Ds(i.alternate,i);break;case 24:qs(a,i,l,s,o),o&&2048&u&&Fs(i.alternate,i);break;default:qs(a,i,l,s,o)}n=n.sibling}}function Hs(e,n){if(10256&n.subtreeFlags)for(n=n.child;null!==n;){var t=e,r=n,o=r.flags;switch(r.tag){case 22:Hs(t,r),2048&o&&Ds(r.alternate,r);break;case 24:Hs(t,r),2048&o&&Fs(r.alternate,r);break;default:Hs(t,r)}n=n.sibling}}var Ws=8192;function Ys(e){if(e.subtreeFlags&Ws)for(e=e.child;null!==e;)Vs(e),e=e.sibling}function Vs(e){switch(e.tag){case 26:Ys(e),e.flags&Ws&&null!==e.memoizedState&&function(e,n,t){if(null===Ud)throw Error(i(475));var r=Ud;if(!("stylesheet"!==n.type||"string"==typeof t.media&&!1===matchMedia(t.media).matches||4&n.state.loading)){if(null===n.instance){var o=Sd(t.href),a=e.querySelector(zd(o));if(a)return null!==(e=a._p)&&"object"==typeof e&&"function"==typeof e.then&&(r.count++,r=qd.bind(r),e.then(r,r)),n.state.loading|=4,n.instance=a,void He(a);a=e.ownerDocument||e,t=Nd(t),(o=xd.get(o))&&Od(t,o),He(a=a.createElement("link"));var l=a;l._p=new Promise(function(e,n){l.onload=e,l.onerror=n}),Jc(a,"link",t),n.instance=a}null===r.stylesheets&&(r.stylesheets=new Map),r.stylesheets.set(n,e),(e=n.state.preload)&&!(3&n.state.loading)&&(r.count++,n=qd.bind(r),e.addEventListener("load",n),e.addEventListener("error",n))}}(Ps,e.memoizedState,e.memoizedProps);break;case 5:default:Ys(e);break;case 3:case 4:var n=Ps;Ps=Cd(e.stateNode.containerInfo),Ys(e),Ps=n;break;case 22:null===e.memoizedState&&(null!==(n=e.alternate)&&null!==n.memoizedState?(n=Ws,Ws=16777216,Ys(e),Ws=n):Ys(e))}}function Xs(e){var n=e.alternate;if(null!==n&&null!==(e=n.child)){n.child=null;do{n=e.sibling,e.sibling=null,e=n}while(null!==e)}}function Qs(e){var n=e.deletions;if(16&e.flags){if(null!==n)for(var t=0;t<n.length;t++){var r=n[t];Es=r,Zs(r,e)}Xs(e)}if(10256&e.subtreeFlags)for(e=e.child;null!==e;)Gs(e),e=e.sibling}function Gs(e){switch(e.tag){case 0:case 11:case 15:Qs(e),2048&e.flags&&is(9,e,e.return);break;case 3:case 12:default:Qs(e);break;case 22:var n=e.stateNode;null!==e.memoizedState&&2&n._visibility&&(null===e.return||13!==e.return.tag)?(n._visibility&=-3,Ks(e)):Qs(e)}}function Ks(e){var n=e.deletions;if(16&e.flags){if(null!==n)for(var t=0;t<n.length;t++){var r=n[t];Es=r,Zs(r,e)}Xs(e)}for(e=e.child;null!==e;){switch((n=e).tag){case 0:case 11:case 15:is(8,n,n.return),Ks(n);break;case 22:2&(t=n.stateNode)._visibility&&(t._visibility&=-3,Ks(n));break;default:Ks(n)}e=e.sibling}}function Zs(e,n){for(;null!==Es;){var t=Es;switch(t.tag){case 0:case 11:case 15:is(8,t,n);break;case 23:case 22:if(null!==t.memoizedState&&null!==t.memoizedState.cachePool){var r=t.memoizedState.cachePool.pool;null!=r&&r.refCount++}break;case 24:Mo(t.memoizedState.cache)}if(null!==(r=t.child))r.return=t,Es=r;else e:for(t=e;null!==Es;){var o=(r=Es).sibling,a=r.return;if(ws(r),r===t){Es=null;break e}if(null!==o){o.return=a,Es=o;break e}Es=a}}}var Js={getCacheForType:function(e){var n=ko(Po),t=n.data.get(e);return void 0===t&&(t=e(),n.data.set(e,t)),t}},eu="function"==typeof WeakMap?WeakMap:Map,nu=0,tu=null,ru=null,ou=0,au=0,iu=null,lu=!1,su=!1,uu=!1,cu=0,du=0,fu=0,hu=0,pu=0,mu=0,gu=0,Au=null,yu=null,vu=!1,bu=0,xu=1/0,Eu=null,Cu=null,wu=0,_u=null,ku=null,Bu=0,Su=0,zu=null,Nu=null,ju=0,Pu=null;function Tu(){return 2&nu&&0!==ou?ou&-ou:null!==T.T?0!==Io?Io:Sc():ze()}function Mu(){0===mu&&(mu=536870912&ou&&!oo?536870912:xe());var e=rl.current;return null!==e&&(e.flags|=32),mu}function Ou(e,n,t){(e!==tu||2!==au&&9!==au)&&null===e.cancelPendingCommit||($u(e,0),Du(e,ou,mu,!1)),we(e,t),2&nu&&e===tu||(e===tu&&(!(2&nu)&&(hu|=t),4===du&&Du(e,ou,mu,!1)),xc(e))}function Ru(e,n,t){if(6&nu)throw Error(i(327));for(var r=!t&&!(124&n)&&0===(n&e.expiredLanes)||ve(e,n),o=r?function(e,n){var t=nu;nu|=2;var r=Hu(),o=Wu();tu!==e||ou!==n?(Eu=null,xu=ee()+500,$u(e,n)):su=ve(e,n);e:for(;;)try{if(0!==au&&null!==ru){n=ru;var a=iu;n:switch(au){case 1:au=0,iu=null,Zu(e,n,a,1);break;case 2:case 9:if(Qo(a)){au=0,iu=null,Ku(n);break}n=function(){2!==au&&9!==au||tu!==e||(au=7),xc(e)},a.then(n,n);break e;case 3:au=7;break e;case 4:au=5;break e;case 7:Qo(a)?(au=0,iu=null,Ku(n)):(au=0,iu=null,Zu(e,n,a,7));break;case 5:var l=null;switch(ru.tag){case 26:l=ru.memoizedState;case 5:case 27:var s=ru;if(!l||Fd(l)){au=0,iu=null;var u=s.sibling;if(null!==u)ru=u;else{var c=s.return;null!==c?(ru=c,Ju(c)):ru=null}break n}}au=0,iu=null,Zu(e,n,a,5);break;case 6:au=0,iu=null,Zu(e,n,a,6);break;case 8:Uu(),du=6;break e;default:throw Error(i(462))}}Qu();break}catch(n){qu(e,n)}return yo=Ao=null,T.H=r,T.A=o,nu=t,null!==ru?0:(tu=null,ou=0,Br(),du)}(e,n):Vu(e,n,!0),a=r;;){if(0===o){su&&!r&&Du(e,n,0,!1);break}if(t=e.current.alternate,!a||Lu(t)){if(2===o){if(a=n,e.errorRecoveryDisabledLanes&a)var l=0;else l=0!=(l=-536870913&e.pendingLanes)?l:536870912&l?536870912:0;if(0!==l){n=l;e:{var s=e;o=Au;var u=s.current.memoizedState.isDehydrated;if(u&&($u(s,l).flags|=256),2!==(l=Vu(s,l,!1))){if(uu&&!u){s.errorRecoveryDisabledLanes|=a,hu|=a,o=4;break e}a=yu,yu=o,null!==a&&(null===yu?yu=a:yu.push.apply(yu,a))}o=l}if(a=!1,2!==o)continue}}if(1===o){$u(e,0),Du(e,n,0,!0);break}e:{switch(r=e,a=o){case 0:case 1:throw Error(i(345));case 4:if((4194048&n)!==n)break;case 6:Du(r,n,mu,!lu);break e;case 2:yu=null;break;case 3:case 5:break;default:throw Error(i(329))}if((62914560&n)===n&&10<(o=bu+300-ee())){if(Du(r,n,mu,!lu),0!==ye(r,0,!0))break e;r.timeoutHandle=ld(Iu.bind(null,r,t,yu,Eu,vu,n,mu,hu,gu,lu,a,2,-0,0),o)}else Iu(r,t,yu,Eu,vu,n,mu,hu,gu,lu,a,0,-0,0)}break}o=Vu(e,n,!1),a=!1}xc(e)}function Iu(e,n,t,r,o,a,l,s,u,c,d,f,h,p){if(e.timeoutHandle=-1,(8192&(f=n.subtreeFlags)||!(16785408&~f))&&(Ud={stylesheets:null,count:0,unsuspend:$d},Vs(n),null!==(f=function(){if(null===Ud)throw Error(i(475));var e=Ud;return e.stylesheets&&0===e.count&&Wd(e,e.stylesheets),0<e.count?function(n){var t=setTimeout(function(){if(e.stylesheets&&Wd(e,e.stylesheets),e.unsuspend){var n=e.unsuspend;e.unsuspend=null,n()}},6e4);return e.unsuspend=n,function(){e.unsuspend=null,clearTimeout(t)}}:null}())))return e.cancelPendingCommit=f(nc.bind(null,e,n,a,t,r,o,l,s,u,d,1,h,p)),void Du(e,a,l,!c);nc(e,n,a,t,r,o,l,s,u)}function Lu(e){for(var n=e;;){var t=n.tag;if((0===t||11===t||15===t)&&16384&n.flags&&null!==(t=n.updateQueue)&&null!==(t=t.stores))for(var r=0;r<t.length;r++){var o=t[r],a=o.getSnapshot;o=o.value;try{if(!Xt(a(),o))return!1}catch(e){return!1}}if(t=n.child,16384&n.subtreeFlags&&null!==t)t.return=n,n=t;else{if(n===e)break;for(;null===n.sibling;){if(null===n.return||n.return===e)return!0;n=n.return}n.sibling.return=n.return,n=n.sibling}}return!0}function Du(e,n,t,r){n&=~pu,n&=~hu,e.suspendedLanes|=n,e.pingedLanes&=~n,r&&(e.warmLanes|=n),r=e.expirationTimes;for(var o=n;0<o;){var a=31-fe(o),i=1<<a;r[a]=-1,o&=~i}0!==t&&_e(e,t,n)}function Fu(){return!!(6&nu)||(Ec(0,!1),!1)}function Uu(){if(null!==ru){if(0===au)var e=ru.return;else yo=Ao=null,Ia(e=ru),Xi=null,Qi=0,e=ru;for(;null!==e;)os(e.alternate,e),e=e.return;ru=null}}function $u(e,n){var t=e.timeoutHandle;-1!==t&&(e.timeoutHandle=-1,sd(t)),null!==(t=e.cancelPendingCommit)&&(e.cancelPendingCommit=null,t()),Uu(),tu=e,ru=t=Ir(e.current,null),ou=n,au=0,iu=null,lu=!1,su=ve(e,n),uu=!1,gu=mu=pu=hu=fu=du=0,yu=Au=null,vu=!1,8&n&&(n|=32&n);var r=e.entangledLanes;if(0!==r)for(e=e.entanglements,r&=n;0<r;){var o=31-fe(r),a=1<<o;n|=e[o],r&=~a}return cu=n,Br(),t}function qu(e,n){va=null,T.H=Hi,n===Wo||n===Vo?(n=Jo(),au=3):n===Yo?(n=Jo(),au=4):au=n===_l?8:null!==n&&"object"==typeof n&&"function"==typeof n.then?6:1,iu=n,null===ru&&(du=1,bl(e,Cr(n,e.current)))}function Hu(){var e=T.H;return T.H=Hi,null===e?Hi:e}function Wu(){var e=T.A;return T.A=Js,e}function Yu(){du=4,lu||(4194048&ou)!==ou&&null!==rl.current||(su=!0),!(134217727&fu)&&!(134217727&hu)||null===tu||Du(tu,ou,mu,!1)}function Vu(e,n,t){var r=nu;nu|=2;var o=Hu(),a=Wu();tu===e&&ou===n||(Eu=null,$u(e,n)),n=!1;var i=du;e:for(;;)try{if(0!==au&&null!==ru){var l=ru,s=iu;switch(au){case 8:Uu(),i=6;break e;case 3:case 2:case 9:case 6:null===rl.current&&(n=!0);var u=au;if(au=0,iu=null,Zu(e,l,s,u),t&&su){i=0;break e}break;default:u=au,au=0,iu=null,Zu(e,l,s,u)}}Xu(),i=du;break}catch(n){qu(e,n)}return n&&e.shellSuspendCounter++,yo=Ao=null,nu=r,T.H=o,T.A=a,null===ru&&(tu=null,ou=0,Br()),i}function Xu(){for(;null!==ru;)Gu(ru)}function Qu(){for(;null!==ru&&!Z();)Gu(ru)}function Gu(e){var n=Gl(e.alternate,e,cu);e.memoizedProps=e.pendingProps,null===n?Ju(e):ru=n}function Ku(e){var n=e,t=n.alternate;switch(n.tag){case 15:case 0:n=Ol(t,n,n.pendingProps,n.type,void 0,ou);break;case 11:n=Ol(t,n,n.pendingProps,n.type.render,n.ref,ou);break;case 5:Ia(n);default:os(t,n),n=Gl(t,n=ru=Lr(n,cu),cu)}e.memoizedProps=e.pendingProps,null===n?Ju(e):ru=n}function Zu(e,n,t,r){yo=Ao=null,Ia(n),Xi=null,Qi=0;var o=n.return;try{if(function(e,n,t,r,o){if(t.flags|=32768,null!==r&&"object"==typeof r&&"function"==typeof r.then){if(null!==(n=t.alternate)&&Co(n,t,o,!0),null!==(t=rl.current)){switch(t.tag){case 13:return null===ol?Yu():null===t.alternate&&0===du&&(du=3),t.flags&=-257,t.flags|=65536,t.lanes=o,r===Xo?t.flags|=16384:(null===(n=t.updateQueue)?t.updateQueue=new Set([r]):n.add(r),cc(e,r,o)),!1;case 22:return t.flags|=65536,r===Xo?t.flags|=16384:(null===(n=t.updateQueue)?(n={transitions:null,markerInstances:null,retryQueue:new Set([r])},t.updateQueue=n):null===(t=n.retryQueue)?n.retryQueue=new Set([r]):t.add(r),cc(e,r,o)),!1}throw Error(i(435,t.tag))}return cc(e,r,o),Yu(),!1}if(oo)return null!==(n=rl.current)?(!(65536&n.flags)&&(n.flags|=256),n.flags|=65536,n.lanes=o,r!==lo&&mo(Cr(e=Error(i(422),{cause:r}),t))):(r!==lo&&mo(Cr(n=Error(i(423),{cause:r}),t)),(e=e.current.alternate).flags|=65536,o&=-o,e.lanes|=o,r=Cr(r,t),la(e,o=El(e.stateNode,r,o)),4!==du&&(du=2)),!1;var a=Error(i(520),{cause:r});if(a=Cr(a,t),null===Au?Au=[a]:Au.push(a),4!==du&&(du=2),null===n)return!0;r=Cr(r,t),t=n;do{switch(t.tag){case 3:return t.flags|=65536,e=o&-o,t.lanes|=e,la(t,e=El(t.stateNode,r,e)),!1;case 1:if(n=t.type,a=t.stateNode,!(128&t.flags||"function"!=typeof n.getDerivedStateFromError&&(null===a||"function"!=typeof a.componentDidCatch||null!==Cu&&Cu.has(a))))return t.flags|=65536,o&=-o,t.lanes|=o,wl(o=Cl(o),e,t,r),la(t,o),!1}t=t.return}while(null!==t);return!1}(e,o,n,t,ou))return du=1,bl(e,Cr(t,e.current)),void(ru=null)}catch(n){if(null!==o)throw ru=o,n;return du=1,bl(e,Cr(t,e.current)),void(ru=null)}32768&n.flags?(oo||1===r?e=!0:su||536870912&ou?e=!1:(lu=e=!0,(2===r||9===r||3===r||6===r)&&null!==(r=rl.current)&&13===r.tag&&(r.flags|=16384)),ec(n,e)):Ju(n)}function Ju(e){var n=e;do{if(32768&n.flags)return void ec(n,lu);e=n.return;var t=ts(n.alternate,n,cu);if(null!==t)return void(ru=t);if(null!==(n=n.sibling))return void(ru=n);ru=n=e}while(null!==n);0===du&&(du=5)}function ec(e,n){do{var t=rs(e.alternate,e);if(null!==t)return t.flags&=32767,void(ru=t);if(null!==(t=e.return)&&(t.flags|=32768,t.subtreeFlags=0,t.deletions=null),!n&&null!==(e=e.sibling))return void(ru=e);ru=e=t}while(null!==e);du=6,ru=null}function nc(e,n,t,r,o,a,l,s,u){e.cancelPendingCommit=null;do{ic()}while(0!==wu);if(6&nu)throw Error(i(327));if(null!==n){if(n===e.current)throw Error(i(177));if(a=n.lanes|n.childLanes,function(e,n,t,r,o,a){var i=e.pendingLanes;e.pendingLanes=t,e.suspendedLanes=0,e.pingedLanes=0,e.warmLanes=0,e.expiredLanes&=t,e.entangledLanes&=t,e.errorRecoveryDisabledLanes&=t,e.shellSuspendCounter=0;var l=e.entanglements,s=e.expirationTimes,u=e.hiddenUpdates;for(t=i&~t;0<t;){var c=31-fe(t),d=1<<c;l[c]=0,s[c]=-1;var f=u[c];if(null!==f)for(u[c]=null,c=0;c<f.length;c++){var h=f[c];null!==h&&(h.lane&=-536870913)}t&=~d}0!==r&&_e(e,r,0),0!==a&&0===o&&0!==e.tag&&(e.suspendedLanes|=a&~(i&~n))}(e,t,a|=kr,l,s,u),e===tu&&(ru=tu=null,ou=0),ku=n,_u=e,Bu=t,Su=a,zu=o,Nu=r,10256&n.subtreeFlags||10256&n.flags?(e.callbackNode=null,e.callbackPriority=0,G(oe,function(){return lc(),null})):(e.callbackNode=null,e.callbackPriority=0),r=!!(13878&n.flags),13878&n.subtreeFlags||r){r=T.T,T.T=null,o=M.p,M.p=2,l=nu,nu|=4;try{!function(e,n){if(e=e.containerInfo,ed=Jd,er(e=Jt(e))){if("selectionStart"in e)var t={start:e.selectionStart,end:e.selectionEnd};else e:{var r=(t=(t=e.ownerDocument)&&t.defaultView||window).getSelection&&t.getSelection();if(r&&0!==r.rangeCount){t=r.anchorNode;var o=r.anchorOffset,a=r.focusNode;r=r.focusOffset;try{t.nodeType,a.nodeType}catch(e){t=null;break e}var l=0,s=-1,u=-1,c=0,d=0,f=e,h=null;n:for(;;){for(var p;f!==t||0!==o&&3!==f.nodeType||(s=l+o),f!==a||0!==r&&3!==f.nodeType||(u=l+r),3===f.nodeType&&(l+=f.nodeValue.length),null!==(p=f.firstChild);)h=f,f=p;for(;;){if(f===e)break n;if(h===t&&++c===o&&(s=l),h===a&&++d===r&&(u=l),null!==(p=f.nextSibling))break;h=(f=h).parentNode}f=p}t=-1===s||-1===u?null:{start:s,end:u}}else t=null}t=t||{start:0,end:0}}else t=null;for(nd={focusedElem:e,selectionRange:t},Jd=!1,Es=n;null!==Es;)if(e=(n=Es).child,1024&n.subtreeFlags&&null!==e)e.return=n,Es=e;else for(;null!==Es;){switch(a=(n=Es).alternate,e=n.flags,n.tag){case 0:case 11:case 15:case 5:case 26:case 27:case 6:case 4:case 17:break;case 1:if(1024&e&&null!==a){e=void 0,t=n,o=a.memoizedProps,a=a.memoizedState,r=t.stateNode;try{var m=ml(t.type,o,(t.elementType,t.type));e=r.getSnapshotBeforeUpdate(m,a),r.__reactInternalSnapshotBeforeUpdate=e}catch(e){uc(t,t.return,e)}}break;case 3:if(1024&e)if(9===(t=(e=n.stateNode.containerInfo).nodeType))pd(e);else if(1===t)switch(e.nodeName){case"HEAD":case"HTML":case"BODY":pd(e);break;default:e.textContent=""}break;default:if(1024&e)throw Error(i(163))}if(null!==(e=n.sibling)){e.return=n.return,Es=e;break}Es=n.return}}(e,n)}finally{nu=l,M.p=o,T.T=r}}wu=1,tc(),rc(),oc()}}function tc(){if(1===wu){wu=0;var e=_u,n=ku,t=!!(13878&n.flags);if(13878&n.subtreeFlags||t){t=T.T,T.T=null;var r=M.p;M.p=2;var o=nu;nu|=4;try{Ts(n,e);var a=nd,i=Jt(e.containerInfo),l=a.focusedElem,s=a.selectionRange;if(i!==l&&l&&l.ownerDocument&&Zt(l.ownerDocument.documentElement,l)){if(null!==s&&er(l)){var u=s.start,c=s.end;if(void 0===c&&(c=u),"selectionStart"in l)l.selectionStart=u,l.selectionEnd=Math.min(c,l.value.length);else{var d=l.ownerDocument||document,f=d&&d.defaultView||window;if(f.getSelection){var h=f.getSelection(),p=l.textContent.length,m=Math.min(s.start,p),g=void 0===s.end?m:Math.min(s.end,p);!h.extend&&m>g&&(i=g,g=m,m=i);var A=Kt(l,m),y=Kt(l,g);if(A&&y&&(1!==h.rangeCount||h.anchorNode!==A.node||h.anchorOffset!==A.offset||h.focusNode!==y.node||h.focusOffset!==y.offset)){var v=d.createRange();v.setStart(A.node,A.offset),h.removeAllRanges(),m>g?(h.addRange(v),h.extend(y.node,y.offset)):(v.setEnd(y.node,y.offset),h.addRange(v))}}}}for(d=[],h=l;h=h.parentNode;)1===h.nodeType&&d.push({element:h,left:h.scrollLeft,top:h.scrollTop});for("function"==typeof l.focus&&l.focus(),l=0;l<d.length;l++){var b=d[l];b.element.scrollLeft=b.left,b.element.scrollTop=b.top}}Jd=!!ed,nd=ed=null}finally{nu=o,M.p=r,T.T=t}}e.current=n,wu=2}}function rc(){if(2===wu){wu=0;var e=_u,n=ku,t=!!(8772&n.flags);if(8772&n.subtreeFlags||t){t=T.T,T.T=null;var r=M.p;M.p=2;var o=nu;nu|=4;try{Cs(e,n.alternate,n)}finally{nu=o,M.p=r,T.T=t}}wu=3}}function oc(){if(4===wu||3===wu){wu=0,J();var e=_u,n=ku,t=Bu,r=Nu;10256&n.subtreeFlags||10256&n.flags?wu=5:(wu=0,ku=_u=null,ac(e,e.pendingLanes));var o=e.pendingLanes;if(0===o&&(Cu=null),Se(t),n=n.stateNode,ce&&"function"==typeof ce.onCommitFiberRoot)try{ce.onCommitFiberRoot(ue,n,void 0,!(128&~n.current.flags))}catch(e){}if(null!==r){n=T.T,o=M.p,M.p=2,T.T=null;try{for(var a=e.onRecoverableError,i=0;i<r.length;i++){var l=r[i];a(l.value,{componentStack:l.stack})}}finally{T.T=n,M.p=o}}3&Bu&&ic(),xc(e),o=e.pendingLanes,4194090&t&&42&o?e===Pu?ju++:(ju=0,Pu=e):ju=0,Ec(0,!1)}}function ac(e,n){0===(e.pooledCacheLanes&=n)&&null!=(n=e.pooledCache)&&(e.pooledCache=null,Mo(n))}function ic(e){return tc(),rc(),oc(),lc()}function lc(){if(5!==wu)return!1;var e=_u,n=Su;Su=0;var t=Se(Bu),r=T.T,o=M.p;try{M.p=32>t?32:t,T.T=null,t=zu,zu=null;var a=_u,l=Bu;if(wu=0,ku=_u=null,Bu=0,6&nu)throw Error(i(331));var s=nu;if(nu|=4,Gs(a.current),$s(a,a.current,l,t),nu=s,Ec(0,!1),ce&&"function"==typeof ce.onPostCommitFiberRoot)try{ce.onPostCommitFiberRoot(ue,a)}catch(e){}return!0}finally{M.p=o,T.T=r,ac(e,n)}}function sc(e,n,t){n=Cr(t,n),null!==(e=aa(e,n=El(e.stateNode,n,2),2))&&(we(e,2),xc(e))}function uc(e,n,t){if(3===e.tag)sc(e,e,t);else for(;null!==n;){if(3===n.tag){sc(n,e,t);break}if(1===n.tag){var r=n.stateNode;if("function"==typeof n.type.getDerivedStateFromError||"function"==typeof r.componentDidCatch&&(null===Cu||!Cu.has(r))){e=Cr(t,e),null!==(r=aa(n,t=Cl(2),2))&&(wl(t,r,n,e),we(r,2),xc(r));break}}n=n.return}}function cc(e,n,t){var r=e.pingCache;if(null===r){r=e.pingCache=new eu;var o=new Set;r.set(n,o)}else void 0===(o=r.get(n))&&(o=new Set,r.set(n,o));o.has(t)||(uu=!0,o.add(t),e=dc.bind(null,e,n,t),n.then(e,e))}function dc(e,n,t){var r=e.pingCache;null!==r&&r.delete(n),e.pingedLanes|=e.suspendedLanes&t,e.warmLanes&=~t,tu===e&&(ou&t)===t&&(4===du||3===du&&(62914560&ou)===ou&&300>ee()-bu?!(2&nu)&&$u(e,0):pu|=t,gu===ou&&(gu=0)),xc(e)}function fc(e,n){0===n&&(n=Ee()),null!==(e=Nr(e,n))&&(we(e,n),xc(e))}function hc(e){var n=e.memoizedState,t=0;null!==n&&(t=n.retryLane),fc(e,t)}function pc(e,n){var t=0;switch(e.tag){case 13:var r=e.stateNode,o=e.memoizedState;null!==o&&(t=o.retryLane);break;case 19:r=e.stateNode;break;case 22:r=e.stateNode._retryCache;break;default:throw Error(i(314))}null!==r&&r.delete(n),fc(e,t)}var mc=null,gc=null,Ac=!1,yc=!1,vc=!1,bc=0;function xc(e){e!==gc&&null===e.next&&(null===gc?mc=gc=e:gc=gc.next=e),yc=!0,Ac||(Ac=!0,cd(function(){6&nu?G(te,Cc):wc()}))}function Ec(e,n){if(!vc&&yc){vc=!0;do{for(var t=!1,r=mc;null!==r;){if(!n)if(0!==e){var o=r.pendingLanes;if(0===o)var a=0;else{var i=r.suspendedLanes,l=r.pingedLanes;a=(1<<31-fe(42|e)+1)-1,a=201326741&(a&=o&~(i&~l))?201326741&a|1:a?2|a:0}0!==a&&(t=!0,Bc(r,a))}else a=ou,!(3&(a=ye(r,r===tu?a:0,null!==r.cancelPendingCommit||-1!==r.timeoutHandle)))||ve(r,a)||(t=!0,Bc(r,a));r=r.next}}while(t);vc=!1}}function Cc(){wc()}function wc(){yc=Ac=!1;var e,n=0;0!==bc&&(((e=window.event)&&"popstate"===e.type?e!==id&&(id=e,!0):(id=null,!1))&&(n=bc),bc=0);for(var t=ee(),r=null,o=mc;null!==o;){var a=o.next,i=_c(o,t);0===i?(o.next=null,null===r?mc=a:r.next=a,null===a&&(gc=r)):(r=o,(0!==n||3&i)&&(yc=!0)),o=a}Ec(n,!1)}function _c(e,n){for(var t=e.suspendedLanes,r=e.pingedLanes,o=e.expirationTimes,a=-62914561&e.pendingLanes;0<a;){var i=31-fe(a),l=1<<i,s=o[i];-1===s?0!==(l&t)&&0===(l&r)||(o[i]=be(l,n)):s<=n&&(e.expiredLanes|=l),a&=~l}if(t=ou,t=ye(e,e===(n=tu)?t:0,null!==e.cancelPendingCommit||-1!==e.timeoutHandle),r=e.callbackNode,0===t||e===n&&(2===au||9===au)||null!==e.cancelPendingCommit)return null!==r&&null!==r&&K(r),e.callbackNode=null,e.callbackPriority=0;if(!(3&t)||ve(e,t)){if((n=t&-t)===e.callbackPriority)return n;switch(null!==r&&K(r),Se(t)){case 2:case 8:t=re;break;case 32:default:t=oe;break;case 268435456:t=ie}return r=kc.bind(null,e),t=G(t,r),e.callbackPriority=n,e.callbackNode=t,n}return null!==r&&null!==r&&K(r),e.callbackPriority=2,e.callbackNode=null,2}function kc(e,n){if(0!==wu&&5!==wu)return e.callbackNode=null,e.callbackPriority=0,null;var t=e.callbackNode;if(ic()&&e.callbackNode!==t)return null;var r=ou;return 0===(r=ye(e,e===tu?r:0,null!==e.cancelPendingCommit||-1!==e.timeoutHandle))?null:(Ru(e,r,n),_c(e,ee()),null!=e.callbackNode&&e.callbackNode===t?kc.bind(null,e):null)}function Bc(e,n){if(ic())return null;Ru(e,n,!0)}function Sc(){return 0===bc&&(bc=xe()),bc}function zc(e){return null==e||"symbol"==typeof e||"boolean"==typeof e?null:"function"==typeof e?e:zn(""+e)}function Nc(e,n){var t=n.ownerDocument.createElement("input");return t.name=n.name,t.value=n.value,e.id&&t.setAttribute("form",e.id),n.parentNode.insertBefore(t,n),e=new FormData(e),t.parentNode.removeChild(t),e}for(var jc=0;jc<br.length;jc++){var Pc=br[jc];xr(Pc.toLowerCase(),"on"+(Pc[0].toUpperCase()+Pc.slice(1)))}xr(fr,"onAnimationEnd"),xr(hr,"onAnimationIteration"),xr(pr,"onAnimationStart"),xr("dblclick","onDoubleClick"),xr("focusin","onFocus"),xr("focusout","onBlur"),xr(mr,"onTransitionRun"),xr(gr,"onTransitionStart"),xr(Ar,"onTransitionCancel"),xr(yr,"onTransitionEnd"),Xe("onMouseEnter",["mouseout","mouseover"]),Xe("onMouseLeave",["mouseout","mouseover"]),Xe("onPointerEnter",["pointerout","pointerover"]),Xe("onPointerLeave",["pointerout","pointerover"]),Ve("onChange","change click focusin focusout input keydown keyup selectionchange".split(" ")),Ve("onSelect","focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" ")),Ve("onBeforeInput",["compositionend","keypress","textInput","paste"]),Ve("onCompositionEnd","compositionend focusout keydown keypress keyup mousedown".split(" ")),Ve("onCompositionStart","compositionstart focusout keydown keypress keyup mousedown".split(" ")),Ve("onCompositionUpdate","compositionupdate focusout keydown keypress keyup mousedown".split(" "));var Tc="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange resize seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),Mc=new Set("beforetoggle cancel close invalid load scroll scrollend toggle".split(" ").concat(Tc));function Oc(e,n){n=!!(4&n);for(var t=0;t<e.length;t++){var r=e[t],o=r.event;r=r.listeners;e:{var a=void 0;if(n)for(var i=r.length-1;0<=i;i--){var l=r[i],s=l.instance,u=l.currentTarget;if(l=l.listener,s!==a&&o.isPropagationStopped())break e;a=l,o.currentTarget=u;try{a(o)}catch(e){gl(e)}o.currentTarget=null,a=s}else for(i=0;i<r.length;i++){if(s=(l=r[i]).instance,u=l.currentTarget,l=l.listener,s!==a&&o.isPropagationStopped())break e;a=l,o.currentTarget=u;try{a(o)}catch(e){gl(e)}o.currentTarget=null,a=s}}}}function Rc(e,n){var t=n[Me];void 0===t&&(t=n[Me]=new Set);var r=e+"__bubble";t.has(r)||(Fc(n,e,2,!1),t.add(r))}function Ic(e,n,t){var r=0;n&&(r|=4),Fc(t,e,r,n)}var Lc="_reactListening"+Math.random().toString(36).slice(2);function Dc(e){if(!e[Lc]){e[Lc]=!0,We.forEach(function(n){"selectionchange"!==n&&(Mc.has(n)||Ic(n,!1,e),Ic(n,!0,e))});var n=9===e.nodeType?e:e.ownerDocument;null===n||n[Lc]||(n[Lc]=!0,Ic("selectionchange",!1,n))}}function Fc(e,n,t,r){switch(lf(n)){case 2:var o=ef;break;case 8:o=nf;break;default:o=tf}t=o.bind(null,n,t,e),o=void 0,!Dn||"touchstart"!==n&&"touchmove"!==n&&"wheel"!==n||(o=!0),r?void 0!==o?e.addEventListener(n,t,{capture:!0,passive:o}):e.addEventListener(n,t,!0):void 0!==o?e.addEventListener(n,t,{passive:o}):e.addEventListener(n,t,!1)}function Uc(e,n,t,r,o){var a=r;if(!(1&n||2&n||null===r))e:for(;;){if(null===r)return;var i=r.tag;if(3===i||4===i){var s=r.stateNode.containerInfo;if(s===o)break;if(4===i)for(i=r.return;null!==i;){var u=i.tag;if((3===u||4===u)&&i.stateNode.containerInfo===o)return;i=i.return}for(;null!==s;){if(null===(i=Fe(s)))return;if(5===(u=i.tag)||6===u||26===u||27===u){r=a=i;continue e}s=s.parentNode}}r=r.return}Rn(function(){var r=a,o=jn(t),i=[];e:{var s=vr.get(e);if(void 0!==s){var u=Jn,c=e;switch(e){case"keypress":if(0===Wn(t))break e;case"keydown":case"keyup":u=pt;break;case"focusin":c="focus",u=at;break;case"focusout":c="blur",u=at;break;case"beforeblur":case"afterblur":u=at;break;case"click":if(2===t.button)break e;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":u=rt;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":u=ot;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":u=gt;break;case fr:case hr:case pr:u=it;break;case yr:u=At;break;case"scroll":case"scrollend":u=nt;break;case"wheel":u=yt;break;case"copy":case"cut":case"paste":u=lt;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":u=mt;break;case"toggle":case"beforetoggle":u=vt}var d=!!(4&n),f=!d&&("scroll"===e||"scrollend"===e),h=d?null!==s?s+"Capture":null:s;d=[];for(var p,m=r;null!==m;){var g=m;if(p=g.stateNode,5!==(g=g.tag)&&26!==g&&27!==g||null===p||null===h||null!=(g=In(m,h))&&d.push($c(m,g,p)),f)break;m=m.return}0<d.length&&(s=new u(s,c,null,t,o),i.push({event:s,listeners:d}))}}if(!(7&n)){if(u="mouseout"===e||"pointerout"===e,(!(s="mouseover"===e||"pointerover"===e)||t===Nn||!(c=t.relatedTarget||t.fromElement)||!Fe(c)&&!c[Te])&&(u||s)&&(s=o.window===o?o:(s=o.ownerDocument)?s.defaultView||s.parentWindow:window,u?(u=r,null!==(c=(c=t.relatedTarget||t.toElement)?Fe(c):null)&&(f=l(c),d=c.tag,c!==f||5!==d&&27!==d&&6!==d)&&(c=null)):(u=null,c=r),u!==c)){if(d=rt,g="onMouseLeave",h="onMouseEnter",m="mouse","pointerout"!==e&&"pointerover"!==e||(d=mt,g="onPointerLeave",h="onPointerEnter",m="pointer"),f=null==u?s:$e(u),p=null==c?s:$e(c),(s=new d(g,m+"leave",u,t,o)).target=f,s.relatedTarget=p,g=null,Fe(o)===r&&((d=new d(h,m+"enter",c,t,o)).target=p,d.relatedTarget=f,g=d),f=g,u&&c)e:{for(h=c,m=0,p=d=u;p;p=Hc(p))m++;for(p=0,g=h;g;g=Hc(g))p++;for(;0<m-p;)d=Hc(d),m--;for(;0<p-m;)h=Hc(h),p--;for(;m--;){if(d===h||null!==h&&d===h.alternate)break e;d=Hc(d),h=Hc(h)}d=null}else d=null;null!==u&&Wc(i,s,u,d,!1),null!==c&&null!==f&&Wc(i,f,c,d,!0)}if("select"===(u=(s=r?$e(r):window).nodeName&&s.nodeName.toLowerCase())||"input"===u&&"file"===s.type)var A=It;else if(jt(s))if(Lt)A=Vt;else{A=Wt;var y=Ht}else!(u=s.nodeName)||"input"!==u.toLowerCase()||"checkbox"!==s.type&&"radio"!==s.type?r&&kn(r.elementType)&&(A=It):A=Yt;switch(A&&(A=A(e,r))?Pt(i,A,t,o):(y&&y(e,s,r),"focusout"===e&&r&&"number"===s.type&&null!=r.memoizedProps.value&&yn(s,"number",s.value)),y=r?$e(r):window,e){case"focusin":(jt(y)||"true"===y.contentEditable)&&(tr=y,rr=r,or=null);break;case"focusout":or=rr=tr=null;break;case"mousedown":ar=!0;break;case"contextmenu":case"mouseup":case"dragend":ar=!1,ir(i,t,o);break;case"selectionchange":if(nr)break;case"keydown":case"keyup":ir(i,t,o)}var v;if(xt)e:{switch(e){case"compositionstart":var b="onCompositionStart";break e;case"compositionend":b="onCompositionEnd";break e;case"compositionupdate":b="onCompositionUpdate";break e}b=void 0}else zt?Bt(e,t)&&(b="onCompositionEnd"):"keydown"===e&&229===t.keyCode&&(b="onCompositionStart");b&&(wt&&"ko"!==t.locale&&(zt||"onCompositionStart"!==b?"onCompositionEnd"===b&&zt&&(v=Hn()):($n="value"in(Un=o)?Un.value:Un.textContent,zt=!0)),0<(y=qc(r,b)).length&&(b=new st(b,e,null,t,o),i.push({event:b,listeners:y}),(v||null!==(v=St(t)))&&(b.data=v))),(v=Ct?function(e,n){switch(e){case"compositionend":return St(n);case"keypress":return 32!==n.which?null:(kt=!0,_t);case"textInput":return(e=n.data)===_t&&kt?null:e;default:return null}}(e,t):function(e,n){if(zt)return"compositionend"===e||!xt&&Bt(e,n)?(e=Hn(),qn=$n=Un=null,zt=!1,e):null;switch(e){case"paste":default:return null;case"keypress":if(!(n.ctrlKey||n.altKey||n.metaKey)||n.ctrlKey&&n.altKey){if(n.char&&1<n.char.length)return n.char;if(n.which)return String.fromCharCode(n.which)}return null;case"compositionend":return wt&&"ko"!==n.locale?null:n.data}}(e,t))&&0<(b=qc(r,"onBeforeInput")).length&&(y=new st("onBeforeInput","beforeinput",null,t,o),i.push({event:y,listeners:b}),y.data=v),function(e,n,t,r,o){if("submit"===n&&t&&t.stateNode===o){var a=zc((o[Pe]||null).action),i=r.submitter;i&&null!==(n=(n=i[Pe]||null)?zc(n.formAction):i.getAttribute("formAction"))&&(a=n,i=null);var l=new Jn("action","action",null,r,o);e.push({event:l,listeners:[{instance:null,listener:function(){if(r.defaultPrevented){if(0!==bc){var e=i?Nc(o,i):new FormData(o);Ni(t,{pending:!0,data:e,method:o.method,action:a},null,e)}}else"function"==typeof a&&(l.preventDefault(),e=i?Nc(o,i):new FormData(o),Ni(t,{pending:!0,data:e,method:o.method,action:a},a,e))},currentTarget:o}]})}}(i,e,r,t,o)}Oc(i,n)})}function $c(e,n,t){return{instance:e,listener:n,currentTarget:t}}function qc(e,n){for(var t=n+"Capture",r=[];null!==e;){var o=e,a=o.stateNode;if(5!==(o=o.tag)&&26!==o&&27!==o||null===a||(null!=(o=In(e,t))&&r.unshift($c(e,o,a)),null!=(o=In(e,n))&&r.push($c(e,o,a))),3===e.tag)return r;e=e.return}return[]}function Hc(e){if(null===e)return null;do{e=e.return}while(e&&5!==e.tag&&27!==e.tag);return e||null}function Wc(e,n,t,r,o){for(var a=n._reactName,i=[];null!==t&&t!==r;){var l=t,s=l.alternate,u=l.stateNode;if(l=l.tag,null!==s&&s===r)break;5!==l&&26!==l&&27!==l||null===u||(s=u,o?null!=(u=In(t,a))&&i.unshift($c(t,u,s)):o||null!=(u=In(t,a))&&i.push($c(t,u,s))),t=t.return}0!==i.length&&e.push({event:n,listeners:i})}var Yc=/\r\n?/g,Vc=/\u0000|\uFFFD/g;function Xc(e){return("string"==typeof e?e:""+e).replace(Yc,"\n").replace(Vc,"")}function Qc(e,n){return n=Xc(n),Xc(e)===n}function Gc(){}function Kc(e,n,t,r,o,a){switch(t){case"children":"string"==typeof r?"body"===n||"textarea"===n&&""===r||En(e,r):("number"==typeof r||"bigint"==typeof r)&&"body"!==n&&En(e,""+r);break;case"className":nn(e,"class",r);break;case"tabIndex":nn(e,"tabindex",r);break;case"dir":case"role":case"viewBox":case"width":case"height":nn(e,t,r);break;case"style":_n(e,r,a);break;case"data":if("object"!==n){nn(e,"data",r);break}case"src":case"href":if(""===r&&("a"!==n||"href"!==t)){e.removeAttribute(t);break}if(null==r||"function"==typeof r||"symbol"==typeof r||"boolean"==typeof r){e.removeAttribute(t);break}r=zn(""+r),e.setAttribute(t,r);break;case"action":case"formAction":if("function"==typeof r){e.setAttribute(t,"javascript:throw new Error('A React form was unexpectedly submitted. If you called form.submit() manually, consider using form.requestSubmit() instead. If you\\'re trying to use event.stopPropagation() in a submit event handler, consider also calling event.preventDefault().')");break}if("function"==typeof a&&("formAction"===t?("input"!==n&&Kc(e,n,"name",o.name,o,null),Kc(e,n,"formEncType",o.formEncType,o,null),Kc(e,n,"formMethod",o.formMethod,o,null),Kc(e,n,"formTarget",o.formTarget,o,null)):(Kc(e,n,"encType",o.encType,o,null),Kc(e,n,"method",o.method,o,null),Kc(e,n,"target",o.target,o,null))),null==r||"symbol"==typeof r||"boolean"==typeof r){e.removeAttribute(t);break}r=zn(""+r),e.setAttribute(t,r);break;case"onClick":null!=r&&(e.onclick=Gc);break;case"onScroll":null!=r&&Rc("scroll",e);break;case"onScrollEnd":null!=r&&Rc("scrollend",e);break;case"dangerouslySetInnerHTML":if(null!=r){if("object"!=typeof r||!("__html"in r))throw Error(i(61));if(null!=(t=r.__html)){if(null!=o.children)throw Error(i(60));e.innerHTML=t}}break;case"multiple":e.multiple=r&&"function"!=typeof r&&"symbol"!=typeof r;break;case"muted":e.muted=r&&"function"!=typeof r&&"symbol"!=typeof r;break;case"suppressContentEditableWarning":case"suppressHydrationWarning":case"defaultValue":case"defaultChecked":case"innerHTML":case"ref":case"autoFocus":break;case"xlinkHref":if(null==r||"function"==typeof r||"boolean"==typeof r||"symbol"==typeof r){e.removeAttribute("xlink:href");break}t=zn(""+r),e.setAttributeNS("http://www.w3.org/1999/xlink","xlink:href",t);break;case"contentEditable":case"spellCheck":case"draggable":case"value":case"autoReverse":case"externalResourcesRequired":case"focusable":case"preserveAlpha":null!=r&&"function"!=typeof r&&"symbol"!=typeof r?e.setAttribute(t,""+r):e.removeAttribute(t);break;case"inert":case"allowFullScreen":case"async":case"autoPlay":case"controls":case"default":case"defer":case"disabled":case"disablePictureInPicture":case"disableRemotePlayback":case"formNoValidate":case"hidden":case"loop":case"noModule":case"noValidate":case"open":case"playsInline":case"readOnly":case"required":case"reversed":case"scoped":case"seamless":case"itemScope":r&&"function"!=typeof r&&"symbol"!=typeof r?e.setAttribute(t,""):e.removeAttribute(t);break;case"capture":case"download":!0===r?e.setAttribute(t,""):!1!==r&&null!=r&&"function"!=typeof r&&"symbol"!=typeof r?e.setAttribute(t,r):e.removeAttribute(t);break;case"cols":case"rows":case"size":case"span":null!=r&&"function"!=typeof r&&"symbol"!=typeof r&&!isNaN(r)&&1<=r?e.setAttribute(t,r):e.removeAttribute(t);break;case"rowSpan":case"start":null==r||"function"==typeof r||"symbol"==typeof r||isNaN(r)?e.removeAttribute(t):e.setAttribute(t,r);break;case"popover":Rc("beforetoggle",e),Rc("toggle",e),en(e,"popover",r);break;case"xlinkActuate":tn(e,"http://www.w3.org/1999/xlink","xlink:actuate",r);break;case"xlinkArcrole":tn(e,"http://www.w3.org/1999/xlink","xlink:arcrole",r);break;case"xlinkRole":tn(e,"http://www.w3.org/1999/xlink","xlink:role",r);break;case"xlinkShow":tn(e,"http://www.w3.org/1999/xlink","xlink:show",r);break;case"xlinkTitle":tn(e,"http://www.w3.org/1999/xlink","xlink:title",r);break;case"xlinkType":tn(e,"http://www.w3.org/1999/xlink","xlink:type",r);break;case"xmlBase":tn(e,"http://www.w3.org/XML/1998/namespace","xml:base",r);break;case"xmlLang":tn(e,"http://www.w3.org/XML/1998/namespace","xml:lang",r);break;case"xmlSpace":tn(e,"http://www.w3.org/XML/1998/namespace","xml:space",r);break;case"is":en(e,"is",r);break;case"innerText":case"textContent":break;default:(!(2<t.length)||"o"!==t[0]&&"O"!==t[0]||"n"!==t[1]&&"N"!==t[1])&&en(e,t=Bn.get(t)||t,r)}}function Zc(e,n,t,r,o,a){switch(t){case"style":_n(e,r,a);break;case"dangerouslySetInnerHTML":if(null!=r){if("object"!=typeof r||!("__html"in r))throw Error(i(61));if(null!=(t=r.__html)){if(null!=o.children)throw Error(i(60));e.innerHTML=t}}break;case"children":"string"==typeof r?En(e,r):("number"==typeof r||"bigint"==typeof r)&&En(e,""+r);break;case"onScroll":null!=r&&Rc("scroll",e);break;case"onScrollEnd":null!=r&&Rc("scrollend",e);break;case"onClick":null!=r&&(e.onclick=Gc);break;case"suppressContentEditableWarning":case"suppressHydrationWarning":case"innerHTML":case"ref":case"innerText":case"textContent":break;default:Ye.hasOwnProperty(t)||("o"!==t[0]||"n"!==t[1]||(o=t.endsWith("Capture"),n=t.slice(2,o?t.length-7:void 0),"function"==typeof(a=null!=(a=e[Pe]||null)?a[t]:null)&&e.removeEventListener(n,a,o),"function"!=typeof r)?t in e?e[t]=r:!0===r?e.setAttribute(t,""):en(e,t,r):("function"!=typeof a&&null!==a&&(t in e?e[t]=null:e.hasAttribute(t)&&e.removeAttribute(t)),e.addEventListener(n,r,o)))}}function Jc(e,n,t){switch(n){case"div":case"span":case"svg":case"path":case"a":case"g":case"p":case"li":break;case"img":Rc("error",e),Rc("load",e);var r,o=!1,a=!1;for(r in t)if(t.hasOwnProperty(r)){var l=t[r];if(null!=l)switch(r){case"src":o=!0;break;case"srcSet":a=!0;break;case"children":case"dangerouslySetInnerHTML":throw Error(i(137,n));default:Kc(e,n,r,l,t,null)}}return a&&Kc(e,n,"srcSet",t.srcSet,t,null),void(o&&Kc(e,n,"src",t.src,t,null));case"input":Rc("invalid",e);var s=r=l=a=null,u=null,c=null;for(o in t)if(t.hasOwnProperty(o)){var d=t[o];if(null!=d)switch(o){case"name":a=d;break;case"type":l=d;break;case"checked":u=d;break;case"defaultChecked":c=d;break;case"value":r=d;break;case"defaultValue":s=d;break;case"children":case"dangerouslySetInnerHTML":if(null!=d)throw Error(i(137,n));break;default:Kc(e,n,o,d,t,null)}}return An(e,r,s,u,c,l,a,!1),void dn(e);case"select":for(a in Rc("invalid",e),o=l=r=null,t)if(t.hasOwnProperty(a)&&null!=(s=t[a]))switch(a){case"value":r=s;break;case"defaultValue":l=s;break;case"multiple":o=s;default:Kc(e,n,a,s,t,null)}return n=r,t=l,e.multiple=!!o,void(null!=n?vn(e,!!o,n,!1):null!=t&&vn(e,!!o,t,!0));case"textarea":for(l in Rc("invalid",e),r=a=o=null,t)if(t.hasOwnProperty(l)&&null!=(s=t[l]))switch(l){case"value":o=s;break;case"defaultValue":a=s;break;case"children":r=s;break;case"dangerouslySetInnerHTML":if(null!=s)throw Error(i(91));break;default:Kc(e,n,l,s,t,null)}return xn(e,o,a,r),void dn(e);case"option":for(u in t)t.hasOwnProperty(u)&&null!=(o=t[u])&&("selected"===u?e.selected=o&&"function"!=typeof o&&"symbol"!=typeof o:Kc(e,n,u,o,t,null));return;case"dialog":Rc("beforetoggle",e),Rc("toggle",e),Rc("cancel",e),Rc("close",e);break;case"iframe":case"object":Rc("load",e);break;case"video":case"audio":for(o=0;o<Tc.length;o++)Rc(Tc[o],e);break;case"image":Rc("error",e),Rc("load",e);break;case"details":Rc("toggle",e);break;case"embed":case"source":case"link":Rc("error",e),Rc("load",e);case"area":case"base":case"br":case"col":case"hr":case"keygen":case"meta":case"param":case"track":case"wbr":case"menuitem":for(c in t)if(t.hasOwnProperty(c)&&null!=(o=t[c]))switch(c){case"children":case"dangerouslySetInnerHTML":throw Error(i(137,n));default:Kc(e,n,c,o,t,null)}return;default:if(kn(n)){for(d in t)t.hasOwnProperty(d)&&void 0!==(o=t[d])&&Zc(e,n,d,o,t,void 0);return}}for(s in t)t.hasOwnProperty(s)&&null!=(o=t[s])&&Kc(e,n,s,o,t,null)}var ed=null,nd=null;function td(e){return 9===e.nodeType?e:e.ownerDocument}function rd(e){switch(e){case"http://www.w3.org/2000/svg":return 1;case"http://www.w3.org/1998/Math/MathML":return 2;default:return 0}}function od(e,n){if(0===e)switch(n){case"svg":return 1;case"math":return 2;default:return 0}return 1===e&&"foreignObject"===n?0:e}function ad(e,n){return"textarea"===e||"noscript"===e||"string"==typeof n.children||"number"==typeof n.children||"bigint"==typeof n.children||"object"==typeof n.dangerouslySetInnerHTML&&null!==n.dangerouslySetInnerHTML&&null!=n.dangerouslySetInnerHTML.__html}var id=null,ld="function"==typeof setTimeout?setTimeout:void 0,sd="function"==typeof clearTimeout?clearTimeout:void 0,ud="function"==typeof Promise?Promise:void 0,cd="function"==typeof queueMicrotask?queueMicrotask:void 0!==ud?function(e){return ud.resolve(null).then(e).catch(dd)}:ld;function dd(e){setTimeout(function(){throw e})}function fd(e){return"head"===e}function hd(e,n){var t=n,r=0,o=0;do{var a=t.nextSibling;if(e.removeChild(t),a&&8===a.nodeType)if("/$"===(t=a.data)){if(0<r&&8>r){t=r;var i=e.ownerDocument;if(1&t&&bd(i.documentElement),2&t&&bd(i.body),4&t)for(bd(t=i.head),i=t.firstChild;i;){var l=i.nextSibling,s=i.nodeName;i[Le]||"SCRIPT"===s||"STYLE"===s||"LINK"===s&&"stylesheet"===i.rel.toLowerCase()||t.removeChild(i),i=l}}if(0===o)return e.removeChild(a),void _f(n);o--}else"$"===t||"$?"===t||"$!"===t?o++:r=t.charCodeAt(0)-48;else r=0;t=a}while(t);_f(n)}function pd(e){var n=e.firstChild;for(n&&10===n.nodeType&&(n=n.nextSibling);n;){var t=n;switch(n=n.nextSibling,t.nodeName){case"HTML":case"HEAD":case"BODY":pd(t),De(t);continue;case"SCRIPT":case"STYLE":continue;case"LINK":if("stylesheet"===t.rel.toLowerCase())continue}e.removeChild(t)}}function md(e){return"$!"===e.data||"$?"===e.data&&"complete"===e.ownerDocument.readyState}function gd(e){for(;null!=e;e=e.nextSibling){var n=e.nodeType;if(1===n||3===n)break;if(8===n){if("$"===(n=e.data)||"$!"===n||"$?"===n||"F!"===n||"F"===n)break;if("/$"===n)return null}}return e}var Ad=null;function yd(e){e=e.previousSibling;for(var n=0;e;){if(8===e.nodeType){var t=e.data;if("$"===t||"$!"===t||"$?"===t){if(0===n)return e;n--}else"/$"===t&&n++}e=e.previousSibling}return null}function vd(e,n,t){switch(n=td(t),e){case"html":if(!(e=n.documentElement))throw Error(i(452));return e;case"head":if(!(e=n.head))throw Error(i(453));return e;case"body":if(!(e=n.body))throw Error(i(454));return e;default:throw Error(i(451))}}function bd(e){for(var n=e.attributes;n.length;)e.removeAttributeNode(n[0]);De(e)}var xd=new Map,Ed=new Set;function Cd(e){return"function"==typeof e.getRootNode?e.getRootNode():9===e.nodeType?e:e.ownerDocument}var wd=M.d;M.d={f:function(){var e=wd.f(),n=Fu();return e||n},r:function(e){var n=Ue(e);null!==n&&5===n.tag&&"form"===n.type?Pi(n):wd.r(e)},D:function(e){wd.D(e),kd("dns-prefetch",e,null)},C:function(e,n){wd.C(e,n),kd("preconnect",e,n)},L:function(e,n,t){wd.L(e,n,t);var r=_d;if(r&&e&&n){var o='link[rel="preload"][as="'+mn(n)+'"]';"image"===n&&t&&t.imageSrcSet?(o+='[imagesrcset="'+mn(t.imageSrcSet)+'"]',"string"==typeof t.imageSizes&&(o+='[imagesizes="'+mn(t.imageSizes)+'"]')):o+='[href="'+mn(e)+'"]';var a=o;switch(n){case"style":a=Sd(e);break;case"script":a=jd(e)}xd.has(a)||(e=d({rel:"preload",href:"image"===n&&t&&t.imageSrcSet?void 0:e,as:n},t),xd.set(a,e),null!==r.querySelector(o)||"style"===n&&r.querySelector(zd(a))||"script"===n&&r.querySelector(Pd(a))||(Jc(n=r.createElement("link"),"link",e),He(n),r.head.appendChild(n)))}},m:function(e,n){wd.m(e,n);var t=_d;if(t&&e){var r=n&&"string"==typeof n.as?n.as:"script",o='link[rel="modulepreload"][as="'+mn(r)+'"][href="'+mn(e)+'"]',a=o;switch(r){case"audioworklet":case"paintworklet":case"serviceworker":case"sharedworker":case"worker":case"script":a=jd(e)}if(!xd.has(a)&&(e=d({rel:"modulepreload",href:e},n),xd.set(a,e),null===t.querySelector(o))){switch(r){case"audioworklet":case"paintworklet":case"serviceworker":case"sharedworker":case"worker":case"script":if(t.querySelector(Pd(a)))return}Jc(r=t.createElement("link"),"link",e),He(r),t.head.appendChild(r)}}},X:function(e,n){wd.X(e,n);var t=_d;if(t&&e){var r=qe(t).hoistableScripts,o=jd(e),a=r.get(o);a||((a=t.querySelector(Pd(o)))||(e=d({src:e,async:!0},n),(n=xd.get(o))&&Rd(e,n),He(a=t.createElement("script")),Jc(a,"link",e),t.head.appendChild(a)),a={type:"script",instance:a,count:1,state:null},r.set(o,a))}},S:function(e,n,t){wd.S(e,n,t);var r=_d;if(r&&e){var o=qe(r).hoistableStyles,a=Sd(e);n=n||"default";var i=o.get(a);if(!i){var l={loading:0,preload:null};if(i=r.querySelector(zd(a)))l.loading=5;else{e=d({rel:"stylesheet",href:e,"data-precedence":n},t),(t=xd.get(a))&&Od(e,t);var s=i=r.createElement("link");He(s),Jc(s,"link",e),s._p=new Promise(function(e,n){s.onload=e,s.onerror=n}),s.addEventListener("load",function(){l.loading|=1}),s.addEventListener("error",function(){l.loading|=2}),l.loading|=4,Md(i,n,r)}i={type:"stylesheet",instance:i,count:1,state:l},o.set(a,i)}}},M:function(e,n){wd.M(e,n);var t=_d;if(t&&e){var r=qe(t).hoistableScripts,o=jd(e),a=r.get(o);a||((a=t.querySelector(Pd(o)))||(e=d({src:e,async:!0,type:"module"},n),(n=xd.get(o))&&Rd(e,n),He(a=t.createElement("script")),Jc(a,"link",e),t.head.appendChild(a)),a={type:"script",instance:a,count:1,state:null},r.set(o,a))}}};var _d="undefined"==typeof document?null:document;function kd(e,n,t){var r=_d;if(r&&"string"==typeof n&&n){var o=mn(n);o='link[rel="'+e+'"][href="'+o+'"]',"string"==typeof t&&(o+='[crossorigin="'+t+'"]'),Ed.has(o)||(Ed.add(o),e={rel:e,crossOrigin:t,href:n},null===r.querySelector(o)&&(Jc(n=r.createElement("link"),"link",e),He(n),r.head.appendChild(n)))}}function Bd(e,n,t,r){var o,a,l,s,u=(u=q.current)?Cd(u):null;if(!u)throw Error(i(446));switch(e){case"meta":case"title":return null;case"style":return"string"==typeof t.precedence&&"string"==typeof t.href?(n=Sd(t.href),(r=(t=qe(u).hoistableStyles).get(n))||(r={type:"style",instance:null,count:0,state:null},t.set(n,r)),r):{type:"void",instance:null,count:0,state:null};case"link":if("stylesheet"===t.rel&&"string"==typeof t.href&&"string"==typeof t.precedence){e=Sd(t.href);var c=qe(u).hoistableStyles,d=c.get(e);if(d||(u=u.ownerDocument||u,d={type:"stylesheet",instance:null,count:0,state:{loading:0,preload:null}},c.set(e,d),(c=u.querySelector(zd(e)))&&!c._p&&(d.instance=c,d.state.loading=5),xd.has(e)||(t={rel:"preload",as:"style",href:t.href,crossOrigin:t.crossOrigin,integrity:t.integrity,media:t.media,hrefLang:t.hrefLang,referrerPolicy:t.referrerPolicy},xd.set(e,t),c||(o=u,a=e,l=t,s=d.state,o.querySelector('link[rel="preload"][as="style"]['+a+"]")?s.loading=1:(a=o.createElement("link"),s.preload=a,a.addEventListener("load",function(){return s.loading|=1}),a.addEventListener("error",function(){return s.loading|=2}),Jc(a,"link",l),He(a),o.head.appendChild(a))))),n&&null===r)throw Error(i(528,""));return d}if(n&&null!==r)throw Error(i(529,""));return null;case"script":return n=t.async,"string"==typeof(t=t.src)&&n&&"function"!=typeof n&&"symbol"!=typeof n?(n=jd(t),(r=(t=qe(u).hoistableScripts).get(n))||(r={type:"script",instance:null,count:0,state:null},t.set(n,r)),r):{type:"void",instance:null,count:0,state:null};default:throw Error(i(444,e))}}function Sd(e){return'href="'+mn(e)+'"'}function zd(e){return'link[rel="stylesheet"]['+e+"]"}function Nd(e){return d({},e,{"data-precedence":e.precedence,precedence:null})}function jd(e){return'[src="'+mn(e)+'"]'}function Pd(e){return"script[async]"+e}function Td(e,n,t){if(n.count++,null===n.instance)switch(n.type){case"style":var r=e.querySelector('style[data-href~="'+mn(t.href)+'"]');if(r)return n.instance=r,He(r),r;var o=d({},t,{"data-href":t.href,"data-precedence":t.precedence,href:null,precedence:null});return He(r=(e.ownerDocument||e).createElement("style")),Jc(r,"style",o),Md(r,t.precedence,e),n.instance=r;case"stylesheet":o=Sd(t.href);var a=e.querySelector(zd(o));if(a)return n.state.loading|=4,n.instance=a,He(a),a;r=Nd(t),(o=xd.get(o))&&Od(r,o),He(a=(e.ownerDocument||e).createElement("link"));var l=a;return l._p=new Promise(function(e,n){l.onload=e,l.onerror=n}),Jc(a,"link",r),n.state.loading|=4,Md(a,t.precedence,e),n.instance=a;case"script":return a=jd(t.src),(o=e.querySelector(Pd(a)))?(n.instance=o,He(o),o):(r=t,(o=xd.get(a))&&Rd(r=d({},t),o),He(o=(e=e.ownerDocument||e).createElement("script")),Jc(o,"link",r),e.head.appendChild(o),n.instance=o);case"void":return null;default:throw Error(i(443,n.type))}else"stylesheet"===n.type&&!(4&n.state.loading)&&(r=n.instance,n.state.loading|=4,Md(r,t.precedence,e));return n.instance}function Md(e,n,t){for(var r=t.querySelectorAll('link[rel="stylesheet"][data-precedence],style[data-precedence]'),o=r.length?r[r.length-1]:null,a=o,i=0;i<r.length;i++){var l=r[i];if(l.dataset.precedence===n)a=l;else if(a!==o)break}a?a.parentNode.insertBefore(e,a.nextSibling):(n=9===t.nodeType?t.head:t).insertBefore(e,n.firstChild)}function Od(e,n){null==e.crossOrigin&&(e.crossOrigin=n.crossOrigin),null==e.referrerPolicy&&(e.referrerPolicy=n.referrerPolicy),null==e.title&&(e.title=n.title)}function Rd(e,n){null==e.crossOrigin&&(e.crossOrigin=n.crossOrigin),null==e.referrerPolicy&&(e.referrerPolicy=n.referrerPolicy),null==e.integrity&&(e.integrity=n.integrity)}var Id=null;function Ld(e,n,t){if(null===Id){var r=new Map,o=Id=new Map;o.set(t,r)}else(r=(o=Id).get(t))||(r=new Map,o.set(t,r));if(r.has(e))return r;for(r.set(e,null),t=t.getElementsByTagName(e),o=0;o<t.length;o++){var a=t[o];if(!(a[Le]||a[je]||"link"===e&&"stylesheet"===a.getAttribute("rel"))&&"http://www.w3.org/2000/svg"!==a.namespaceURI){var i=a.getAttribute(n)||"";i=e+i;var l=r.get(i);l?l.push(a):r.set(i,[a])}}return r}function Dd(e,n,t){(e=e.ownerDocument||e).head.insertBefore(t,"title"===n?e.querySelector("head > title"):null)}function Fd(e){return!!("stylesheet"!==e.type||3&e.state.loading)}var Ud=null;function $d(){}function qd(){if(this.count--,0===this.count)if(this.stylesheets)Wd(this,this.stylesheets);else if(this.unsuspend){var e=this.unsuspend;this.unsuspend=null,e()}}var Hd=null;function Wd(e,n){e.stylesheets=null,null!==e.unsuspend&&(e.count++,Hd=new Map,n.forEach(Yd,e),Hd=null,qd.call(e))}function Yd(e,n){if(!(4&n.state.loading)){var t=Hd.get(e);if(t)var r=t.get(null);else{t=new Map,Hd.set(e,t);for(var o=e.querySelectorAll("link[data-precedence],style[data-precedence]"),a=0;a<o.length;a++){var i=o[a];"LINK"!==i.nodeName&&"not all"===i.getAttribute("media")||(t.set(i.dataset.precedence,i),r=i)}r&&t.set(null,r)}i=(o=n.instance).getAttribute("data-precedence"),(a=t.get(i)||r)===r&&t.set(null,o),t.set(i,o),this.count++,r=qd.bind(this),o.addEventListener("load",r),o.addEventListener("error",r),a?a.parentNode.insertBefore(o,a.nextSibling):(e=9===e.nodeType?e.head:e).insertBefore(o,e.firstChild),n.state.loading|=4}}var Vd={$$typeof:b,Provider:null,Consumer:null,_currentValue:O,_currentValue2:O,_threadCount:0};function Xd(e,n,t,r,o,a,i,l){this.tag=1,this.containerInfo=e,this.pingCache=this.current=this.pendingChildren=null,this.timeoutHandle=-1,this.callbackNode=this.next=this.pendingContext=this.context=this.cancelPendingCommit=null,this.callbackPriority=0,this.expirationTimes=Ce(-1),this.entangledLanes=this.shellSuspendCounter=this.errorRecoveryDisabledLanes=this.expiredLanes=this.warmLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0,this.entanglements=Ce(0),this.hiddenUpdates=Ce(null),this.identifierPrefix=r,this.onUncaughtError=o,this.onCaughtError=a,this.onRecoverableError=i,this.pooledCache=null,this.pooledCacheLanes=0,this.formState=l,this.incompleteTransitions=new Map}function Qd(e,n,t,r,o,a){o=function(e){return e?e=Tr:Tr}(o),null===r.context?r.context=o:r.pendingContext=o,(r=oa(n)).payload={element:t},null!==(a=void 0===a?null:a)&&(r.callback=a),null!==(t=aa(e,r,n))&&(Ou(t,0,n),ia(t,e,n))}function Gd(e,n){if(null!==(e=e.memoizedState)&&null!==e.dehydrated){var t=e.retryLane;e.retryLane=0!==t&&t<n?t:n}}function Kd(e,n){Gd(e,n),(e=e.alternate)&&Gd(e,n)}function Zd(e){if(13===e.tag){var n=Nr(e,67108864);null!==n&&Ou(n,0,67108864),Kd(e,67108864)}}var Jd=!0;function ef(e,n,t,r){var o=T.T;T.T=null;var a=M.p;try{M.p=2,tf(e,n,t,r)}finally{M.p=a,T.T=o}}function nf(e,n,t,r){var o=T.T;T.T=null;var a=M.p;try{M.p=8,tf(e,n,t,r)}finally{M.p=a,T.T=o}}function tf(e,n,t,r){if(Jd){var o=rf(r);if(null===o)Uc(e,n,r,of,t),gf(e,r);else if(function(e,n,t,r,o){switch(n){case"focusin":return uf=Af(uf,e,n,t,r,o),!0;case"dragenter":return cf=Af(cf,e,n,t,r,o),!0;case"mouseover":return df=Af(df,e,n,t,r,o),!0;case"pointerover":var a=o.pointerId;return ff.set(a,Af(ff.get(a)||null,e,n,t,r,o)),!0;case"gotpointercapture":return a=o.pointerId,hf.set(a,Af(hf.get(a)||null,e,n,t,r,o)),!0}return!1}(o,e,n,t,r))r.stopPropagation();else if(gf(e,r),4&n&&-1<mf.indexOf(e)){for(;null!==o;){var a=Ue(o);if(null!==a)switch(a.tag){case 3:if((a=a.stateNode).current.memoizedState.isDehydrated){var i=Ae(a.pendingLanes);if(0!==i){var l=a;for(l.pendingLanes|=2,l.entangledLanes|=2;i;){var s=1<<31-fe(i);l.entanglements[1]|=s,i&=~s}xc(a),!(6&nu)&&(xu=ee()+500,Ec(0,!1))}}break;case 13:null!==(l=Nr(a,2))&&Ou(l,0,2),Fu(),Kd(a,2)}if(null===(a=rf(r))&&Uc(e,n,r,of,t),a===o)break;o=a}null!==o&&r.stopPropagation()}else Uc(e,n,r,null,t)}}function rf(e){return af(e=jn(e))}var of=null;function af(e){if(of=null,null!==(e=Fe(e))){var n=l(e);if(null===n)e=null;else{var t=n.tag;if(13===t){if(null!==(e=s(n)))return e;e=null}else if(3===t){if(n.stateNode.current.memoizedState.isDehydrated)return 3===n.tag?n.stateNode.containerInfo:null;e=null}else n!==e&&(e=null)}}return of=e,null}function lf(e){switch(e){case"beforetoggle":case"cancel":case"click":case"close":case"contextmenu":case"copy":case"cut":case"auxclick":case"dblclick":case"dragend":case"dragstart":case"drop":case"focusin":case"focusout":case"input":case"invalid":case"keydown":case"keypress":case"keyup":case"mousedown":case"mouseup":case"paste":case"pause":case"play":case"pointercancel":case"pointerdown":case"pointerup":case"ratechange":case"reset":case"resize":case"seeked":case"submit":case"toggle":case"touchcancel":case"touchend":case"touchstart":case"volumechange":case"change":case"selectionchange":case"textInput":case"compositionstart":case"compositionend":case"compositionupdate":case"beforeblur":case"afterblur":case"beforeinput":case"blur":case"fullscreenchange":case"focus":case"hashchange":case"popstate":case"select":case"selectstart":return 2;case"drag":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"mousemove":case"mouseout":case"mouseover":case"pointermove":case"pointerout":case"pointerover":case"scroll":case"touchmove":case"wheel":case"mouseenter":case"mouseleave":case"pointerenter":case"pointerleave":return 8;case"message":switch(ne()){case te:return 2;case re:return 8;case oe:case ae:return 32;case ie:return 268435456;default:return 32}default:return 32}}var sf=!1,uf=null,cf=null,df=null,ff=new Map,hf=new Map,pf=[],mf="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset".split(" ");function gf(e,n){switch(e){case"focusin":case"focusout":uf=null;break;case"dragenter":case"dragleave":cf=null;break;case"mouseover":case"mouseout":df=null;break;case"pointerover":case"pointerout":ff.delete(n.pointerId);break;case"gotpointercapture":case"lostpointercapture":hf.delete(n.pointerId)}}function Af(e,n,t,r,o,a){return null===e||e.nativeEvent!==a?(e={blockedOn:n,domEventName:t,eventSystemFlags:r,nativeEvent:a,targetContainers:[o]},null!==n&&null!==(n=Ue(n))&&Zd(n),e):(e.eventSystemFlags|=r,n=e.targetContainers,null!==o&&-1===n.indexOf(o)&&n.push(o),e)}function yf(e){var n=Fe(e.target);if(null!==n){var t=l(n);if(null!==t)if(13===(n=t.tag)){if(null!==(n=s(t)))return e.blockedOn=n,void function(e){var n=M.p;try{return M.p=e,function(){if(13===t.tag){var e=Tu();e=Be(e);var n=Nr(t,e);null!==n&&Ou(n,0,e),Kd(t,e)}}()}finally{M.p=n}}(e.priority)}else if(3===n&&t.stateNode.current.memoizedState.isDehydrated)return void(e.blockedOn=3===t.tag?t.stateNode.containerInfo:null)}e.blockedOn=null}function vf(e){if(null!==e.blockedOn)return!1;for(var n=e.targetContainers;0<n.length;){var t=rf(e.nativeEvent);if(null!==t)return null!==(n=Ue(t))&&Zd(n),e.blockedOn=t,!1;var r=new(t=e.nativeEvent).constructor(t.type,t);Nn=r,t.target.dispatchEvent(r),Nn=null,n.shift()}return!0}function bf(e,n,t){vf(e)&&t.delete(n)}function xf(){sf=!1,null!==uf&&vf(uf)&&(uf=null),null!==cf&&vf(cf)&&(cf=null),null!==df&&vf(df)&&(df=null),ff.forEach(bf),hf.forEach(bf)}function Ef(e,n){e.blockedOn===n&&(e.blockedOn=null,sf||(sf=!0,r.unstable_scheduleCallback(r.unstable_NormalPriority,xf)))}var Cf=null;function wf(e){Cf!==e&&(Cf=e,r.unstable_scheduleCallback(r.unstable_NormalPriority,function(){Cf===e&&(Cf=null);for(var n=0;n<e.length;n+=3){var t=e[n],r=e[n+1],o=e[n+2];if("function"!=typeof r){if(null===af(r||t))continue;break}var a=Ue(t);null!==a&&(e.splice(n,3),n-=3,Ni(a,{pending:!0,data:o,method:t.method,action:r},r,o))}}))}function _f(e){function n(n){return Ef(n,e)}null!==uf&&Ef(uf,e),null!==cf&&Ef(cf,e),null!==df&&Ef(df,e),ff.forEach(n),hf.forEach(n);for(var t=0;t<pf.length;t++){var r=pf[t];r.blockedOn===e&&(r.blockedOn=null)}for(;0<pf.length&&null===(t=pf[0]).blockedOn;)yf(t),null===t.blockedOn&&pf.shift();if(null!=(t=(e.ownerDocument||e).$$reactFormReplay))for(r=0;r<t.length;r+=3){var o=t[r],a=t[r+1],i=o[Pe]||null;if("function"==typeof a)i||wf(t);else if(i){var l=null;if(a&&a.hasAttribute("formAction")){if(o=a,i=a[Pe]||null)l=i.formAction;else if(null!==af(o))continue}else l=i.action;"function"==typeof l?t[r+1]=l:(t.splice(r,3),r-=3),wf(t)}}}function kf(e){this._internalRoot=e}function Bf(e){this._internalRoot=e}Bf.prototype.render=kf.prototype.render=function(e){var n=this._internalRoot;if(null===n)throw Error(i(409));Qd(n.current,Tu(),e,n,null,null)},Bf.prototype.unmount=kf.prototype.unmount=function(){var e=this._internalRoot;if(null!==e){this._internalRoot=null;var n=e.containerInfo;Qd(e.current,2,null,e,null,null),Fu(),n[Te]=null}},Bf.prototype.unstable_scheduleHydration=function(e){if(e){var n=ze();e={blockedOn:null,target:e,priority:n};for(var t=0;t<pf.length&&0!==n&&n<pf[t].priority;t++);pf.splice(t,0,e),0===t&&yf(e)}};var Sf=o.version;if("19.1.1"!==Sf)throw Error(i(527,Sf,"19.1.1"));M.findDOMNode=function(e){var n=e._reactInternals;if(void 0===n){if("function"==typeof e.render)throw Error(i(188));throw e=Object.keys(e).join(","),Error(i(268,e))}return e=function(e){var n=e.alternate;if(!n){if(null===(n=l(e)))throw Error(i(188));return n!==e?null:e}for(var t=e,r=n;;){var o=t.return;if(null===o)break;var a=o.alternate;if(null===a){if(null!==(r=o.return)){t=r;continue}break}if(o.child===a.child){for(a=o.child;a;){if(a===t)return u(o),e;if(a===r)return u(o),n;a=a.sibling}throw Error(i(188))}if(t.return!==r.return)t=o,r=a;else{for(var s=!1,c=o.child;c;){if(c===t){s=!0,t=o,r=a;break}if(c===r){s=!0,r=o,t=a;break}c=c.sibling}if(!s){for(c=a.child;c;){if(c===t){s=!0,t=a,r=o;break}if(c===r){s=!0,r=a,t=o;break}c=c.sibling}if(!s)throw Error(i(189))}}if(t.alternate!==r)throw Error(i(190))}if(3!==t.tag)throw Error(i(188));return t.stateNode.current===t?e:n}(n),null===(e=null!==e?c(e):null)?null:e.stateNode};var zf={bundleType:0,version:"19.1.1",rendererPackageName:"react-dom",currentDispatcherRef:T,reconcilerVersion:"19.1.1"};if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__){var Nf=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!Nf.isDisabled&&Nf.supportsFiber)try{ue=Nf.inject(zf),ce=Nf}catch(e){}}n.createRoot=function(e,n){if(!(t=e)||1!==t.nodeType&&9!==t.nodeType&&11!==t.nodeType)throw Error(i(299));var t,r=!1,o="",a=Al,l=yl,s=vl;return null!=n&&(!0===n.unstable_strictMode&&(r=!0),void 0!==n.identifierPrefix&&(o=n.identifierPrefix),void 0!==n.onUncaughtError&&(a=n.onUncaughtError),void 0!==n.onCaughtError&&(l=n.onCaughtError),void 0!==n.onRecoverableError&&(s=n.onRecoverableError),void 0!==n.unstable_transitionCallbacks&&n.unstable_transitionCallbacks),n=function(e,n,t,r,o,a,i,l,s,u,c,d){return e=new Xd(e,n,t,i,l,s,u,d),n=1,!0===a&&(n|=24),a=Or(3,null,null,n),e.current=a,a.stateNode=e,(n=To()).refCount++,e.pooledCache=n,n.refCount++,a.memoizedState={element:r,isDehydrated:t,cache:n},ta(a),e}(e,1,!1,null,0,r,o,a,l,s,0,null),e[Te]=n.current,Dc(e),new kf(n)}},276:(e,n,t)=>{"use strict";t.d(n,{A:()=>l});var r=t(354),o=t.n(r),a=t(314),i=t.n(a)()(o());i.push([e.id,".graph-viewer {\n  height: 100vh;\n  display: flex;\n  flex-direction: column;\n  position: relative;\n}\n\n.graph-controls {\n  background: var(--bg-secondary);\n  border-bottom: 1px solid var(--border-color);\n  padding: 1rem;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  flex-wrap: wrap;\n  gap: 1rem;\n}\n\n.add-node-section {\n  display: flex;\n  gap: 0.5rem;\n  align-items: center;\n  flex: 1;\n  max-width: 400px;\n}\n\n.add-node-section .input {\n  flex: 1;\n  min-width: 200px;\n}\n\n.selected-node-info {\n  display: flex;\n  align-items: center;\n  gap: 1rem;\n}\n\n.selected-node-info h3 {\n  margin: 0;\n  color: var(--text-primary);\n  font-size: 1.1rem;\n}\n\n.graph-container {\n  flex: 1;\n  position: relative;\n  background: var(--bg-primary);\n  overflow: hidden;\n}\n\n.graph-container canvas {\n  display: block;\n}\n\n.chat-overlay {\n  position: absolute;\n  top: 0;\n  right: 0;\n  width: 400px;\n  height: 100%;\n  background: var(--bg-secondary);\n  border-left: 1px solid var(--border-color);\n  box-shadow: -2px 0 8px rgba(0, 0, 0, 0.1);\n  z-index: 1000;\n  overflow: hidden;\n  animation: slideIn 0.3s ease-out;\n}\n\n@keyframes slideIn {\n  from {\n    transform: translateX(100%);\n  }\n  to {\n    transform: translateX(0);\n  }\n}\n\n/* Responsive Design */\n@media (max-width: 1200px) {\n  .chat-overlay {\n    width: 350px;\n  }\n}\n\n@media (max-width: 768px) {\n  .graph-controls {\n    flex-direction: column;\n    align-items: stretch;\n  }\n  \n  .add-node-section {\n    max-width: none;\n  }\n  \n  .selected-node-info {\n    flex-direction: column;\n    align-items: stretch;\n    text-align: center;\n  }\n  \n  .chat-overlay {\n    width: 100%;\n    height: 60%;\n    top: auto;\n    bottom: 0;\n    border-left: none;\n    border-top: 1px solid var(--border-color);\n    animation: slideUp 0.3s ease-out;\n  }\n  \n  @keyframes slideUp {\n    from {\n      transform: translateY(100%);\n    }\n    to {\n      transform: translateY(0);\n    }\n  }\n}\n\n/* Graph Node Styling */\n.graph-container .node {\n  cursor: pointer;\n  transition: all 0.2s ease;\n}\n\n.graph-container .node:hover {\n  filter: brightness(1.2);\n}\n\n.graph-container .node.selected {\n  filter: brightness(1.5);\n  stroke: var(--accent-color);\n  stroke-width: 3;\n}\n\n/* Graph Edge Styling */\n.graph-container .link {\n  transition: opacity 0.2s ease;\n}\n\n.graph-container .link:hover {\n  opacity: 0.8;\n}\n","",{version:3,sources:["webpack://./src/components/GraphViewer.css"],names:[],mappings:"AAAA;EACE,aAAa;EACb,aAAa;EACb,sBAAsB;EACtB,kBAAkB;AACpB;;AAEA;EACE,+BAA+B;EAC/B,4CAA4C;EAC5C,aAAa;EACb,aAAa;EACb,8BAA8B;EAC9B,mBAAmB;EACnB,eAAe;EACf,SAAS;AACX;;AAEA;EACE,aAAa;EACb,WAAW;EACX,mBAAmB;EACnB,OAAO;EACP,gBAAgB;AAClB;;AAEA;EACE,OAAO;EACP,gBAAgB;AAClB;;AAEA;EACE,aAAa;EACb,mBAAmB;EACnB,SAAS;AACX;;AAEA;EACE,SAAS;EACT,0BAA0B;EAC1B,iBAAiB;AACnB;;AAEA;EACE,OAAO;EACP,kBAAkB;EAClB,6BAA6B;EAC7B,gBAAgB;AAClB;;AAEA;EACE,cAAc;AAChB;;AAEA;EACE,kBAAkB;EAClB,MAAM;EACN,QAAQ;EACR,YAAY;EACZ,YAAY;EACZ,+BAA+B;EAC/B,0CAA0C;EAC1C,yCAAyC;EACzC,aAAa;EACb,gBAAgB;EAChB,gCAAgC;AAClC;;AAEA;EACE;IACE,2BAA2B;EAC7B;EACA;IACE,wBAAwB;EAC1B;AACF;;AAEA,sBAAsB;AACtB;EACE;IACE,YAAY;EACd;AACF;;AAEA;EACE;IACE,sBAAsB;IACtB,oBAAoB;EACtB;;EAEA;IACE,eAAe;EACjB;;EAEA;IACE,sBAAsB;IACtB,oBAAoB;IACpB,kBAAkB;EACpB;;EAEA;IACE,WAAW;IACX,WAAW;IACX,SAAS;IACT,SAAS;IACT,iBAAiB;IACjB,yCAAyC;IACzC,gCAAgC;EAClC;;EAEA;IACE;MACE,2BAA2B;IAC7B;IACA;MACE,wBAAwB;IAC1B;EACF;AACF;;AAEA,uBAAuB;AACvB;EACE,eAAe;EACf,yBAAyB;AAC3B;;AAEA;EACE,uBAAuB;AACzB;;AAEA;EACE,uBAAuB;EACvB,2BAA2B;EAC3B,eAAe;AACjB;;AAEA,uBAAuB;AACvB;EACE,6BAA6B;AAC/B;;AAEA;EACE,YAAY;AACd",sourcesContent:[".graph-viewer {\n  height: 100vh;\n  display: flex;\n  flex-direction: column;\n  position: relative;\n}\n\n.graph-controls {\n  background: var(--bg-secondary);\n  border-bottom: 1px solid var(--border-color);\n  padding: 1rem;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  flex-wrap: wrap;\n  gap: 1rem;\n}\n\n.add-node-section {\n  display: flex;\n  gap: 0.5rem;\n  align-items: center;\n  flex: 1;\n  max-width: 400px;\n}\n\n.add-node-section .input {\n  flex: 1;\n  min-width: 200px;\n}\n\n.selected-node-info {\n  display: flex;\n  align-items: center;\n  gap: 1rem;\n}\n\n.selected-node-info h3 {\n  margin: 0;\n  color: var(--text-primary);\n  font-size: 1.1rem;\n}\n\n.graph-container {\n  flex: 1;\n  position: relative;\n  background: var(--bg-primary);\n  overflow: hidden;\n}\n\n.graph-container canvas {\n  display: block;\n}\n\n.chat-overlay {\n  position: absolute;\n  top: 0;\n  right: 0;\n  width: 400px;\n  height: 100%;\n  background: var(--bg-secondary);\n  border-left: 1px solid var(--border-color);\n  box-shadow: -2px 0 8px rgba(0, 0, 0, 0.1);\n  z-index: 1000;\n  overflow: hidden;\n  animation: slideIn 0.3s ease-out;\n}\n\n@keyframes slideIn {\n  from {\n    transform: translateX(100%);\n  }\n  to {\n    transform: translateX(0);\n  }\n}\n\n/* Responsive Design */\n@media (max-width: 1200px) {\n  .chat-overlay {\n    width: 350px;\n  }\n}\n\n@media (max-width: 768px) {\n  .graph-controls {\n    flex-direction: column;\n    align-items: stretch;\n  }\n  \n  .add-node-section {\n    max-width: none;\n  }\n  \n  .selected-node-info {\n    flex-direction: column;\n    align-items: stretch;\n    text-align: center;\n  }\n  \n  .chat-overlay {\n    width: 100%;\n    height: 60%;\n    top: auto;\n    bottom: 0;\n    border-left: none;\n    border-top: 1px solid var(--border-color);\n    animation: slideUp 0.3s ease-out;\n  }\n  \n  @keyframes slideUp {\n    from {\n      transform: translateY(100%);\n    }\n    to {\n      transform: translateY(0);\n    }\n  }\n}\n\n/* Graph Node Styling */\n.graph-container .node {\n  cursor: pointer;\n  transition: all 0.2s ease;\n}\n\n.graph-container .node:hover {\n  filter: brightness(1.2);\n}\n\n.graph-container .node.selected {\n  filter: brightness(1.5);\n  stroke: var(--accent-color);\n  stroke-width: 3;\n}\n\n/* Graph Edge Styling */\n.graph-container .link {\n  transition: opacity 0.2s ease;\n}\n\n.graph-container .link:hover {\n  opacity: 0.8;\n}\n"],sourceRoot:""}]);const l=i},314:e=>{"use strict";e.exports=function(e){var n=[];return n.toString=function(){return this.map(function(n){var t="",r=void 0!==n[5];return n[4]&&(t+="@supports (".concat(n[4],") {")),n[2]&&(t+="@media ".concat(n[2]," {")),r&&(t+="@layer".concat(n[5].length>0?" ".concat(n[5]):""," {")),t+=e(n),r&&(t+="}"),n[2]&&(t+="}"),n[4]&&(t+="}"),t}).join("")},n.i=function(e,t,r,o,a){"string"==typeof e&&(e=[[null,e,void 0]]);var i={};if(r)for(var l=0;l<this.length;l++){var s=this[l][0];null!=s&&(i[s]=!0)}for(var u=0;u<e.length;u++){var c=[].concat(e[u]);r&&i[c[0]]||(void 0!==a&&(void 0===c[5]||(c[1]="@layer".concat(c[5].length>0?" ".concat(c[5]):""," {").concat(c[1],"}")),c[5]=a),t&&(c[2]?(c[1]="@media ".concat(c[2]," {").concat(c[1],"}"),c[2]=t):c[2]=t),o&&(c[4]?(c[1]="@supports (".concat(c[4],") {").concat(c[1],"}"),c[4]=o):c[4]="".concat(o)),n.push(c))}},n}},338:(e,n,t)=>{"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=t(247)},354:e=>{"use strict";e.exports=function(e){var n=e[1],t=e[3];if(!t)return n;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),a="/*# ".concat(o," */");return[n].concat([a]).join("\n")}return[n].join("\n")}},374:(e,n,t)=>{"use strict";t.d(n,{A:()=>l});var r=t(354),o=t.n(r),a=t(314),i=t.n(a)()(o());i.push([e.id,".node-chat {\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n  background: var(--bg-secondary);\n}\n\n.chat-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: 1rem;\n  border-bottom: 1px solid var(--border-color);\n  background: var(--bg-primary);\n}\n\n.chat-node-info {\n  display: flex;\n  align-items: center;\n  gap: 0.5rem;\n}\n\n.chat-node-info h3 {\n  margin: 0;\n  color: var(--text-primary);\n  font-size: 1.1rem;\n}\n\n.close-button {\n  background: none;\n  border: none;\n  color: var(--text-secondary);\n  cursor: pointer;\n  padding: 0.5rem;\n  border-radius: 4px;\n  transition: all 0.2s ease;\n}\n\n.close-button:hover {\n  background: var(--bg-secondary);\n  color: var(--text-primary);\n}\n\n.chat-messages {\n  flex: 1;\n  overflow-y: auto;\n  padding: 1rem;\n  display: flex;\n  flex-direction: column;\n  gap: 1rem;\n}\n\n.welcome-message {\n  text-align: center;\n  color: var(--text-secondary);\n  padding: 2rem 1rem;\n}\n\n.welcome-message h4 {\n  margin: 1rem 0 0.5rem 0;\n  color: var(--text-primary);\n}\n\n.welcome-message p {\n  margin: 0;\n  font-size: 0.9rem;\n}\n\n.message {\n  display: flex;\n  flex-direction: column;\n  max-width: 80%;\n}\n\n.message.user {\n  align-self: flex-end;\n}\n\n.message.assistant {\n  align-self: flex-start;\n}\n\n.message-content {\n  padding: 0.75rem 1rem;\n  border-radius: 18px;\n  word-wrap: break-word;\n  line-height: 1.4;\n}\n\n.message.user .message-content {\n  background: var(--accent-color);\n  color: white;\n  border-bottom-right-radius: 4px;\n}\n\n.message.assistant .message-content {\n  background: var(--bg-primary);\n  color: var(--text-primary);\n  border: 1px solid var(--border-color);\n  border-bottom-left-radius: 4px;\n}\n\n.message-timestamp {\n  font-size: 0.75rem;\n  color: var(--text-secondary);\n  margin-top: 0.25rem;\n  align-self: flex-end;\n}\n\n.message.user .message-timestamp {\n  align-self: flex-end;\n}\n\n.message.assistant .message-timestamp {\n  align-self: flex-start;\n}\n\n.typing-indicator {\n  display: flex;\n  gap: 0.25rem;\n  align-items: center;\n}\n\n.typing-indicator span {\n  width: 8px;\n  height: 8px;\n  border-radius: 50%;\n  background: var(--text-secondary);\n  animation: typing 1.4s infinite ease-in-out;\n}\n\n.typing-indicator span:nth-child(1) { animation-delay: -0.32s; }\n.typing-indicator span:nth-child(2) { animation-delay: -0.16s; }\n\n@keyframes typing {\n  0%, 80%, 100% {\n    transform: scale(0.8);\n    opacity: 0.5;\n  }\n  40% {\n    transform: scale(1);\n    opacity: 1;\n  }\n}\n\n.related-topics {\n  padding: 1rem;\n  border-top: 1px solid var(--border-color);\n  background: var(--bg-primary);\n}\n\n.related-topics h4 {\n  margin: 0 0 0.75rem 0;\n  color: var(--text-primary);\n  font-size: 0.9rem;\n}\n\n.topics-list {\n  display: flex;\n  flex-wrap: wrap;\n  gap: 0.5rem;\n}\n\n.topic-button {\n  display: flex;\n  align-items: center;\n  gap: 0.25rem;\n  background: var(--accent-color);\n  color: white;\n  border: none;\n  padding: 0.5rem 0.75rem;\n  border-radius: 20px;\n  cursor: pointer;\n  font-size: 0.85rem;\n  transition: all 0.2s ease;\n}\n\n.topic-button:hover {\n  background: var(--accent-hover);\n  transform: translateY(-1px);\n}\n\n.chat-input-section {\n  padding: 1rem;\n  border-top: 1px solid var(--border-color);\n  background: var(--bg-primary);\n}\n\n.ai-not-configured {\n  text-align: center;\n  padding: 1rem;\n  background: var(--warning-color);\n  color: white;\n  border-radius: 8px;\n  font-size: 0.9rem;\n}\n\n.chat-input-container {\n  display: flex;\n  gap: 0.5rem;\n}\n\n.chat-input {\n  flex: 1;\n  padding: 0.75rem;\n  border: 1px solid var(--border-color);\n  border-radius: 20px;\n  background: var(--bg-secondary);\n  color: var(--text-primary);\n  font-size: 0.9rem;\n}\n\n.chat-input:focus {\n  outline: none;\n  border-color: var(--accent-color);\n}\n\n.send-button {\n  background: var(--accent-color);\n  color: white;\n  border: none;\n  padding: 0.75rem;\n  border-radius: 50%;\n  cursor: pointer;\n  transition: all 0.2s ease;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  min-width: 44px;\n  min-height: 44px;\n}\n\n.send-button:hover:not(:disabled) {\n  background: var(--accent-hover);\n  transform: scale(1.05);\n}\n\n.send-button:disabled {\n  background: var(--text-secondary);\n  cursor: not-allowed;\n  transform: none;\n}\n\n/* Scrollbar Styling */\n.chat-messages::-webkit-scrollbar {\n  width: 6px;\n}\n\n.chat-messages::-webkit-scrollbar-track {\n  background: var(--bg-secondary);\n}\n\n.chat-messages::-webkit-scrollbar-thumb {\n  background: var(--border-color);\n  border-radius: 3px;\n}\n\n.chat-messages::-webkit-scrollbar-thumb:hover {\n  background: var(--text-secondary);\n}\n","",{version:3,sources:["webpack://./src/components/NodeChat.css"],names:[],mappings:"AAAA;EACE,YAAY;EACZ,aAAa;EACb,sBAAsB;EACtB,+BAA+B;AACjC;;AAEA;EACE,aAAa;EACb,8BAA8B;EAC9B,mBAAmB;EACnB,aAAa;EACb,4CAA4C;EAC5C,6BAA6B;AAC/B;;AAEA;EACE,aAAa;EACb,mBAAmB;EACnB,WAAW;AACb;;AAEA;EACE,SAAS;EACT,0BAA0B;EAC1B,iBAAiB;AACnB;;AAEA;EACE,gBAAgB;EAChB,YAAY;EACZ,4BAA4B;EAC5B,eAAe;EACf,eAAe;EACf,kBAAkB;EAClB,yBAAyB;AAC3B;;AAEA;EACE,+BAA+B;EAC/B,0BAA0B;AAC5B;;AAEA;EACE,OAAO;EACP,gBAAgB;EAChB,aAAa;EACb,aAAa;EACb,sBAAsB;EACtB,SAAS;AACX;;AAEA;EACE,kBAAkB;EAClB,4BAA4B;EAC5B,kBAAkB;AACpB;;AAEA;EACE,uBAAuB;EACvB,0BAA0B;AAC5B;;AAEA;EACE,SAAS;EACT,iBAAiB;AACnB;;AAEA;EACE,aAAa;EACb,sBAAsB;EACtB,cAAc;AAChB;;AAEA;EACE,oBAAoB;AACtB;;AAEA;EACE,sBAAsB;AACxB;;AAEA;EACE,qBAAqB;EACrB,mBAAmB;EACnB,qBAAqB;EACrB,gBAAgB;AAClB;;AAEA;EACE,+BAA+B;EAC/B,YAAY;EACZ,+BAA+B;AACjC;;AAEA;EACE,6BAA6B;EAC7B,0BAA0B;EAC1B,qCAAqC;EACrC,8BAA8B;AAChC;;AAEA;EACE,kBAAkB;EAClB,4BAA4B;EAC5B,mBAAmB;EACnB,oBAAoB;AACtB;;AAEA;EACE,oBAAoB;AACtB;;AAEA;EACE,sBAAsB;AACxB;;AAEA;EACE,aAAa;EACb,YAAY;EACZ,mBAAmB;AACrB;;AAEA;EACE,UAAU;EACV,WAAW;EACX,kBAAkB;EAClB,iCAAiC;EACjC,2CAA2C;AAC7C;;AAEA,sCAAsC,uBAAuB,EAAE;AAC/D,sCAAsC,uBAAuB,EAAE;;AAE/D;EACE;IACE,qBAAqB;IACrB,YAAY;EACd;EACA;IACE,mBAAmB;IACnB,UAAU;EACZ;AACF;;AAEA;EACE,aAAa;EACb,yCAAyC;EACzC,6BAA6B;AAC/B;;AAEA;EACE,qBAAqB;EACrB,0BAA0B;EAC1B,iBAAiB;AACnB;;AAEA;EACE,aAAa;EACb,eAAe;EACf,WAAW;AACb;;AAEA;EACE,aAAa;EACb,mBAAmB;EACnB,YAAY;EACZ,+BAA+B;EAC/B,YAAY;EACZ,YAAY;EACZ,uBAAuB;EACvB,mBAAmB;EACnB,eAAe;EACf,kBAAkB;EAClB,yBAAyB;AAC3B;;AAEA;EACE,+BAA+B;EAC/B,2BAA2B;AAC7B;;AAEA;EACE,aAAa;EACb,yCAAyC;EACzC,6BAA6B;AAC/B;;AAEA;EACE,kBAAkB;EAClB,aAAa;EACb,gCAAgC;EAChC,YAAY;EACZ,kBAAkB;EAClB,iBAAiB;AACnB;;AAEA;EACE,aAAa;EACb,WAAW;AACb;;AAEA;EACE,OAAO;EACP,gBAAgB;EAChB,qCAAqC;EACrC,mBAAmB;EACnB,+BAA+B;EAC/B,0BAA0B;EAC1B,iBAAiB;AACnB;;AAEA;EACE,aAAa;EACb,iCAAiC;AACnC;;AAEA;EACE,+BAA+B;EAC/B,YAAY;EACZ,YAAY;EACZ,gBAAgB;EAChB,kBAAkB;EAClB,eAAe;EACf,yBAAyB;EACzB,aAAa;EACb,mBAAmB;EACnB,uBAAuB;EACvB,eAAe;EACf,gBAAgB;AAClB;;AAEA;EACE,+BAA+B;EAC/B,sBAAsB;AACxB;;AAEA;EACE,iCAAiC;EACjC,mBAAmB;EACnB,eAAe;AACjB;;AAEA,sBAAsB;AACtB;EACE,UAAU;AACZ;;AAEA;EACE,+BAA+B;AACjC;;AAEA;EACE,+BAA+B;EAC/B,kBAAkB;AACpB;;AAEA;EACE,iCAAiC;AACnC",sourcesContent:[".node-chat {\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n  background: var(--bg-secondary);\n}\n\n.chat-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: 1rem;\n  border-bottom: 1px solid var(--border-color);\n  background: var(--bg-primary);\n}\n\n.chat-node-info {\n  display: flex;\n  align-items: center;\n  gap: 0.5rem;\n}\n\n.chat-node-info h3 {\n  margin: 0;\n  color: var(--text-primary);\n  font-size: 1.1rem;\n}\n\n.close-button {\n  background: none;\n  border: none;\n  color: var(--text-secondary);\n  cursor: pointer;\n  padding: 0.5rem;\n  border-radius: 4px;\n  transition: all 0.2s ease;\n}\n\n.close-button:hover {\n  background: var(--bg-secondary);\n  color: var(--text-primary);\n}\n\n.chat-messages {\n  flex: 1;\n  overflow-y: auto;\n  padding: 1rem;\n  display: flex;\n  flex-direction: column;\n  gap: 1rem;\n}\n\n.welcome-message {\n  text-align: center;\n  color: var(--text-secondary);\n  padding: 2rem 1rem;\n}\n\n.welcome-message h4 {\n  margin: 1rem 0 0.5rem 0;\n  color: var(--text-primary);\n}\n\n.welcome-message p {\n  margin: 0;\n  font-size: 0.9rem;\n}\n\n.message {\n  display: flex;\n  flex-direction: column;\n  max-width: 80%;\n}\n\n.message.user {\n  align-self: flex-end;\n}\n\n.message.assistant {\n  align-self: flex-start;\n}\n\n.message-content {\n  padding: 0.75rem 1rem;\n  border-radius: 18px;\n  word-wrap: break-word;\n  line-height: 1.4;\n}\n\n.message.user .message-content {\n  background: var(--accent-color);\n  color: white;\n  border-bottom-right-radius: 4px;\n}\n\n.message.assistant .message-content {\n  background: var(--bg-primary);\n  color: var(--text-primary);\n  border: 1px solid var(--border-color);\n  border-bottom-left-radius: 4px;\n}\n\n.message-timestamp {\n  font-size: 0.75rem;\n  color: var(--text-secondary);\n  margin-top: 0.25rem;\n  align-self: flex-end;\n}\n\n.message.user .message-timestamp {\n  align-self: flex-end;\n}\n\n.message.assistant .message-timestamp {\n  align-self: flex-start;\n}\n\n.typing-indicator {\n  display: flex;\n  gap: 0.25rem;\n  align-items: center;\n}\n\n.typing-indicator span {\n  width: 8px;\n  height: 8px;\n  border-radius: 50%;\n  background: var(--text-secondary);\n  animation: typing 1.4s infinite ease-in-out;\n}\n\n.typing-indicator span:nth-child(1) { animation-delay: -0.32s; }\n.typing-indicator span:nth-child(2) { animation-delay: -0.16s; }\n\n@keyframes typing {\n  0%, 80%, 100% {\n    transform: scale(0.8);\n    opacity: 0.5;\n  }\n  40% {\n    transform: scale(1);\n    opacity: 1;\n  }\n}\n\n.related-topics {\n  padding: 1rem;\n  border-top: 1px solid var(--border-color);\n  background: var(--bg-primary);\n}\n\n.related-topics h4 {\n  margin: 0 0 0.75rem 0;\n  color: var(--text-primary);\n  font-size: 0.9rem;\n}\n\n.topics-list {\n  display: flex;\n  flex-wrap: wrap;\n  gap: 0.5rem;\n}\n\n.topic-button {\n  display: flex;\n  align-items: center;\n  gap: 0.25rem;\n  background: var(--accent-color);\n  color: white;\n  border: none;\n  padding: 0.5rem 0.75rem;\n  border-radius: 20px;\n  cursor: pointer;\n  font-size: 0.85rem;\n  transition: all 0.2s ease;\n}\n\n.topic-button:hover {\n  background: var(--accent-hover);\n  transform: translateY(-1px);\n}\n\n.chat-input-section {\n  padding: 1rem;\n  border-top: 1px solid var(--border-color);\n  background: var(--bg-primary);\n}\n\n.ai-not-configured {\n  text-align: center;\n  padding: 1rem;\n  background: var(--warning-color);\n  color: white;\n  border-radius: 8px;\n  font-size: 0.9rem;\n}\n\n.chat-input-container {\n  display: flex;\n  gap: 0.5rem;\n}\n\n.chat-input {\n  flex: 1;\n  padding: 0.75rem;\n  border: 1px solid var(--border-color);\n  border-radius: 20px;\n  background: var(--bg-secondary);\n  color: var(--text-primary);\n  font-size: 0.9rem;\n}\n\n.chat-input:focus {\n  outline: none;\n  border-color: var(--accent-color);\n}\n\n.send-button {\n  background: var(--accent-color);\n  color: white;\n  border: none;\n  padding: 0.75rem;\n  border-radius: 50%;\n  cursor: pointer;\n  transition: all 0.2s ease;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  min-width: 44px;\n  min-height: 44px;\n}\n\n.send-button:hover:not(:disabled) {\n  background: var(--accent-hover);\n  transform: scale(1.05);\n}\n\n.send-button:disabled {\n  background: var(--text-secondary);\n  cursor: not-allowed;\n  transform: none;\n}\n\n/* Scrollbar Styling */\n.chat-messages::-webkit-scrollbar {\n  width: 6px;\n}\n\n.chat-messages::-webkit-scrollbar-track {\n  background: var(--bg-secondary);\n}\n\n.chat-messages::-webkit-scrollbar-thumb {\n  background: var(--border-color);\n  border-radius: 3px;\n}\n\n.chat-messages::-webkit-scrollbar-thumb:hover {\n  background: var(--text-secondary);\n}\n"],sourceRoot:""}]);const l=i},477:(e,n)=>{"use strict";function t(e,n){var t=e.length;e.push(n);e:for(;0<t;){var r=t-1>>>1,o=e[r];if(!(0<a(o,n)))break e;e[r]=n,e[t]=o,t=r}}function r(e){return 0===e.length?null:e[0]}function o(e){if(0===e.length)return null;var n=e[0],t=e.pop();if(t!==n){e[0]=t;e:for(var r=0,o=e.length,i=o>>>1;r<i;){var l=2*(r+1)-1,s=e[l],u=l+1,c=e[u];if(0>a(s,t))u<o&&0>a(c,s)?(e[r]=c,e[u]=t,r=u):(e[r]=s,e[l]=t,r=l);else{if(!(u<o&&0>a(c,t)))break e;e[r]=c,e[u]=t,r=u}}}return n}function a(e,n){var t=e.sortIndex-n.sortIndex;return 0!==t?t:e.id-n.id}if(n.unstable_now=void 0,"object"==typeof performance&&"function"==typeof performance.now){var i=performance;n.unstable_now=function(){return i.now()}}else{var l=Date,s=l.now();n.unstable_now=function(){return l.now()-s}}var u=[],c=[],d=1,f=null,h=3,p=!1,m=!1,g=!1,A=!1,y="function"==typeof setTimeout?setTimeout:null,v="function"==typeof clearTimeout?clearTimeout:null,b="undefined"!=typeof setImmediate?setImmediate:null;function x(e){for(var n=r(c);null!==n;){if(null===n.callback)o(c);else{if(!(n.startTime<=e))break;o(c),n.sortIndex=n.expirationTime,t(u,n)}n=r(c)}}function E(e){if(g=!1,x(e),!m)if(null!==r(u))m=!0,w||(w=!0,C());else{var n=r(c);null!==n&&P(E,n.startTime-e)}}var C,w=!1,_=-1,k=5,B=-1;function S(){return!(!A&&n.unstable_now()-B<k)}function z(){if(A=!1,w){var e=n.unstable_now();B=e;var t=!0;try{e:{m=!1,g&&(g=!1,v(_),_=-1),p=!0;var a=h;try{n:{for(x(e),f=r(u);null!==f&&!(f.expirationTime>e&&S());){var i=f.callback;if("function"==typeof i){f.callback=null,h=f.priorityLevel;var l=i(f.expirationTime<=e);if(e=n.unstable_now(),"function"==typeof l){f.callback=l,x(e),t=!0;break n}f===r(u)&&o(u),x(e)}else o(u);f=r(u)}if(null!==f)t=!0;else{var s=r(c);null!==s&&P(E,s.startTime-e),t=!1}}break e}finally{f=null,h=a,p=!1}t=void 0}}finally{t?C():w=!1}}}if("function"==typeof b)C=function(){b(z)};else if("undefined"!=typeof MessageChannel){var N=new MessageChannel,j=N.port2;N.port1.onmessage=z,C=function(){j.postMessage(null)}}else C=function(){y(z,0)};function P(e,t){_=y(function(){e(n.unstable_now())},t)}n.unstable_IdlePriority=5,n.unstable_ImmediatePriority=1,n.unstable_LowPriority=4,n.unstable_NormalPriority=3,n.unstable_Profiling=null,n.unstable_UserBlockingPriority=2,n.unstable_cancelCallback=function(e){e.callback=null},n.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):k=0<e?Math.floor(1e3/e):5},n.unstable_getCurrentPriorityLevel=function(){return h},n.unstable_next=function(e){switch(h){case 1:case 2:case 3:var n=3;break;default:n=h}var t=h;h=n;try{return e()}finally{h=t}},n.unstable_requestPaint=function(){A=!0},n.unstable_runWithPriority=function(e,n){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var t=h;h=e;try{return n()}finally{h=t}},n.unstable_scheduleCallback=function(e,o,a){var i=n.unstable_now();switch(a="object"==typeof a&&null!==a&&"number"==typeof(a=a.delay)&&0<a?i+a:i,e){case 1:var l=-1;break;case 2:l=250;break;case 5:l=1073741823;break;case 4:l=1e4;break;default:l=5e3}return e={id:d++,callback:o,priorityLevel:e,startTime:a,expirationTime:l=a+l,sortIndex:-1},a>i?(e.sortIndex=a,t(c,e),null===r(u)&&e===r(c)&&(g?(v(_),_=-1):g=!0,P(E,a-i))):(e.sortIndex=l,t(u,e),m||p||(m=!0,w||(w=!0,C()))),e},n.unstable_shouldYield=S,n.unstable_wrapCallback=function(e){var n=h;return function(){var t=h;h=n;try{return e.apply(this,arguments)}finally{h=t}}}},540:(e,n,t)=>{"use strict";e.exports=t(869)},548:(e,n,t)=>{"use strict";t.d(n,{A:()=>l});var r=t(354),o=t.n(r),a=t(314),i=t.n(a)()(o());i.push([e.id,".chat-history {\n  padding: 2rem;\n  max-width: 1200px;\n  margin: 0 auto;\n}\n\n.chat-history-header {\n  text-align: center;\n  margin-bottom: 2rem;\n}\n\n.chat-history-header h2 {\n  margin: 0 0 0.5rem 0;\n  color: var(--text-primary);\n  font-size: 2rem;\n}\n\n.chat-history-header p {\n  margin: 0;\n  color: var(--text-secondary);\n  font-size: 1.1rem;\n}\n\n.chat-history-controls {\n  display: flex;\n  gap: 1rem;\n  margin-bottom: 2rem;\n  flex-wrap: wrap;\n}\n\n.search-section {\n  flex: 1;\n  min-width: 300px;\n}\n\n.search-input-wrapper {\n  position: relative;\n  display: flex;\n  align-items: center;\n}\n\n.search-icon {\n  position: absolute;\n  left: 1rem;\n  color: var(--text-secondary);\n}\n\n.search-input {\n  width: 100%;\n  padding: 0.75rem 1rem 0.75rem 3rem;\n  border: 1px solid var(--border-color);\n  border-radius: 8px;\n  background: var(--bg-secondary);\n  color: var(--text-primary);\n  font-size: 1rem;\n}\n\n.search-input:focus {\n  outline: none;\n  border-color: var(--accent-color);\n}\n\n.filter-section {\n  min-width: 200px;\n}\n\n.filter-select {\n  width: 100%;\n  padding: 0.75rem;\n  border: 1px solid var(--border-color);\n  border-radius: 8px;\n  background: var(--bg-secondary);\n  color: var(--text-primary);\n  font-size: 1rem;\n  cursor: pointer;\n}\n\n.filter-select:focus {\n  outline: none;\n  border-color: var(--accent-color);\n}\n\n.chat-history-content {\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  gap: 2rem;\n}\n\n.sessions-list {\n  display: flex;\n  flex-direction: column;\n  gap: 1rem;\n}\n\n.no-sessions {\n  text-align: center;\n  padding: 3rem 1rem;\n  color: var(--text-secondary);\n}\n\n.no-sessions h3 {\n  margin: 1rem 0 0.5rem 0;\n  color: var(--text-primary);\n}\n\n.no-sessions p {\n  margin: 0;\n  font-size: 0.9rem;\n}\n\n.session-item {\n  background: var(--bg-secondary);\n  border: 1px solid var(--border-color);\n  border-radius: 12px;\n  padding: 1.5rem;\n  cursor: pointer;\n  transition: all 0.2s ease;\n}\n\n.session-item:hover {\n  border-color: var(--accent-color);\n  transform: translateY(-2px);\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);\n}\n\n.session-item.selected {\n  border-color: var(--accent-color);\n  background: var(--accent-color);\n  color: white;\n}\n\n.session-item.selected .session-node,\n.session-item.selected .session-meta,\n.session-item.selected .session-preview {\n  color: white;\n}\n\n.session-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 1rem;\n}\n\n.session-node {\n  display: flex;\n  align-items: center;\n  gap: 0.5rem;\n  font-weight: 600;\n  color: var(--text-primary);\n}\n\n.session-meta {\n  display: flex;\n  gap: 1rem;\n  font-size: 0.85rem;\n  color: var(--text-secondary);\n}\n\n.session-meta span {\n  display: flex;\n  align-items: center;\n  gap: 0.25rem;\n}\n\n.session-preview {\n  color: var(--text-secondary);\n  margin-bottom: 1rem;\n  line-height: 1.4;\n  font-size: 0.9rem;\n}\n\n.session-actions {\n  display: flex;\n  gap: 0.5rem;\n}\n\n.button.small {\n  padding: 0.5rem 1rem;\n  font-size: 0.85rem;\n}\n\n.button.danger {\n  background: var(--error-color);\n  color: white;\n}\n\n.button.danger:hover {\n  background: #c82333;\n}\n\n.session-detail {\n  background: var(--bg-secondary);\n  border: 1px solid var(--border-color);\n  border-radius: 12px;\n  padding: 1.5rem;\n  height: fit-content;\n  position: sticky;\n  top: 2rem;\n}\n\n.session-detail-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 1.5rem;\n  padding-bottom: 1rem;\n  border-bottom: 1px solid var(--border-color);\n}\n\n.session-detail-header h3 {\n  margin: 0;\n  color: var(--text-primary);\n}\n\n.close-detail {\n  background: none;\n  border: none;\n  color: var(--text-secondary);\n  cursor: pointer;\n  font-size: 1.5rem;\n  padding: 0.25rem;\n  border-radius: 4px;\n  transition: all 0.2s ease;\n}\n\n.close-detail:hover {\n  color: var(--text-primary);\n  background: var(--bg-primary);\n}\n\n.session-info {\n  margin-bottom: 1.5rem;\n}\n\n.session-info p {\n  margin: 0.5rem 0;\n  color: var(--text-secondary);\n  font-size: 0.9rem;\n}\n\n.session-info strong {\n  color: var(--text-primary);\n}\n\n.session-messages h4 {\n  margin: 0 0 1rem 0;\n  color: var(--text-primary);\n  font-size: 1rem;\n}\n\n.detail-message {\n  margin-bottom: 1rem;\n  padding: 1rem;\n  border-radius: 8px;\n  background: var(--bg-primary);\n  border: 1px solid var(--border-color);\n}\n\n.message-role {\n  font-weight: 600;\n  color: var(--accent-color);\n  margin-bottom: 0.5rem;\n  font-size: 0.85rem;\n  text-transform: uppercase;\n}\n\n.message-content {\n  color: var(--text-primary);\n  line-height: 1.4;\n  margin-bottom: 0.5rem;\n}\n\n.message-time {\n  font-size: 0.75rem;\n  color: var(--text-secondary);\n  text-align: right;\n}\n\n/* Responsive Design */\n@media (max-width: 1024px) {\n  .chat-history-content {\n    grid-template-columns: 1fr;\n  }\n  \n  .session-detail {\n    position: static;\n  }\n}\n\n@media (max-width: 768px) {\n  .chat-history {\n    padding: 1rem;\n  }\n  \n  .chat-history-controls {\n    flex-direction: column;\n  }\n  \n  .search-section,\n  .filter-section {\n    min-width: auto;\n  }\n  \n  .session-header {\n    flex-direction: column;\n    align-items: flex-start;\n    gap: 0.5rem;\n  }\n  \n  .session-meta {\n    gap: 0.5rem;\n  }\n  \n  .session-actions {\n    flex-direction: column;\n  }\n}\n","",{version:3,sources:["webpack://./src/components/ChatHistory.css"],names:[],mappings:"AAAA;EACE,aAAa;EACb,iBAAiB;EACjB,cAAc;AAChB;;AAEA;EACE,kBAAkB;EAClB,mBAAmB;AACrB;;AAEA;EACE,oBAAoB;EACpB,0BAA0B;EAC1B,eAAe;AACjB;;AAEA;EACE,SAAS;EACT,4BAA4B;EAC5B,iBAAiB;AACnB;;AAEA;EACE,aAAa;EACb,SAAS;EACT,mBAAmB;EACnB,eAAe;AACjB;;AAEA;EACE,OAAO;EACP,gBAAgB;AAClB;;AAEA;EACE,kBAAkB;EAClB,aAAa;EACb,mBAAmB;AACrB;;AAEA;EACE,kBAAkB;EAClB,UAAU;EACV,4BAA4B;AAC9B;;AAEA;EACE,WAAW;EACX,kCAAkC;EAClC,qCAAqC;EACrC,kBAAkB;EAClB,+BAA+B;EAC/B,0BAA0B;EAC1B,eAAe;AACjB;;AAEA;EACE,aAAa;EACb,iCAAiC;AACnC;;AAEA;EACE,gBAAgB;AAClB;;AAEA;EACE,WAAW;EACX,gBAAgB;EAChB,qCAAqC;EACrC,kBAAkB;EAClB,+BAA+B;EAC/B,0BAA0B;EAC1B,eAAe;EACf,eAAe;AACjB;;AAEA;EACE,aAAa;EACb,iCAAiC;AACnC;;AAEA;EACE,aAAa;EACb,8BAA8B;EAC9B,SAAS;AACX;;AAEA;EACE,aAAa;EACb,sBAAsB;EACtB,SAAS;AACX;;AAEA;EACE,kBAAkB;EAClB,kBAAkB;EAClB,4BAA4B;AAC9B;;AAEA;EACE,uBAAuB;EACvB,0BAA0B;AAC5B;;AAEA;EACE,SAAS;EACT,iBAAiB;AACnB;;AAEA;EACE,+BAA+B;EAC/B,qCAAqC;EACrC,mBAAmB;EACnB,eAAe;EACf,eAAe;EACf,yBAAyB;AAC3B;;AAEA;EACE,iCAAiC;EACjC,2BAA2B;EAC3B,yCAAyC;AAC3C;;AAEA;EACE,iCAAiC;EACjC,+BAA+B;EAC/B,YAAY;AACd;;AAEA;;;EAGE,YAAY;AACd;;AAEA;EACE,aAAa;EACb,8BAA8B;EAC9B,mBAAmB;EACnB,mBAAmB;AACrB;;AAEA;EACE,aAAa;EACb,mBAAmB;EACnB,WAAW;EACX,gBAAgB;EAChB,0BAA0B;AAC5B;;AAEA;EACE,aAAa;EACb,SAAS;EACT,kBAAkB;EAClB,4BAA4B;AAC9B;;AAEA;EACE,aAAa;EACb,mBAAmB;EACnB,YAAY;AACd;;AAEA;EACE,4BAA4B;EAC5B,mBAAmB;EACnB,gBAAgB;EAChB,iBAAiB;AACnB;;AAEA;EACE,aAAa;EACb,WAAW;AACb;;AAEA;EACE,oBAAoB;EACpB,kBAAkB;AACpB;;AAEA;EACE,8BAA8B;EAC9B,YAAY;AACd;;AAEA;EACE,mBAAmB;AACrB;;AAEA;EACE,+BAA+B;EAC/B,qCAAqC;EACrC,mBAAmB;EACnB,eAAe;EACf,mBAAmB;EACnB,gBAAgB;EAChB,SAAS;AACX;;AAEA;EACE,aAAa;EACb,8BAA8B;EAC9B,mBAAmB;EACnB,qBAAqB;EACrB,oBAAoB;EACpB,4CAA4C;AAC9C;;AAEA;EACE,SAAS;EACT,0BAA0B;AAC5B;;AAEA;EACE,gBAAgB;EAChB,YAAY;EACZ,4BAA4B;EAC5B,eAAe;EACf,iBAAiB;EACjB,gBAAgB;EAChB,kBAAkB;EAClB,yBAAyB;AAC3B;;AAEA;EACE,0BAA0B;EAC1B,6BAA6B;AAC/B;;AAEA;EACE,qBAAqB;AACvB;;AAEA;EACE,gBAAgB;EAChB,4BAA4B;EAC5B,iBAAiB;AACnB;;AAEA;EACE,0BAA0B;AAC5B;;AAEA;EACE,kBAAkB;EAClB,0BAA0B;EAC1B,eAAe;AACjB;;AAEA;EACE,mBAAmB;EACnB,aAAa;EACb,kBAAkB;EAClB,6BAA6B;EAC7B,qCAAqC;AACvC;;AAEA;EACE,gBAAgB;EAChB,0BAA0B;EAC1B,qBAAqB;EACrB,kBAAkB;EAClB,yBAAyB;AAC3B;;AAEA;EACE,0BAA0B;EAC1B,gBAAgB;EAChB,qBAAqB;AACvB;;AAEA;EACE,kBAAkB;EAClB,4BAA4B;EAC5B,iBAAiB;AACnB;;AAEA,sBAAsB;AACtB;EACE;IACE,0BAA0B;EAC5B;;EAEA;IACE,gBAAgB;EAClB;AACF;;AAEA;EACE;IACE,aAAa;EACf;;EAEA;IACE,sBAAsB;EACxB;;EAEA;;IAEE,eAAe;EACjB;;EAEA;IACE,sBAAsB;IACtB,uBAAuB;IACvB,WAAW;EACb;;EAEA;IACE,WAAW;EACb;;EAEA;IACE,sBAAsB;EACxB;AACF",sourcesContent:[".chat-history {\n  padding: 2rem;\n  max-width: 1200px;\n  margin: 0 auto;\n}\n\n.chat-history-header {\n  text-align: center;\n  margin-bottom: 2rem;\n}\n\n.chat-history-header h2 {\n  margin: 0 0 0.5rem 0;\n  color: var(--text-primary);\n  font-size: 2rem;\n}\n\n.chat-history-header p {\n  margin: 0;\n  color: var(--text-secondary);\n  font-size: 1.1rem;\n}\n\n.chat-history-controls {\n  display: flex;\n  gap: 1rem;\n  margin-bottom: 2rem;\n  flex-wrap: wrap;\n}\n\n.search-section {\n  flex: 1;\n  min-width: 300px;\n}\n\n.search-input-wrapper {\n  position: relative;\n  display: flex;\n  align-items: center;\n}\n\n.search-icon {\n  position: absolute;\n  left: 1rem;\n  color: var(--text-secondary);\n}\n\n.search-input {\n  width: 100%;\n  padding: 0.75rem 1rem 0.75rem 3rem;\n  border: 1px solid var(--border-color);\n  border-radius: 8px;\n  background: var(--bg-secondary);\n  color: var(--text-primary);\n  font-size: 1rem;\n}\n\n.search-input:focus {\n  outline: none;\n  border-color: var(--accent-color);\n}\n\n.filter-section {\n  min-width: 200px;\n}\n\n.filter-select {\n  width: 100%;\n  padding: 0.75rem;\n  border: 1px solid var(--border-color);\n  border-radius: 8px;\n  background: var(--bg-secondary);\n  color: var(--text-primary);\n  font-size: 1rem;\n  cursor: pointer;\n}\n\n.filter-select:focus {\n  outline: none;\n  border-color: var(--accent-color);\n}\n\n.chat-history-content {\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  gap: 2rem;\n}\n\n.sessions-list {\n  display: flex;\n  flex-direction: column;\n  gap: 1rem;\n}\n\n.no-sessions {\n  text-align: center;\n  padding: 3rem 1rem;\n  color: var(--text-secondary);\n}\n\n.no-sessions h3 {\n  margin: 1rem 0 0.5rem 0;\n  color: var(--text-primary);\n}\n\n.no-sessions p {\n  margin: 0;\n  font-size: 0.9rem;\n}\n\n.session-item {\n  background: var(--bg-secondary);\n  border: 1px solid var(--border-color);\n  border-radius: 12px;\n  padding: 1.5rem;\n  cursor: pointer;\n  transition: all 0.2s ease;\n}\n\n.session-item:hover {\n  border-color: var(--accent-color);\n  transform: translateY(-2px);\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);\n}\n\n.session-item.selected {\n  border-color: var(--accent-color);\n  background: var(--accent-color);\n  color: white;\n}\n\n.session-item.selected .session-node,\n.session-item.selected .session-meta,\n.session-item.selected .session-preview {\n  color: white;\n}\n\n.session-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 1rem;\n}\n\n.session-node {\n  display: flex;\n  align-items: center;\n  gap: 0.5rem;\n  font-weight: 600;\n  color: var(--text-primary);\n}\n\n.session-meta {\n  display: flex;\n  gap: 1rem;\n  font-size: 0.85rem;\n  color: var(--text-secondary);\n}\n\n.session-meta span {\n  display: flex;\n  align-items: center;\n  gap: 0.25rem;\n}\n\n.session-preview {\n  color: var(--text-secondary);\n  margin-bottom: 1rem;\n  line-height: 1.4;\n  font-size: 0.9rem;\n}\n\n.session-actions {\n  display: flex;\n  gap: 0.5rem;\n}\n\n.button.small {\n  padding: 0.5rem 1rem;\n  font-size: 0.85rem;\n}\n\n.button.danger {\n  background: var(--error-color);\n  color: white;\n}\n\n.button.danger:hover {\n  background: #c82333;\n}\n\n.session-detail {\n  background: var(--bg-secondary);\n  border: 1px solid var(--border-color);\n  border-radius: 12px;\n  padding: 1.5rem;\n  height: fit-content;\n  position: sticky;\n  top: 2rem;\n}\n\n.session-detail-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 1.5rem;\n  padding-bottom: 1rem;\n  border-bottom: 1px solid var(--border-color);\n}\n\n.session-detail-header h3 {\n  margin: 0;\n  color: var(--text-primary);\n}\n\n.close-detail {\n  background: none;\n  border: none;\n  color: var(--text-secondary);\n  cursor: pointer;\n  font-size: 1.5rem;\n  padding: 0.25rem;\n  border-radius: 4px;\n  transition: all 0.2s ease;\n}\n\n.close-detail:hover {\n  color: var(--text-primary);\n  background: var(--bg-primary);\n}\n\n.session-info {\n  margin-bottom: 1.5rem;\n}\n\n.session-info p {\n  margin: 0.5rem 0;\n  color: var(--text-secondary);\n  font-size: 0.9rem;\n}\n\n.session-info strong {\n  color: var(--text-primary);\n}\n\n.session-messages h4 {\n  margin: 0 0 1rem 0;\n  color: var(--text-primary);\n  font-size: 1rem;\n}\n\n.detail-message {\n  margin-bottom: 1rem;\n  padding: 1rem;\n  border-radius: 8px;\n  background: var(--bg-primary);\n  border: 1px solid var(--border-color);\n}\n\n.message-role {\n  font-weight: 600;\n  color: var(--accent-color);\n  margin-bottom: 0.5rem;\n  font-size: 0.85rem;\n  text-transform: uppercase;\n}\n\n.message-content {\n  color: var(--text-primary);\n  line-height: 1.4;\n  margin-bottom: 0.5rem;\n}\n\n.message-time {\n  font-size: 0.75rem;\n  color: var(--text-secondary);\n  text-align: right;\n}\n\n/* Responsive Design */\n@media (max-width: 1024px) {\n  .chat-history-content {\n    grid-template-columns: 1fr;\n  }\n  \n  .session-detail {\n    position: static;\n  }\n}\n\n@media (max-width: 768px) {\n  .chat-history {\n    padding: 1rem;\n  }\n  \n  .chat-history-controls {\n    flex-direction: column;\n  }\n  \n  .search-section,\n  .filter-section {\n    min-width: auto;\n  }\n  \n  .session-header {\n    flex-direction: column;\n    align-items: flex-start;\n    gap: 0.5rem;\n  }\n  \n  .session-meta {\n    gap: 0.5rem;\n  }\n  \n  .session-actions {\n    flex-direction: column;\n  }\n}\n"],sourceRoot:""}]);const l=i},556:(e,n,t)=>{e.exports=t(694)()},577:(e,n,t)=>{"use strict";t.d(n,{A:()=>l});var r=t(354),o=t.n(r),a=t(314),i=t.n(a)()(o());i.push([e.id,'.api-settings {\n  padding: 2rem;\n  max-width: 1000px;\n  margin: 0 auto;\n}\n\n.api-settings-header {\n  text-align: center;\n  margin-bottom: 2rem;\n}\n\n.api-settings-header h2 {\n  margin: 0 0 0.5rem 0;\n  color: var(--text-primary);\n  font-size: 2rem;\n}\n\n.api-settings-header p {\n  margin: 0;\n  color: var(--text-secondary);\n  font-size: 1.1rem;\n}\n\n.save-message {\n  display: flex;\n  align-items: center;\n  gap: 0.5rem;\n  padding: 1rem;\n  border-radius: 8px;\n  margin-bottom: 2rem;\n  font-weight: 500;\n}\n\n.save-message.success {\n  background: var(--success-color);\n  color: white;\n}\n\n.save-message.error {\n  background: var(--error-color);\n  color: white;\n}\n\n.api-services {\n  display: flex;\n  flex-direction: column;\n  gap: 2rem;\n  margin-bottom: 2rem;\n}\n\n.api-service-card {\n  background: var(--bg-secondary);\n  border: 1px solid var(--border-color);\n  border-radius: 12px;\n  padding: 2rem;\n  transition: all 0.2s ease;\n}\n\n.api-service-card:hover {\n  border-color: var(--accent-color);\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);\n}\n\n.service-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: flex-start;\n  margin-bottom: 1.5rem;\n  gap: 1rem;\n}\n\n.service-info h3 {\n  margin: 0 0 0.5rem 0;\n  color: var(--text-primary);\n  font-size: 1.5rem;\n  text-transform: capitalize;\n}\n\n.service-description {\n  margin: 0;\n  color: var(--text-secondary);\n  font-size: 0.9rem;\n  line-height: 1.4;\n}\n\n.service-status {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 0.5rem;\n  text-align: center;\n}\n\n.status-icon {\n  margin: 0;\n}\n\n.status-icon.success {\n  color: var(--success-color);\n}\n\n.status-icon.error {\n  color: var(--error-color);\n}\n\n.status-icon.warning {\n  color: var(--warning-color);\n}\n\n.status-text {\n  font-size: 0.85rem;\n  font-weight: 500;\n  color: var(--text-primary);\n}\n\n.service-config {\n  display: flex;\n  flex-direction: column;\n  gap: 1.5rem;\n}\n\n.api-key-input {\n  position: relative;\n  display: flex;\n  align-items: center;\n}\n\n.key-icon {\n  position: absolute;\n  left: 1rem;\n  color: var(--text-secondary);\n  z-index: 1;\n}\n\n.api-key-input .input {\n  padding-left: 3rem;\n  padding-right: 3rem;\n}\n\n.toggle-key-button {\n  position: absolute;\n  right: 0.75rem;\n  background: none;\n  border: none;\n  color: var(--text-secondary);\n  cursor: pointer;\n  padding: 0.5rem;\n  border-radius: 4px;\n  transition: all 0.2s ease;\n}\n\n.toggle-key-button:hover {\n  color: var(--text-primary);\n  background: var(--bg-primary);\n}\n\n.help-text {\n  display: block;\n  margin-top: 0.5rem;\n  font-size: 0.85rem;\n  color: var(--text-secondary);\n  line-height: 1.4;\n}\n\n.service-toggle {\n  display: flex;\n  align-items: center;\n  gap: 0.75rem;\n  cursor: pointer;\n  user-select: none;\n}\n\n.service-toggle input[type="checkbox"] {\n  width: 20px;\n  height: 20px;\n  accent-color: var(--accent-color);\n}\n\n.toggle-label {\n  font-weight: 500;\n  color: var(--text-primary);\n}\n\n.api-settings-actions {\n  display: flex;\n  justify-content: flex-end;\n  gap: 1rem;\n  margin-bottom: 2rem;\n}\n\n.api-settings-info {\n  background: var(--bg-secondary);\n  border: 1px solid var(--border-color);\n  border-radius: 12px;\n  padding: 1.5rem;\n}\n\n.api-settings-info h4 {\n  margin: 0 0 1rem 0;\n  color: var(--text-primary);\n  font-size: 1.1rem;\n}\n\n.api-settings-info ul {\n  margin: 0;\n  padding-left: 1.5rem;\n  color: var(--text-secondary);\n  line-height: 1.6;\n}\n\n.api-settings-info li {\n  margin-bottom: 0.5rem;\n}\n\n.api-settings-info li:last-child {\n  margin-bottom: 0;\n}\n\n/* Responsive Design */\n@media (max-width: 768px) {\n  .api-settings {\n    padding: 1rem;\n  }\n  \n  .service-header {\n    flex-direction: column;\n    align-items: flex-start;\n    gap: 1rem;\n  }\n  \n  .service-status {\n    align-self: flex-start;\n  }\n  \n  .api-settings-actions {\n    flex-direction: column;\n    align-items: stretch;\n  }\n  \n  .api-service-card {\n    padding: 1.5rem;\n  }\n}\n\n/* Form Enhancements */\n.form-group {\n  margin-bottom: 0;\n}\n\n.label {\n  display: block;\n  margin-bottom: 0.5rem;\n  font-weight: 600;\n  color: var(--text-primary);\n}\n\n.input {\n  width: 100%;\n  padding: 0.75rem;\n  border: 1px solid var(--border-color);\n  border-radius: 8px;\n  background: var(--bg-primary);\n  color: var(--text-primary);\n  font-size: 1rem;\n  transition: border-color 0.2s ease;\n}\n\n.input:focus {\n  outline: none;\n  border-color: var(--accent-color);\n  box-shadow: 0 0 0 3px rgba(0, 123, 255, 0.1);\n}\n\n.input:disabled {\n  background: var(--bg-secondary);\n  color: var(--text-secondary);\n  cursor: not-allowed;\n}\n\n/* Button Enhancements */\n.button {\n  display: flex;\n  align-items: center;\n  gap: 0.5rem;\n  background: var(--accent-color);\n  color: white;\n  border: none;\n  padding: 0.75rem 1.5rem;\n  border-radius: 8px;\n  cursor: pointer;\n  font-size: 1rem;\n  font-weight: 500;\n  transition: all 0.2s ease;\n}\n\n.button:hover:not(:disabled) {\n  background: var(--accent-hover);\n  transform: translateY(-1px);\n}\n\n.button:disabled {\n  background: var(--text-secondary);\n  cursor: not-allowed;\n  transform: none;\n}\n\n.button.secondary {\n  background: transparent;\n  color: var(--accent-color);\n  border: 1px solid var(--accent-color);\n}\n\n.button.secondary:hover:not(:disabled) {\n  background: var(--accent-color);\n  color: white;\n}\n',"",{version:3,sources:["webpack://./src/components/APISettings.css"],names:[],mappings:"AAAA;EACE,aAAa;EACb,iBAAiB;EACjB,cAAc;AAChB;;AAEA;EACE,kBAAkB;EAClB,mBAAmB;AACrB;;AAEA;EACE,oBAAoB;EACpB,0BAA0B;EAC1B,eAAe;AACjB;;AAEA;EACE,SAAS;EACT,4BAA4B;EAC5B,iBAAiB;AACnB;;AAEA;EACE,aAAa;EACb,mBAAmB;EACnB,WAAW;EACX,aAAa;EACb,kBAAkB;EAClB,mBAAmB;EACnB,gBAAgB;AAClB;;AAEA;EACE,gCAAgC;EAChC,YAAY;AACd;;AAEA;EACE,8BAA8B;EAC9B,YAAY;AACd;;AAEA;EACE,aAAa;EACb,sBAAsB;EACtB,SAAS;EACT,mBAAmB;AACrB;;AAEA;EACE,+BAA+B;EAC/B,qCAAqC;EACrC,mBAAmB;EACnB,aAAa;EACb,yBAAyB;AAC3B;;AAEA;EACE,iCAAiC;EACjC,yCAAyC;AAC3C;;AAEA;EACE,aAAa;EACb,8BAA8B;EAC9B,uBAAuB;EACvB,qBAAqB;EACrB,SAAS;AACX;;AAEA;EACE,oBAAoB;EACpB,0BAA0B;EAC1B,iBAAiB;EACjB,0BAA0B;AAC5B;;AAEA;EACE,SAAS;EACT,4BAA4B;EAC5B,iBAAiB;EACjB,gBAAgB;AAClB;;AAEA;EACE,aAAa;EACb,sBAAsB;EACtB,mBAAmB;EACnB,WAAW;EACX,kBAAkB;AACpB;;AAEA;EACE,SAAS;AACX;;AAEA;EACE,2BAA2B;AAC7B;;AAEA;EACE,yBAAyB;AAC3B;;AAEA;EACE,2BAA2B;AAC7B;;AAEA;EACE,kBAAkB;EAClB,gBAAgB;EAChB,0BAA0B;AAC5B;;AAEA;EACE,aAAa;EACb,sBAAsB;EACtB,WAAW;AACb;;AAEA;EACE,kBAAkB;EAClB,aAAa;EACb,mBAAmB;AACrB;;AAEA;EACE,kBAAkB;EAClB,UAAU;EACV,4BAA4B;EAC5B,UAAU;AACZ;;AAEA;EACE,kBAAkB;EAClB,mBAAmB;AACrB;;AAEA;EACE,kBAAkB;EAClB,cAAc;EACd,gBAAgB;EAChB,YAAY;EACZ,4BAA4B;EAC5B,eAAe;EACf,eAAe;EACf,kBAAkB;EAClB,yBAAyB;AAC3B;;AAEA;EACE,0BAA0B;EAC1B,6BAA6B;AAC/B;;AAEA;EACE,cAAc;EACd,kBAAkB;EAClB,kBAAkB;EAClB,4BAA4B;EAC5B,gBAAgB;AAClB;;AAEA;EACE,aAAa;EACb,mBAAmB;EACnB,YAAY;EACZ,eAAe;EACf,iBAAiB;AACnB;;AAEA;EACE,WAAW;EACX,YAAY;EACZ,iCAAiC;AACnC;;AAEA;EACE,gBAAgB;EAChB,0BAA0B;AAC5B;;AAEA;EACE,aAAa;EACb,yBAAyB;EACzB,SAAS;EACT,mBAAmB;AACrB;;AAEA;EACE,+BAA+B;EAC/B,qCAAqC;EACrC,mBAAmB;EACnB,eAAe;AACjB;;AAEA;EACE,kBAAkB;EAClB,0BAA0B;EAC1B,iBAAiB;AACnB;;AAEA;EACE,SAAS;EACT,oBAAoB;EACpB,4BAA4B;EAC5B,gBAAgB;AAClB;;AAEA;EACE,qBAAqB;AACvB;;AAEA;EACE,gBAAgB;AAClB;;AAEA,sBAAsB;AACtB;EACE;IACE,aAAa;EACf;;EAEA;IACE,sBAAsB;IACtB,uBAAuB;IACvB,SAAS;EACX;;EAEA;IACE,sBAAsB;EACxB;;EAEA;IACE,sBAAsB;IACtB,oBAAoB;EACtB;;EAEA;IACE,eAAe;EACjB;AACF;;AAEA,sBAAsB;AACtB;EACE,gBAAgB;AAClB;;AAEA;EACE,cAAc;EACd,qBAAqB;EACrB,gBAAgB;EAChB,0BAA0B;AAC5B;;AAEA;EACE,WAAW;EACX,gBAAgB;EAChB,qCAAqC;EACrC,kBAAkB;EAClB,6BAA6B;EAC7B,0BAA0B;EAC1B,eAAe;EACf,kCAAkC;AACpC;;AAEA;EACE,aAAa;EACb,iCAAiC;EACjC,4CAA4C;AAC9C;;AAEA;EACE,+BAA+B;EAC/B,4BAA4B;EAC5B,mBAAmB;AACrB;;AAEA,wBAAwB;AACxB;EACE,aAAa;EACb,mBAAmB;EACnB,WAAW;EACX,+BAA+B;EAC/B,YAAY;EACZ,YAAY;EACZ,uBAAuB;EACvB,kBAAkB;EAClB,eAAe;EACf,eAAe;EACf,gBAAgB;EAChB,yBAAyB;AAC3B;;AAEA;EACE,+BAA+B;EAC/B,2BAA2B;AAC7B;;AAEA;EACE,iCAAiC;EACjC,mBAAmB;EACnB,eAAe;AACjB;;AAEA;EACE,uBAAuB;EACvB,0BAA0B;EAC1B,qCAAqC;AACvC;;AAEA;EACE,+BAA+B;EAC/B,YAAY;AACd",sourcesContent:['.api-settings {\n  padding: 2rem;\n  max-width: 1000px;\n  margin: 0 auto;\n}\n\n.api-settings-header {\n  text-align: center;\n  margin-bottom: 2rem;\n}\n\n.api-settings-header h2 {\n  margin: 0 0 0.5rem 0;\n  color: var(--text-primary);\n  font-size: 2rem;\n}\n\n.api-settings-header p {\n  margin: 0;\n  color: var(--text-secondary);\n  font-size: 1.1rem;\n}\n\n.save-message {\n  display: flex;\n  align-items: center;\n  gap: 0.5rem;\n  padding: 1rem;\n  border-radius: 8px;\n  margin-bottom: 2rem;\n  font-weight: 500;\n}\n\n.save-message.success {\n  background: var(--success-color);\n  color: white;\n}\n\n.save-message.error {\n  background: var(--error-color);\n  color: white;\n}\n\n.api-services {\n  display: flex;\n  flex-direction: column;\n  gap: 2rem;\n  margin-bottom: 2rem;\n}\n\n.api-service-card {\n  background: var(--bg-secondary);\n  border: 1px solid var(--border-color);\n  border-radius: 12px;\n  padding: 2rem;\n  transition: all 0.2s ease;\n}\n\n.api-service-card:hover {\n  border-color: var(--accent-color);\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);\n}\n\n.service-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: flex-start;\n  margin-bottom: 1.5rem;\n  gap: 1rem;\n}\n\n.service-info h3 {\n  margin: 0 0 0.5rem 0;\n  color: var(--text-primary);\n  font-size: 1.5rem;\n  text-transform: capitalize;\n}\n\n.service-description {\n  margin: 0;\n  color: var(--text-secondary);\n  font-size: 0.9rem;\n  line-height: 1.4;\n}\n\n.service-status {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 0.5rem;\n  text-align: center;\n}\n\n.status-icon {\n  margin: 0;\n}\n\n.status-icon.success {\n  color: var(--success-color);\n}\n\n.status-icon.error {\n  color: var(--error-color);\n}\n\n.status-icon.warning {\n  color: var(--warning-color);\n}\n\n.status-text {\n  font-size: 0.85rem;\n  font-weight: 500;\n  color: var(--text-primary);\n}\n\n.service-config {\n  display: flex;\n  flex-direction: column;\n  gap: 1.5rem;\n}\n\n.api-key-input {\n  position: relative;\n  display: flex;\n  align-items: center;\n}\n\n.key-icon {\n  position: absolute;\n  left: 1rem;\n  color: var(--text-secondary);\n  z-index: 1;\n}\n\n.api-key-input .input {\n  padding-left: 3rem;\n  padding-right: 3rem;\n}\n\n.toggle-key-button {\n  position: absolute;\n  right: 0.75rem;\n  background: none;\n  border: none;\n  color: var(--text-secondary);\n  cursor: pointer;\n  padding: 0.5rem;\n  border-radius: 4px;\n  transition: all 0.2s ease;\n}\n\n.toggle-key-button:hover {\n  color: var(--text-primary);\n  background: var(--bg-primary);\n}\n\n.help-text {\n  display: block;\n  margin-top: 0.5rem;\n  font-size: 0.85rem;\n  color: var(--text-secondary);\n  line-height: 1.4;\n}\n\n.service-toggle {\n  display: flex;\n  align-items: center;\n  gap: 0.75rem;\n  cursor: pointer;\n  user-select: none;\n}\n\n.service-toggle input[type="checkbox"] {\n  width: 20px;\n  height: 20px;\n  accent-color: var(--accent-color);\n}\n\n.toggle-label {\n  font-weight: 500;\n  color: var(--text-primary);\n}\n\n.api-settings-actions {\n  display: flex;\n  justify-content: flex-end;\n  gap: 1rem;\n  margin-bottom: 2rem;\n}\n\n.api-settings-info {\n  background: var(--bg-secondary);\n  border: 1px solid var(--border-color);\n  border-radius: 12px;\n  padding: 1.5rem;\n}\n\n.api-settings-info h4 {\n  margin: 0 0 1rem 0;\n  color: var(--text-primary);\n  font-size: 1.1rem;\n}\n\n.api-settings-info ul {\n  margin: 0;\n  padding-left: 1.5rem;\n  color: var(--text-secondary);\n  line-height: 1.6;\n}\n\n.api-settings-info li {\n  margin-bottom: 0.5rem;\n}\n\n.api-settings-info li:last-child {\n  margin-bottom: 0;\n}\n\n/* Responsive Design */\n@media (max-width: 768px) {\n  .api-settings {\n    padding: 1rem;\n  }\n  \n  .service-header {\n    flex-direction: column;\n    align-items: flex-start;\n    gap: 1rem;\n  }\n  \n  .service-status {\n    align-self: flex-start;\n  }\n  \n  .api-settings-actions {\n    flex-direction: column;\n    align-items: stretch;\n  }\n  \n  .api-service-card {\n    padding: 1.5rem;\n  }\n}\n\n/* Form Enhancements */\n.form-group {\n  margin-bottom: 0;\n}\n\n.label {\n  display: block;\n  margin-bottom: 0.5rem;\n  font-weight: 600;\n  color: var(--text-primary);\n}\n\n.input {\n  width: 100%;\n  padding: 0.75rem;\n  border: 1px solid var(--border-color);\n  border-radius: 8px;\n  background: var(--bg-primary);\n  color: var(--text-primary);\n  font-size: 1rem;\n  transition: border-color 0.2s ease;\n}\n\n.input:focus {\n  outline: none;\n  border-color: var(--accent-color);\n  box-shadow: 0 0 0 3px rgba(0, 123, 255, 0.1);\n}\n\n.input:disabled {\n  background: var(--bg-secondary);\n  color: var(--text-secondary);\n  cursor: not-allowed;\n}\n\n/* Button Enhancements */\n.button {\n  display: flex;\n  align-items: center;\n  gap: 0.5rem;\n  background: var(--accent-color);\n  color: white;\n  border: none;\n  padding: 0.75rem 1.5rem;\n  border-radius: 8px;\n  cursor: pointer;\n  font-size: 1rem;\n  font-weight: 500;\n  transition: all 0.2s ease;\n}\n\n.button:hover:not(:disabled) {\n  background: var(--accent-hover);\n  transform: translateY(-1px);\n}\n\n.button:disabled {\n  background: var(--text-secondary);\n  cursor: not-allowed;\n  transform: none;\n}\n\n.button.secondary {\n  background: transparent;\n  color: var(--accent-color);\n  border: 1px solid var(--accent-color);\n}\n\n.button.secondary:hover:not(:disabled) {\n  background: var(--accent-color);\n  color: white;\n}\n'],sourceRoot:""}]);const l=i},626:(e,n,t)=>{"use strict";t.d(n,{A:()=>l});var r=t(354),o=t.n(r),a=t(314),i=t.n(a)()(o());i.push([e.id,"/* App Layout */\n.app {\n  min-height: 100vh;\n  display: flex;\n  flex-direction: column;\n}\n\n.app.light {\n  --bg-primary: #ffffff;\n  --bg-secondary: #f8f9fa;\n  --text-primary: #212529;\n  --text-secondary: #6c757d;\n  --border-color: #dee2e6;\n  --accent-color: #007bff;\n  --accent-hover: #0056b3;\n  --success-color: #28a745;\n  --warning-color: #ffc107;\n  --error-color: #dc3545;\n}\n\n.app.dark {\n  --bg-primary: #1a1a1a;\n  --bg-secondary: #2d2d2d;\n  --text-primary: #ffffff;\n  --text-secondary: #b0b0b0;\n  --border-color: #404040;\n  --accent-color: #4dabf7;\n  --accent-hover: #74c0fc;\n  --success-color: #51cf66;\n  --warning-color: #ffd43b;\n  --error-color: #ff6b6b;\n}\n\n/* Navigation */\n.navigation {\n  background: var(--bg-secondary);\n  border-bottom: 1px solid var(--border-color);\n  padding: 0 2rem;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  min-height: 70px;\n}\n\n.nav-brand h1 {\n  margin: 0;\n  font-size: 1.5rem;\n  font-weight: 600;\n  color: var(--text-primary);\n}\n\n.nav-links {\n  display: flex;\n  list-style: none;\n  margin: 0;\n  padding: 0;\n  gap: 1rem;\n}\n\n.nav-links li a {\n  display: flex;\n  align-items: center;\n  gap: 0.5rem;\n  padding: 0.75rem 1rem;\n  text-decoration: none;\n  color: var(--text-secondary);\n  border-radius: 8px;\n  transition: all 0.2s ease;\n  font-weight: 500;\n}\n\n.nav-links li a:hover {\n  background: var(--bg-primary);\n  color: var(--text-primary);\n}\n\n.nav-links li a.active {\n  background: var(--accent-color);\n  color: white;\n}\n\n.nav-icon {\n  font-size: 1.2rem;\n}\n\n/* Main Content */\n.main-content {\n  flex: 1;\n  background: var(--bg-primary);\n  color: var(--text-primary);\n}\n\n/* Common Components */\n.card {\n  background: var(--bg-secondary);\n  border: 1px solid var(--border-color);\n  border-radius: 12px;\n  padding: 1.5rem;\n  margin: 1rem;\n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);\n}\n\n.button {\n  background: var(--accent-color);\n  color: white;\n  border: none;\n  padding: 0.75rem 1.5rem;\n  border-radius: 8px;\n  cursor: pointer;\n  font-size: 1rem;\n  font-weight: 500;\n  transition: background-color 0.2s ease;\n}\n\n.button:hover {\n  background: var(--accent-hover);\n}\n\n.button:disabled {\n  background: var(--text-secondary);\n  cursor: not-allowed;\n}\n\n.button.secondary {\n  background: transparent;\n  color: var(--accent-color);\n  border: 1px solid var(--accent-color);\n}\n\n.button.secondary:hover {\n  background: var(--accent-color);\n  color: white;\n}\n\n.input {\n  width: 100%;\n  padding: 0.75rem;\n  border: 1px solid var(--border-color);\n  border-radius: 8px;\n  background: var(--bg-primary);\n  color: var(--text-primary);\n  font-size: 1rem;\n}\n\n.input:focus {\n  outline: none;\n  border-color: var(--accent-color);\n  box-shadow: 0 0 0 3px rgba(0, 123, 255, 0.1);\n}\n\n.label {\n  display: block;\n  margin-bottom: 0.5rem;\n  font-weight: 500;\n  color: var(--text-primary);\n}\n\n.form-group {\n  margin-bottom: 1.5rem;\n}\n\n/* Responsive Design */\n@media (max-width: 768px) {\n  .navigation {\n    flex-direction: column;\n    padding: 1rem;\n    gap: 1rem;\n  }\n  \n  .nav-links {\n    flex-wrap: wrap;\n    justify-content: center;\n  }\n  \n  .nav-brand h1 {\n    font-size: 1.25rem;\n  }\n}\n\n/* Utility Classes */\n.text-center { text-align: center; }\n.text-left { text-align: left; }\n.text-right { text-align: right; }\n\n.mt-1 { margin-top: 0.25rem; }\n.mt-2 { margin-top: 0.5rem; }\n.mt-3 { margin-top: 1rem; }\n.mt-4 { margin-top: 1.5rem; }\n\n.mb-1 { margin-bottom: 0.25rem; }\n.mb-2 { margin-bottom: 0.5rem; }\n.mb-3 { margin-bottom: 1rem; }\n.mb-4 { margin-bottom: 1.5rem; }\n\n.p-1 { padding: 0.25rem; }\n.p-2 { padding: 0.5rem; }\n.p-3 { padding: 1rem; }\n.p-4 { padding: 1.5rem; }\n","",{version:3,sources:["webpack://./src/App.css"],names:[],mappings:"AAAA,eAAe;AACf;EACE,iBAAiB;EACjB,aAAa;EACb,sBAAsB;AACxB;;AAEA;EACE,qBAAqB;EACrB,uBAAuB;EACvB,uBAAuB;EACvB,yBAAyB;EACzB,uBAAuB;EACvB,uBAAuB;EACvB,uBAAuB;EACvB,wBAAwB;EACxB,wBAAwB;EACxB,sBAAsB;AACxB;;AAEA;EACE,qBAAqB;EACrB,uBAAuB;EACvB,uBAAuB;EACvB,yBAAyB;EACzB,uBAAuB;EACvB,uBAAuB;EACvB,uBAAuB;EACvB,wBAAwB;EACxB,wBAAwB;EACxB,sBAAsB;AACxB;;AAEA,eAAe;AACf;EACE,+BAA+B;EAC/B,4CAA4C;EAC5C,eAAe;EACf,aAAa;EACb,8BAA8B;EAC9B,mBAAmB;EACnB,gBAAgB;AAClB;;AAEA;EACE,SAAS;EACT,iBAAiB;EACjB,gBAAgB;EAChB,0BAA0B;AAC5B;;AAEA;EACE,aAAa;EACb,gBAAgB;EAChB,SAAS;EACT,UAAU;EACV,SAAS;AACX;;AAEA;EACE,aAAa;EACb,mBAAmB;EACnB,WAAW;EACX,qBAAqB;EACrB,qBAAqB;EACrB,4BAA4B;EAC5B,kBAAkB;EAClB,yBAAyB;EACzB,gBAAgB;AAClB;;AAEA;EACE,6BAA6B;EAC7B,0BAA0B;AAC5B;;AAEA;EACE,+BAA+B;EAC/B,YAAY;AACd;;AAEA;EACE,iBAAiB;AACnB;;AAEA,iBAAiB;AACjB;EACE,OAAO;EACP,6BAA6B;EAC7B,0BAA0B;AAC5B;;AAEA,sBAAsB;AACtB;EACE,+BAA+B;EAC/B,qCAAqC;EACrC,mBAAmB;EACnB,eAAe;EACf,YAAY;EACZ,wCAAwC;AAC1C;;AAEA;EACE,+BAA+B;EAC/B,YAAY;EACZ,YAAY;EACZ,uBAAuB;EACvB,kBAAkB;EAClB,eAAe;EACf,eAAe;EACf,gBAAgB;EAChB,sCAAsC;AACxC;;AAEA;EACE,+BAA+B;AACjC;;AAEA;EACE,iCAAiC;EACjC,mBAAmB;AACrB;;AAEA;EACE,uBAAuB;EACvB,0BAA0B;EAC1B,qCAAqC;AACvC;;AAEA;EACE,+BAA+B;EAC/B,YAAY;AACd;;AAEA;EACE,WAAW;EACX,gBAAgB;EAChB,qCAAqC;EACrC,kBAAkB;EAClB,6BAA6B;EAC7B,0BAA0B;EAC1B,eAAe;AACjB;;AAEA;EACE,aAAa;EACb,iCAAiC;EACjC,4CAA4C;AAC9C;;AAEA;EACE,cAAc;EACd,qBAAqB;EACrB,gBAAgB;EAChB,0BAA0B;AAC5B;;AAEA;EACE,qBAAqB;AACvB;;AAEA,sBAAsB;AACtB;EACE;IACE,sBAAsB;IACtB,aAAa;IACb,SAAS;EACX;;EAEA;IACE,eAAe;IACf,uBAAuB;EACzB;;EAEA;IACE,kBAAkB;EACpB;AACF;;AAEA,oBAAoB;AACpB,eAAe,kBAAkB,EAAE;AACnC,aAAa,gBAAgB,EAAE;AAC/B,cAAc,iBAAiB,EAAE;;AAEjC,QAAQ,mBAAmB,EAAE;AAC7B,QAAQ,kBAAkB,EAAE;AAC5B,QAAQ,gBAAgB,EAAE;AAC1B,QAAQ,kBAAkB,EAAE;;AAE5B,QAAQ,sBAAsB,EAAE;AAChC,QAAQ,qBAAqB,EAAE;AAC/B,QAAQ,mBAAmB,EAAE;AAC7B,QAAQ,qBAAqB,EAAE;;AAE/B,OAAO,gBAAgB,EAAE;AACzB,OAAO,eAAe,EAAE;AACxB,OAAO,aAAa,EAAE;AACtB,OAAO,eAAe,EAAE",sourcesContent:["/* App Layout */\n.app {\n  min-height: 100vh;\n  display: flex;\n  flex-direction: column;\n}\n\n.app.light {\n  --bg-primary: #ffffff;\n  --bg-secondary: #f8f9fa;\n  --text-primary: #212529;\n  --text-secondary: #6c757d;\n  --border-color: #dee2e6;\n  --accent-color: #007bff;\n  --accent-hover: #0056b3;\n  --success-color: #28a745;\n  --warning-color: #ffc107;\n  --error-color: #dc3545;\n}\n\n.app.dark {\n  --bg-primary: #1a1a1a;\n  --bg-secondary: #2d2d2d;\n  --text-primary: #ffffff;\n  --text-secondary: #b0b0b0;\n  --border-color: #404040;\n  --accent-color: #4dabf7;\n  --accent-hover: #74c0fc;\n  --success-color: #51cf66;\n  --warning-color: #ffd43b;\n  --error-color: #ff6b6b;\n}\n\n/* Navigation */\n.navigation {\n  background: var(--bg-secondary);\n  border-bottom: 1px solid var(--border-color);\n  padding: 0 2rem;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  min-height: 70px;\n}\n\n.nav-brand h1 {\n  margin: 0;\n  font-size: 1.5rem;\n  font-weight: 600;\n  color: var(--text-primary);\n}\n\n.nav-links {\n  display: flex;\n  list-style: none;\n  margin: 0;\n  padding: 0;\n  gap: 1rem;\n}\n\n.nav-links li a {\n  display: flex;\n  align-items: center;\n  gap: 0.5rem;\n  padding: 0.75rem 1rem;\n  text-decoration: none;\n  color: var(--text-secondary);\n  border-radius: 8px;\n  transition: all 0.2s ease;\n  font-weight: 500;\n}\n\n.nav-links li a:hover {\n  background: var(--bg-primary);\n  color: var(--text-primary);\n}\n\n.nav-links li a.active {\n  background: var(--accent-color);\n  color: white;\n}\n\n.nav-icon {\n  font-size: 1.2rem;\n}\n\n/* Main Content */\n.main-content {\n  flex: 1;\n  background: var(--bg-primary);\n  color: var(--text-primary);\n}\n\n/* Common Components */\n.card {\n  background: var(--bg-secondary);\n  border: 1px solid var(--border-color);\n  border-radius: 12px;\n  padding: 1.5rem;\n  margin: 1rem;\n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);\n}\n\n.button {\n  background: var(--accent-color);\n  color: white;\n  border: none;\n  padding: 0.75rem 1.5rem;\n  border-radius: 8px;\n  cursor: pointer;\n  font-size: 1rem;\n  font-weight: 500;\n  transition: background-color 0.2s ease;\n}\n\n.button:hover {\n  background: var(--accent-hover);\n}\n\n.button:disabled {\n  background: var(--text-secondary);\n  cursor: not-allowed;\n}\n\n.button.secondary {\n  background: transparent;\n  color: var(--accent-color);\n  border: 1px solid var(--accent-color);\n}\n\n.button.secondary:hover {\n  background: var(--accent-color);\n  color: white;\n}\n\n.input {\n  width: 100%;\n  padding: 0.75rem;\n  border: 1px solid var(--border-color);\n  border-radius: 8px;\n  background: var(--bg-primary);\n  color: var(--text-primary);\n  font-size: 1rem;\n}\n\n.input:focus {\n  outline: none;\n  border-color: var(--accent-color);\n  box-shadow: 0 0 0 3px rgba(0, 123, 255, 0.1);\n}\n\n.label {\n  display: block;\n  margin-bottom: 0.5rem;\n  font-weight: 500;\n  color: var(--text-primary);\n}\n\n.form-group {\n  margin-bottom: 1.5rem;\n}\n\n/* Responsive Design */\n@media (max-width: 768px) {\n  .navigation {\n    flex-direction: column;\n    padding: 1rem;\n    gap: 1rem;\n  }\n  \n  .nav-links {\n    flex-wrap: wrap;\n    justify-content: center;\n  }\n  \n  .nav-brand h1 {\n    font-size: 1.25rem;\n  }\n}\n\n/* Utility Classes */\n.text-center { text-align: center; }\n.text-left { text-align: left; }\n.text-right { text-align: right; }\n\n.mt-1 { margin-top: 0.25rem; }\n.mt-2 { margin-top: 0.5rem; }\n.mt-3 { margin-top: 1rem; }\n.mt-4 { margin-top: 1.5rem; }\n\n.mb-1 { margin-bottom: 0.25rem; }\n.mb-2 { margin-bottom: 0.5rem; }\n.mb-3 { margin-bottom: 1rem; }\n.mb-4 { margin-bottom: 1.5rem; }\n\n.p-1 { padding: 0.25rem; }\n.p-2 { padding: 0.5rem; }\n.p-3 { padding: 1rem; }\n.p-4 { padding: 1.5rem; }\n"],sourceRoot:""}]);const l=i},659:e=>{"use strict";var n={};e.exports=function(e,t){var r=function(e){if(void 0===n[e]){var t=document.querySelector(e);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(e){t=null}n[e]=t}return n[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(t)}},694:(e,n,t)=>{"use strict";var r=t(925);function o(){}function a(){}a.resetWarningCache=o,e.exports=function(){function e(e,n,t,o,a,i){if(i!==r){var l=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw l.name="Invariant Violation",l}}function n(){return e}e.isRequired=e;var t={array:e,bigint:e,bool:e,func:e,number:e,object:e,string:e,symbol:e,any:e,arrayOf:n,element:e,elementType:e,instanceOf:n,node:e,objectOf:n,oneOf:n,oneOfType:n,shape:n,exact:n,checkPropTypes:a,resetWarningCache:o};return t.PropTypes=t,t}},698:(e,n)=>{"use strict";var t=Symbol.for("react.transitional.element"),r=Symbol.for("react.fragment");function o(e,n,r){var o=null;if(void 0!==r&&(o=""+r),void 0!==n.key&&(o=""+n.key),"key"in n)for(var a in r={},n)"key"!==a&&(r[a]=n[a]);else r=n;return n=r.ref,{$$typeof:t,type:e,key:o,ref:void 0!==n?n:null,props:r}}n.Fragment=r,n.jsx=o,n.jsxs=o},825:e=>{"use strict";e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var n=e.insertStyleElement(e);return{update:function(t){!function(e,n,t){var r="";t.supports&&(r+="@supports (".concat(t.supports,") {")),t.media&&(r+="@media ".concat(t.media," {"));var o=void 0!==t.layer;o&&(r+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),r+=t.css,o&&(r+="}"),t.media&&(r+="}"),t.supports&&(r+="}");var a=t.sourceMap;a&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),n.styleTagTransform(r,e,n.options)}(n,e,t)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)}}}},848:(e,n,t)=>{"use strict";e.exports=t(698)},869:(e,n)=>{"use strict";var t=Symbol.for("react.transitional.element"),r=Symbol.for("react.portal"),o=Symbol.for("react.fragment"),a=Symbol.for("react.strict_mode"),i=Symbol.for("react.profiler"),l=Symbol.for("react.consumer"),s=Symbol.for("react.context"),u=Symbol.for("react.forward_ref"),c=Symbol.for("react.suspense"),d=Symbol.for("react.memo"),f=Symbol.for("react.lazy"),h=Symbol.iterator,p={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},m=Object.assign,g={};function A(e,n,t){this.props=e,this.context=n,this.refs=g,this.updater=t||p}function y(){}function v(e,n,t){this.props=e,this.context=n,this.refs=g,this.updater=t||p}A.prototype.isReactComponent={},A.prototype.setState=function(e,n){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error("takes an object of state variables to update or a function which returns an object of state variables.");this.updater.enqueueSetState(this,e,n,"setState")},A.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},y.prototype=A.prototype;var b=v.prototype=new y;b.constructor=v,m(b,A.prototype),b.isPureReactComponent=!0;var x=Array.isArray,E={H:null,A:null,T:null,S:null,V:null},C=Object.prototype.hasOwnProperty;function w(e,n,r,o,a,i){return r=i.ref,{$$typeof:t,type:e,key:n,ref:void 0!==r?r:null,props:i}}function _(e){return"object"==typeof e&&null!==e&&e.$$typeof===t}var k=/\/+/g;function B(e,n){return"object"==typeof e&&null!==e&&null!=e.key?(t=""+e.key,r={"=":"=0",":":"=2"},"$"+t.replace(/[=:]/g,function(e){return r[e]})):n.toString(36);var t,r}function S(){}function z(e,n,o,a,i){var l=typeof e;"undefined"!==l&&"boolean"!==l||(e=null);var s,u,c=!1;if(null===e)c=!0;else switch(l){case"bigint":case"string":case"number":c=!0;break;case"object":switch(e.$$typeof){case t:case r:c=!0;break;case f:return z((c=e._init)(e._payload),n,o,a,i)}}if(c)return i=i(e),c=""===a?"."+B(e,0):a,x(i)?(o="",null!=c&&(o=c.replace(k,"$&/")+"/"),z(i,n,o,"",function(e){return e})):null!=i&&(_(i)&&(s=i,u=o+(null==i.key||e&&e.key===i.key?"":(""+i.key).replace(k,"$&/")+"/")+c,i=w(s.type,u,void 0,0,0,s.props)),n.push(i)),1;c=0;var d,p=""===a?".":a+":";if(x(e))for(var m=0;m<e.length;m++)c+=z(a=e[m],n,o,l=p+B(a,m),i);else if("function"==typeof(m=null===(d=e)||"object"!=typeof d?null:"function"==typeof(d=h&&d[h]||d["@@iterator"])?d:null))for(e=m.call(e),m=0;!(a=e.next()).done;)c+=z(a=a.value,n,o,l=p+B(a,m++),i);else if("object"===l){if("function"==typeof e.then)return z(function(e){switch(e.status){case"fulfilled":return e.value;case"rejected":throw e.reason;default:switch("string"==typeof e.status?e.then(S,S):(e.status="pending",e.then(function(n){"pending"===e.status&&(e.status="fulfilled",e.value=n)},function(n){"pending"===e.status&&(e.status="rejected",e.reason=n)})),e.status){case"fulfilled":return e.value;case"rejected":throw e.reason}}throw e}(e),n,o,a,i);throw n=String(e),Error("Objects are not valid as a React child (found: "+("[object Object]"===n?"object with keys {"+Object.keys(e).join(", ")+"}":n)+"). If you meant to render a collection of children, use an array instead.")}return c}function N(e,n,t){if(null==e)return e;var r=[],o=0;return z(e,r,"","",function(e){return n.call(t,e,o++)}),r}function j(e){if(-1===e._status){var n=e._result;(n=n()).then(function(n){0!==e._status&&-1!==e._status||(e._status=1,e._result=n)},function(n){0!==e._status&&-1!==e._status||(e._status=2,e._result=n)}),-1===e._status&&(e._status=0,e._result=n)}if(1===e._status)return e._result.default;throw e._result}var P="function"==typeof reportError?reportError:function(e){if("object"==typeof window&&"function"==typeof window.ErrorEvent){var n=new window.ErrorEvent("error",{bubbles:!0,cancelable:!0,message:"object"==typeof e&&null!==e&&"string"==typeof e.message?String(e.message):String(e),error:e});if(!window.dispatchEvent(n))return}else if("object"==typeof process&&"function"==typeof process.emit)return void process.emit("uncaughtException",e);console.error(e)};function T(){}n.Children={map:N,forEach:function(e,n,t){N(e,function(){n.apply(this,arguments)},t)},count:function(e){var n=0;return N(e,function(){n++}),n},toArray:function(e){return N(e,function(e){return e})||[]},only:function(e){if(!_(e))throw Error("React.Children.only expected to receive a single React element child.");return e}},n.Component=A,n.Fragment=o,n.Profiler=i,n.PureComponent=v,n.StrictMode=a,n.Suspense=c,n.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE=E,n.__COMPILER_RUNTIME={__proto__:null,c:function(e){return E.H.useMemoCache(e)}},n.cache=function(e){return function(){return e.apply(null,arguments)}},n.cloneElement=function(e,n,t){if(null==e)throw Error("The argument must be a React element, but you passed "+e+".");var r=m({},e.props),o=e.key;if(null!=n)for(a in n.ref,void 0!==n.key&&(o=""+n.key),n)!C.call(n,a)||"key"===a||"__self"===a||"__source"===a||"ref"===a&&void 0===n.ref||(r[a]=n[a]);var a=arguments.length-2;if(1===a)r.children=t;else if(1<a){for(var i=Array(a),l=0;l<a;l++)i[l]=arguments[l+2];r.children=i}return w(e.type,o,void 0,0,0,r)},n.createContext=function(e){return(e={$$typeof:s,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null}).Provider=e,e.Consumer={$$typeof:l,_context:e},e},n.createElement=function(e,n,t){var r,o={},a=null;if(null!=n)for(r in void 0!==n.key&&(a=""+n.key),n)C.call(n,r)&&"key"!==r&&"__self"!==r&&"__source"!==r&&(o[r]=n[r]);var i=arguments.length-2;if(1===i)o.children=t;else if(1<i){for(var l=Array(i),s=0;s<i;s++)l[s]=arguments[s+2];o.children=l}if(e&&e.defaultProps)for(r in i=e.defaultProps)void 0===o[r]&&(o[r]=i[r]);return w(e,a,void 0,0,0,o)},n.createRef=function(){return{current:null}},n.forwardRef=function(e){return{$$typeof:u,render:e}},n.isValidElement=_,n.lazy=function(e){return{$$typeof:f,_payload:{_status:-1,_result:e},_init:j}},n.memo=function(e,n){return{$$typeof:d,type:e,compare:void 0===n?null:n}},n.startTransition=function(e){var n=E.T,t={};E.T=t;try{var r=e(),o=E.S;null!==o&&o(t,r),"object"==typeof r&&null!==r&&"function"==typeof r.then&&r.then(T,P)}catch(e){P(e)}finally{E.T=n}},n.unstable_useCacheRefresh=function(){return E.H.useCacheRefresh()},n.use=function(e){return E.H.use(e)},n.useActionState=function(e,n,t){return E.H.useActionState(e,n,t)},n.useCallback=function(e,n){return E.H.useCallback(e,n)},n.useContext=function(e){return E.H.useContext(e)},n.useDebugValue=function(){},n.useDeferredValue=function(e,n){return E.H.useDeferredValue(e,n)},n.useEffect=function(e,n,t){var r=E.H;if("function"==typeof t)throw Error("useEffect CRUD overload is not enabled in this build of React.");return r.useEffect(e,n)},n.useId=function(){return E.H.useId()},n.useImperativeHandle=function(e,n,t){return E.H.useImperativeHandle(e,n,t)},n.useInsertionEffect=function(e,n){return E.H.useInsertionEffect(e,n)},n.useLayoutEffect=function(e,n){return E.H.useLayoutEffect(e,n)},n.useMemo=function(e,n){return E.H.useMemo(e,n)},n.useOptimistic=function(e,n){return E.H.useOptimistic(e,n)},n.useReducer=function(e,n,t){return E.H.useReducer(e,n,t)},n.useRef=function(e){return E.H.useRef(e)},n.useState=function(e){return E.H.useState(e)},n.useSyncExternalStore=function(e,n,t){return E.H.useSyncExternalStore(e,n,t)},n.useTransition=function(){return E.H.useTransition()},n.version="19.1.1"},925:e=>{"use strict";e.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},961:(e,n,t)=>{"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=t(221)},982:(e,n,t)=>{"use strict";e.exports=t(477)}},n={};function r(t){var o=n[t];if(void 0!==o)return o.exports;var a=n[t]={id:t,exports:{}};return e[t](a,a.exports,r),a.exports}r.n=e=>{var n=e&&e.__esModule?()=>e.default:()=>e;return r.d(n,{a:n}),n},r.d=(e,n)=>{for(var t in n)r.o(n,t)&&!r.o(e,t)&&Object.defineProperty(e,t,{enumerable:!0,get:n[t]})},r.o=(e,n)=>Object.prototype.hasOwnProperty.call(e,n),r.nc=void 0,(()=>{"use strict";var e=r(848),n=r(540),o=r(338),a="popstate";function i(e={}){return function(e,n,t,r={}){let{window:o=document.defaultView,v5Compat:i=!1}=r,s=o.history,f="POP",h=null,p=m();function m(){return(s.state||{idx:null}).idx}function g(){f="POP";let e=m(),n=null==e?null:e-p;p=e,h&&h({action:f,location:y.location,delta:n})}function A(e){return function(e,n=!1){let t="http://localhost";"undefined"!=typeof window&&(t="null"!==window.location.origin?window.location.origin:window.location.href),l(t,"No window.location.(origin|href) available to create URL");let r="string"==typeof e?e:d(e);return r=r.replace(/ $/,"%20"),!n&&r.startsWith("//")&&(r=t+r),new URL(r,t)}(e)}null==p&&(p=0,s.replaceState({...s.state,idx:p},""));let y={get action(){return f},get location(){return e(o,s)},listen(e){if(h)throw new Error("A history only accepts one active listener");return o.addEventListener(a,g),h=e,()=>{o.removeEventListener(a,g),h=null}},createHref:e=>n(o,e),createURL:A,encodeLocation(e){let n=A(e);return{pathname:n.pathname,search:n.search,hash:n.hash}},push:function(e,n){f="PUSH";let r=c(y.location,e,n);t&&t(r,e),p=m()+1;let a=u(r,p),l=y.createHref(r);try{s.pushState(a,"",l)}catch(e){if(e instanceof DOMException&&"DataCloneError"===e.name)throw e;o.location.assign(l)}i&&h&&h({action:f,location:y.location,delta:1})},replace:function(e,n){f="REPLACE";let r=c(y.location,e,n);t&&t(r,e),p=m();let o=u(r,p),a=y.createHref(r);s.replaceState(o,"",a),i&&h&&h({action:f,location:y.location,delta:0})},go:e=>s.go(e)};return y}(function(e,n){let{pathname:t,search:r,hash:o}=e.location;return c("",{pathname:t,search:r,hash:o},n.state&&n.state.usr||null,n.state&&n.state.key||"default")},function(e,n){return"string"==typeof n?n:d(n)},null,e)}function l(e,n){if(!1===e||null==e)throw new Error(n)}function s(e,n){if(!e){"undefined"!=typeof console&&console.warn(n);try{throw new Error(n)}catch(e){}}}function u(e,n){return{usr:e.state,key:e.key,idx:n}}function c(e,n,t=null,r){return{pathname:"string"==typeof e?e:e.pathname,search:"",hash:"",..."string"==typeof n?f(n):n,state:t,key:n&&n.key||r||Math.random().toString(36).substring(2,10)}}function d({pathname:e="/",search:n="",hash:t=""}){return n&&"?"!==n&&(e+="?"===n.charAt(0)?n:"?"+n),t&&"#"!==t&&(e+="#"===t.charAt(0)?t:"#"+t),e}function f(e){let n={};if(e){let t=e.indexOf("#");t>=0&&(n.hash=e.substring(t),e=e.substring(0,t));let r=e.indexOf("?");r>=0&&(n.search=e.substring(r),e=e.substring(0,r)),e&&(n.pathname=e)}return n}function h(e,n,t="/"){return function(e,n,t,r){let o=B(("string"==typeof n?f(n):n).pathname||"/",t);if(null==o)return null;let a=p(e);!function(e){e.sort((e,n)=>e.score!==n.score?n.score-e.score:function(e,n){let t=e.length===n.length&&e.slice(0,-1).every((e,t)=>e===n[t]);return t?e[e.length-1]-n[n.length-1]:0}(e.routesMeta.map(e=>e.childrenIndex),n.routesMeta.map(e=>e.childrenIndex)))}(a);let i=null;for(let e=0;null==i&&e<a.length;++e){let n=k(o);i=w(a[e],n,r)}return i}(e,n,t,!1)}function p(e,n=[],t=[],r=""){let o=(e,o,a)=>{let i={relativePath:void 0===a?e.path||"":a,caseSensitive:!0===e.caseSensitive,childrenIndex:o,route:e};i.relativePath.startsWith("/")&&(l(i.relativePath.startsWith(r),`Absolute route path "${i.relativePath}" nested under path "${r}" is not valid. An absolute child route path must start with the combined path of all its parent routes.`),i.relativePath=i.relativePath.slice(r.length));let s=j([r,i.relativePath]),u=t.concat(i);e.children&&e.children.length>0&&(l(!0!==e.index,`Index routes must not have child routes. Please remove all child routes from route path "${s}".`),p(e.children,n,u,s)),(null!=e.path||e.index)&&n.push({path:s,score:C(s,e.index),routesMeta:u})};return e.forEach((e,n)=>{if(""!==e.path&&e.path?.includes("?"))for(let t of m(e.path))o(e,n,t);else o(e,n)}),n}function m(e){let n=e.split("/");if(0===n.length)return[];let[t,...r]=n,o=t.endsWith("?"),a=t.replace(/\?$/,"");if(0===r.length)return o?[a,""]:[a];let i=m(r.join("/")),l=[];return l.push(...i.map(e=>""===e?a:[a,e].join("/"))),o&&l.push(...i),l.map(n=>e.startsWith("/")&&""===n?"/":n)}new WeakMap;var g=/^:[\w-]+$/,A=3,y=2,v=1,b=10,x=-2,E=e=>"*"===e;function C(e,n){let t=e.split("/"),r=t.length;return t.some(E)&&(r+=x),n&&(r+=y),t.filter(e=>!E(e)).reduce((e,n)=>e+(g.test(n)?A:""===n?v:b),r)}function w(e,n,t=!1){let{routesMeta:r}=e,o={},a="/",i=[];for(let e=0;e<r.length;++e){let l=r[e],s=e===r.length-1,u="/"===a?n:n.slice(a.length)||"/",c=_({path:l.relativePath,caseSensitive:l.caseSensitive,end:s},u),d=l.route;if(!c&&s&&t&&!r[r.length-1].route.index&&(c=_({path:l.relativePath,caseSensitive:l.caseSensitive,end:!1},u)),!c)return null;Object.assign(o,c.params),i.push({params:o,pathname:j([a,c.pathname]),pathnameBase:P(j([a,c.pathnameBase])),route:d}),"/"!==c.pathnameBase&&(a=j([a,c.pathnameBase]))}return i}function _(e,n){"string"==typeof e&&(e={path:e,caseSensitive:!1,end:!0});let[t,r]=function(e,n=!1,t=!0){s("*"===e||!e.endsWith("*")||e.endsWith("/*"),`Route path "${e}" will be treated as if it were "${e.replace(/\*$/,"/*")}" because the \`*\` character must always follow a \`/\` in the pattern. To get rid of this warning, please change the route path to "${e.replace(/\*$/,"/*")}".`);let r=[],o="^"+e.replace(/\/*\*?$/,"").replace(/^\/*/,"/").replace(/[\\.*+^${}|()[\]]/g,"\\$&").replace(/\/:([\w-]+)(\?)?/g,(e,n,t)=>(r.push({paramName:n,isOptional:null!=t}),t?"/?([^\\/]+)?":"/([^\\/]+)"));return e.endsWith("*")?(r.push({paramName:"*"}),o+="*"===e||"/*"===e?"(.*)$":"(?:\\/(.+)|\\/*)$"):t?o+="\\/*$":""!==e&&"/"!==e&&(o+="(?:(?=\\/|$))"),[new RegExp(o,n?void 0:"i"),r]}(e.path,e.caseSensitive,e.end),o=n.match(t);if(!o)return null;let a=o[0],i=a.replace(/(.)\/+$/,"$1"),l=o.slice(1);return{params:r.reduce((e,{paramName:n,isOptional:t},r)=>{if("*"===n){let e=l[r]||"";i=a.slice(0,a.length-e.length).replace(/(.)\/+$/,"$1")}const o=l[r];return e[n]=t&&!o?void 0:(o||"").replace(/%2F/g,"/"),e},{}),pathname:a,pathnameBase:i,pattern:e}}function k(e){try{return e.split("/").map(e=>decodeURIComponent(e).replace(/\//g,"%2F")).join("/")}catch(n){return s(!1,`The URL path "${e}" could not be decoded because it is a malformed URL segment. This is probably due to a bad percent encoding (${n}).`),e}}function B(e,n){if("/"===n)return e;if(!e.toLowerCase().startsWith(n.toLowerCase()))return null;let t=n.endsWith("/")?n.length-1:n.length,r=e.charAt(t);return r&&"/"!==r?null:e.slice(t)||"/"}function S(e,n,t,r){return`Cannot include a '${e}' character in a manually specified \`to.${n}\` field [${JSON.stringify(r)}].  Please separate it out to the \`to.${t}\` field. Alternatively you may provide the full path as a string in <Link to="..."> and the router will parse it for you.`}function z(e){let n=function(e){return e.filter((e,n)=>0===n||e.route.path&&e.route.path.length>0)}(e);return n.map((e,t)=>t===n.length-1?e.pathname:e.pathnameBase)}function N(e,n,t,r=!1){let o;"string"==typeof e?o=f(e):(o={...e},l(!o.pathname||!o.pathname.includes("?"),S("?","pathname","search",o)),l(!o.pathname||!o.pathname.includes("#"),S("#","pathname","hash",o)),l(!o.search||!o.search.includes("#"),S("#","search","hash",o)));let a,i=""===e||""===o.pathname,s=i?"/":o.pathname;if(null==s)a=t;else{let e=n.length-1;if(!r&&s.startsWith("..")){let n=s.split("/");for(;".."===n[0];)n.shift(),e-=1;o.pathname=n.join("/")}a=e>=0?n[e]:"/"}let u=function(e,n="/"){let{pathname:t,search:r="",hash:o=""}="string"==typeof e?f(e):e,a=t?t.startsWith("/")?t:function(e,n){let t=n.replace(/\/+$/,"").split("/");return e.split("/").forEach(e=>{".."===e?t.length>1&&t.pop():"."!==e&&t.push(e)}),t.length>1?t.join("/"):"/"}(t,n):n;return{pathname:a,search:T(r),hash:M(o)}}(o,a),c=s&&"/"!==s&&s.endsWith("/"),d=(i||"."===s)&&t.endsWith("/");return u.pathname.endsWith("/")||!c&&!d||(u.pathname+="/"),u}var j=e=>e.join("/").replace(/\/\/+/g,"/"),P=e=>e.replace(/\/+$/,"").replace(/^\/*/,"/"),T=e=>e&&"?"!==e?e.startsWith("?")?e:"?"+e:"",M=e=>e&&"#"!==e?e.startsWith("#")?e:"#"+e:"";function O(e){return null!=e&&"number"==typeof e.status&&"string"==typeof e.statusText&&"boolean"==typeof e.internal&&"data"in e}var R=["POST","PUT","PATCH","DELETE"],I=(new Set(R),["GET",...R]);new Set(I),Symbol("ResetLoaderData");var L=n.createContext(null);L.displayName="DataRouter";var D=n.createContext(null);D.displayName="DataRouterState";n.createContext(!1);var F=n.createContext({isTransitioning:!1});F.displayName="ViewTransition",n.createContext(new Map).displayName="Fetchers",n.createContext(null).displayName="Await";var U=n.createContext(null);U.displayName="Navigation";var $=n.createContext(null);$.displayName="Location";var q=n.createContext({outlet:null,matches:[],isDataRoute:!1});q.displayName="Route";var H=n.createContext(null);function W(){return null!=n.useContext($)}function Y(){return l(W(),"useLocation() may be used only in the context of a <Router> component."),n.useContext($).location}H.displayName="RouteError";var V="You should call navigate() in a React.useEffect(), not when your component is first rendered.";function X(e){n.useContext(U).static||n.useLayoutEffect(e)}function Q(){let{isDataRoute:e}=n.useContext(q);return e?function(){let{router:e}=function(e){let t=n.useContext(L);return l(t,te(e)),t}("useNavigate"),t=re("useNavigate"),r=n.useRef(!1);X(()=>{r.current=!0});let o=n.useCallback(async(n,o={})=>{s(r.current,V),r.current&&("number"==typeof n?e.navigate(n):await e.navigate(n,{fromRouteId:t,...o}))},[e,t]);return o}():function(){l(W(),"useNavigate() may be used only in the context of a <Router> component.");let e=n.useContext(L),{basename:t,navigator:r}=n.useContext(U),{matches:o}=n.useContext(q),{pathname:a}=Y(),i=JSON.stringify(z(o)),u=n.useRef(!1);X(()=>{u.current=!0});let c=n.useCallback((n,o={})=>{if(s(u.current,V),!u.current)return;if("number"==typeof n)return void r.go(n);let l=N(n,JSON.parse(i),a,"path"===o.relative);null==e&&"/"!==t&&(l.pathname="/"===l.pathname?t:j([t,l.pathname])),(o.replace?r.replace:r.push)(l,o.state,o)},[t,r,i,a,e]);return c}()}function G(e,{relative:t}={}){let{matches:r}=n.useContext(q),{pathname:o}=Y(),a=JSON.stringify(z(r));return n.useMemo(()=>N(e,JSON.parse(a),o,"path"===t),[e,a,o,t])}function K(e,t,r,o){l(W(),"useRoutes() may be used only in the context of a <Router> component.");let{navigator:a}=n.useContext(U),{matches:i}=n.useContext(q),u=i[i.length-1],c=u?u.params:{},d=u?u.pathname:"/",p=u?u.pathnameBase:"/",m=u&&u.route;{let e=m&&m.path||"";ae(d,!m||e.endsWith("*")||e.endsWith("*?"),`You rendered descendant <Routes> (or called \`useRoutes()\`) at "${d}" (under <Route path="${e}">) but the parent route path has no trailing "*". This means if you navigate deeper, the parent won't match anymore and therefore the child routes will never render.\n\nPlease change the parent <Route path="${e}"> to <Route path="${"/"===e?"*":`${e}/*`}">.`)}let g,A=Y();if(t){let e="string"==typeof t?f(t):t;l("/"===p||e.pathname?.startsWith(p),`When overriding the location using \`<Routes location>\` or \`useRoutes(routes, location)\`, the location pathname must begin with the portion of the URL pathname that was matched by all parent routes. The current pathname base is "${p}" but pathname "${e.pathname}" was given in the \`location\` prop.`),g=e}else g=A;let y=g.pathname||"/",v=y;if("/"!==p){let e=p.replace(/^\//,"").split("/");v="/"+y.replace(/^\//,"").split("/").slice(e.length).join("/")}let b=h(e,{pathname:v});s(m||null!=b,`No routes matched location "${g.pathname}${g.search}${g.hash}" `),s(null==b||void 0!==b[b.length-1].route.element||void 0!==b[b.length-1].route.Component||void 0!==b[b.length-1].route.lazy,`Matched leaf route at location "${g.pathname}${g.search}${g.hash}" does not have an element or Component. This means it will render an <Outlet /> with a null value by default resulting in an "empty" page.`);let x=function(e,t=[],r=null){if(null==e){if(!r)return null;if(r.errors)e=r.matches;else{if(0!==t.length||r.initialized||!(r.matches.length>0))return null;e=r.matches}}let o=e,a=r?.errors;if(null!=a){let e=o.findIndex(e=>e.route.id&&void 0!==a?.[e.route.id]);l(e>=0,`Could not find a matching route for errors on route IDs: ${Object.keys(a).join(",")}`),o=o.slice(0,Math.min(o.length,e+1))}let i=!1,s=-1;if(r)for(let e=0;e<o.length;e++){let n=o[e];if((n.route.HydrateFallback||n.route.hydrateFallbackElement)&&(s=e),n.route.id){let{loaderData:e,errors:t}=r,a=n.route.loader&&!e.hasOwnProperty(n.route.id)&&(!t||void 0===t[n.route.id]);if(n.route.lazy||a){i=!0,o=s>=0?o.slice(0,s+1):[o[0]];break}}}return o.reduceRight((e,l,u)=>{let c,d=!1,f=null,h=null;r&&(c=a&&l.route.id?a[l.route.id]:void 0,f=l.route.errorElement||J,i&&(s<0&&0===u?(ae("route-fallback",!1,"No `HydrateFallback` element provided to render during initial hydration"),d=!0,h=null):s===u&&(d=!0,h=l.route.hydrateFallbackElement||null)));let p=t.concat(o.slice(0,u+1)),m=()=>{let t;return t=c?f:d?h:l.route.Component?n.createElement(l.route.Component,null):l.route.element?l.route.element:e,n.createElement(ne,{match:l,routeContext:{outlet:e,matches:p,isDataRoute:null!=r},children:t})};return r&&(l.route.ErrorBoundary||l.route.errorElement||0===u)?n.createElement(ee,{location:r.location,revalidation:r.revalidation,component:f,error:c,children:m(),routeContext:{outlet:null,matches:p,isDataRoute:!0}}):m()},null)}(b&&b.map(e=>Object.assign({},e,{params:Object.assign({},c,e.params),pathname:j([p,a.encodeLocation?a.encodeLocation(e.pathname).pathname:e.pathname]),pathnameBase:"/"===e.pathnameBase?p:j([p,a.encodeLocation?a.encodeLocation(e.pathnameBase).pathname:e.pathnameBase])})),i,r,o);return t&&x?n.createElement($.Provider,{value:{location:{pathname:"/",search:"",hash:"",state:null,key:"default",...g},navigationType:"POP"}},x):x}function Z(){let e=function(){let e=n.useContext(H),t=function(e){let t=n.useContext(D);return l(t,te(e)),t}("useRouteError"),r=re("useRouteError");return void 0!==e?e:t.errors?.[r]}(),t=O(e)?`${e.status} ${e.statusText}`:e instanceof Error?e.message:JSON.stringify(e),r=e instanceof Error?e.stack:null,o="rgba(200,200,200, 0.5)",a={padding:"0.5rem",backgroundColor:o},i={padding:"2px 4px",backgroundColor:o},s=null;return console.error("Error handled by React Router default ErrorBoundary:",e),s=n.createElement(n.Fragment,null,n.createElement("p",null,"💿 Hey developer 👋"),n.createElement("p",null,"You can provide a way better UX than this when your app throws errors by providing your own ",n.createElement("code",{style:i},"ErrorBoundary")," or"," ",n.createElement("code",{style:i},"errorElement")," prop on your route.")),n.createElement(n.Fragment,null,n.createElement("h2",null,"Unexpected Application Error!"),n.createElement("h3",{style:{fontStyle:"italic"}},t),r?n.createElement("pre",{style:a},r):null,s)}n.createContext(null);var J=n.createElement(Z,null),ee=class extends n.Component{constructor(e){super(e),this.state={location:e.location,revalidation:e.revalidation,error:e.error}}static getDerivedStateFromError(e){return{error:e}}static getDerivedStateFromProps(e,n){return n.location!==e.location||"idle"!==n.revalidation&&"idle"===e.revalidation?{error:e.error,location:e.location,revalidation:e.revalidation}:{error:void 0!==e.error?e.error:n.error,location:n.location,revalidation:e.revalidation||n.revalidation}}componentDidCatch(e,n){console.error("React Router caught the following error during render",e,n)}render(){return void 0!==this.state.error?n.createElement(q.Provider,{value:this.props.routeContext},n.createElement(H.Provider,{value:this.state.error,children:this.props.component})):this.props.children}};function ne({routeContext:e,match:t,children:r}){let o=n.useContext(L);return o&&o.static&&o.staticContext&&(t.route.errorElement||t.route.ErrorBoundary)&&(o.staticContext._deepestRenderedBoundaryId=t.route.id),n.createElement(q.Provider,{value:e},r)}function te(e){return`${e} must be used within a data router.  See https://reactrouter.com/en/main/routers/picking-a-router.`}function re(e){let t=function(e){let t=n.useContext(q);return l(t,te(e)),t}(e),r=t.matches[t.matches.length-1];return l(r.route.id,`${e} can only be used on routes that contain a unique "id"`),r.route.id}var oe={};function ae(e,n,t){n||oe[e]||(oe[e]=!0,s(!1,t))}function ie(e){l(!1,"A <Route> is only ever to be used as the child of <Routes> element, never rendered directly. Please wrap your <Route> in a <Routes>.")}function le({basename:e="/",children:t=null,location:r,navigationType:o="POP",navigator:a,static:i=!1}){l(!W(),"You cannot render a <Router> inside another <Router>. You should never have more than one in your app.");let u=e.replace(/^\/*/,"/"),c=n.useMemo(()=>({basename:u,navigator:a,static:i,future:{}}),[u,a,i]);"string"==typeof r&&(r=f(r));let{pathname:d="/",search:h="",hash:p="",state:m=null,key:g="default"}=r,A=n.useMemo(()=>{let e=B(d,u);return null==e?null:{location:{pathname:e,search:h,hash:p,state:m,key:g},navigationType:o}},[u,d,h,p,m,g,o]);return s(null!=A,`<Router basename="${u}"> is not able to match the URL "${d}${h}${p}" because it does not start with the basename, so the <Router> won't render anything.`),null==A?null:n.createElement(U.Provider,{value:c},n.createElement($.Provider,{children:t,value:A}))}function se({children:e,location:n}){return K(ue(e),n)}function ue(e,t=[]){let r=[];return n.Children.forEach(e,(e,o)=>{if(!n.isValidElement(e))return;let a=[...t,o];if(e.type===n.Fragment)return void r.push.apply(r,ue(e.props.children,a));l(e.type===ie,`[${"string"==typeof e.type?e.type:e.type.name}] is not a <Route> component. All component children of <Routes> must be a <Route> or <React.Fragment>`),l(!e.props.index||!e.props.children,"An index route cannot have child routes.");let i={id:e.props.id||a.join("-"),caseSensitive:e.props.caseSensitive,element:e.props.element,Component:e.props.Component,index:e.props.index,path:e.props.path,loader:e.props.loader,action:e.props.action,hydrateFallbackElement:e.props.hydrateFallbackElement,HydrateFallback:e.props.HydrateFallback,errorElement:e.props.errorElement,ErrorBoundary:e.props.ErrorBoundary,hasErrorBoundary:!0===e.props.hasErrorBoundary||null!=e.props.ErrorBoundary||null!=e.props.errorElement,shouldRevalidate:e.props.shouldRevalidate,handle:e.props.handle,lazy:e.props.lazy};e.props.children&&(i.children=ue(e.props.children,a)),r.push(i)}),r}n.memo(function({routes:e,future:n,state:t}){return K(e,void 0,t,n)}),n.Component;var ce="get",de="application/x-www-form-urlencoded";function fe(e){return null!=e&&"string"==typeof e.tagName}var he=null,pe=new Set(["application/x-www-form-urlencoded","multipart/form-data","text/plain"]);function me(e){return null==e||pe.has(e)?e:(s(!1,`"${e}" is not a valid \`encType\` for \`<Form>\`/\`<fetcher.Form>\` and will default to "${de}"`),null)}function ge(e,n){if(!1===e||null==e)throw new Error(n)}function Ae(e){return null!=e&&(null==e.href?"preload"===e.rel&&"string"==typeof e.imageSrcSet&&"string"==typeof e.imageSizes:"string"==typeof e.rel&&"string"==typeof e.href)}function ye(e,n,t,r,o,a){let i=(e,n)=>!t[n]||e.route.id!==t[n].route.id,l=(e,n)=>t[n].pathname!==e.pathname||t[n].route.path?.endsWith("*")&&t[n].params["*"]!==e.params["*"];return"assets"===a?n.filter((e,n)=>i(e,n)||l(e,n)):"data"===a?n.filter((n,a)=>{let s=r.routes[n.route.id];if(!s||!s.hasLoader)return!1;if(i(n,a)||l(n,a))return!0;if(n.route.shouldRevalidate){let r=n.route.shouldRevalidate({currentUrl:new URL(o.pathname+o.search+o.hash,window.origin),currentParams:t[0]?.params||{},nextUrl:new URL(e,window.origin),nextParams:n.params,defaultShouldRevalidate:!0});if("boolean"==typeof r)return r}return!0}):[]}function ve(e,n,{includeHydrateFallback:t}={}){return r=e.map(e=>{let r=n.routes[e.route.id];if(!r)return[];let o=[r.module];return r.clientActionModule&&(o=o.concat(r.clientActionModule)),r.clientLoaderModule&&(o=o.concat(r.clientLoaderModule)),t&&r.hydrateFallbackModule&&(o=o.concat(r.hydrateFallbackModule)),r.imports&&(o=o.concat(r.imports)),o}).flat(1),[...new Set(r)];var r}function be(){let e=n.useContext(L);return ge(e,"You must render this element inside a <DataRouterContext.Provider> element"),e}function xe(){let e=n.useContext(D);return ge(e,"You must render this element inside a <DataRouterStateContext.Provider> element"),e}Object.getOwnPropertyNames(Object.prototype).sort().join("\0"),"undefined"!=typeof window?window:"undefined"!=typeof globalThis&&globalThis,Symbol("SingleFetchRedirect");var Ee=n.createContext(void 0);function Ce(){let e=n.useContext(Ee);return ge(e,"You must render this element inside a <HydratedRouter> element"),e}function we(e,n){return t=>{e&&e(t),t.defaultPrevented||n(t)}}function _e({page:e,...t}){let{router:r}=be(),o=n.useMemo(()=>h(r.routes,e,r.basename),[r.routes,e,r.basename]);return o?n.createElement(Be,{page:e,matches:o,...t}):null}function ke(e){let{manifest:t,routeModules:r}=Ce(),[o,a]=n.useState([]);return n.useEffect(()=>{let n=!1;return async function(e,n,t){return function(e,n){let t=new Set,r=new Set(n);return e.reduce((e,o)=>{if(n&&(null==(a=o)||"string"!=typeof a.page)&&"script"===o.as&&o.href&&r.has(o.href))return e;var a;let i=JSON.stringify(function(e){let n={},t=Object.keys(e).sort();for(let r of t)n[r]=e[r];return n}(o));return t.has(i)||(t.add(i),e.push({key:i,link:o})),e},[])}((await Promise.all(e.map(async e=>{let r=n.routes[e.route.id];if(r){let e=await async function(e,n){if(e.id in n)return n[e.id];try{let t=await import(e.module);return n[e.id]=t,t}catch(n){return console.error(`Error loading route module \`${e.module}\`, reloading page...`),console.error(n),window.__reactRouterContext&&window.__reactRouterContext.isSpaMode,window.location.reload(),new Promise(()=>{})}}(r,t);return e.links?e.links():[]}return[]}))).flat(1).filter(Ae).filter(e=>"stylesheet"===e.rel||"preload"===e.rel).map(e=>"stylesheet"===e.rel?{...e,rel:"prefetch",as:"style"}:{...e,rel:"prefetch"}))}(e,t,r).then(e=>{n||a(e)}),()=>{n=!0}},[e,t,r]),o}function Be({page:e,matches:t,...r}){let o=Y(),{manifest:a,routeModules:i}=Ce(),{basename:l}=be(),{loaderData:s,matches:u}=xe(),c=n.useMemo(()=>ye(e,t,u,a,o,"data"),[e,t,u,a,o]),d=n.useMemo(()=>ye(e,t,u,a,o,"assets"),[e,t,u,a,o]),f=n.useMemo(()=>{if(e===o.pathname+o.search+o.hash)return[];let n=new Set,r=!1;if(t.forEach(e=>{let t=a.routes[e.route.id];t&&t.hasLoader&&(!c.some(n=>n.route.id===e.route.id)&&e.route.id in s&&i[e.route.id]?.shouldRevalidate||t.hasClientLoader?r=!0:n.add(e.route.id))}),0===n.size)return[];let u=function(e,n,t){let r="string"==typeof e?new URL(e,"undefined"==typeof window?"server://singlefetch/":window.location.origin):e;return"/"===r.pathname?r.pathname=`_root.${t}`:n&&"/"===B(r.pathname,n)?r.pathname=`${n.replace(/\/$/,"")}/_root.${t}`:r.pathname=`${r.pathname.replace(/\/$/,"")}.${t}`,r}(e,l,"data");return r&&n.size>0&&u.searchParams.set("_routes",t.filter(e=>n.has(e.route.id)).map(e=>e.route.id).join(",")),[u.pathname+u.search]},[l,s,o,a,c,t,e,i]),h=n.useMemo(()=>ve(d,a),[d,a]),p=ke(d);return n.createElement(n.Fragment,null,f.map(e=>n.createElement("link",{key:e,rel:"prefetch",as:"fetch",href:e,...r})),h.map(e=>n.createElement("link",{key:e,rel:"modulepreload",href:e,...r})),p.map(({key:e,link:t})=>n.createElement("link",{key:e,nonce:r.nonce,...t})))}Ee.displayName="FrameworkContext";function Se(...e){return n=>{e.forEach(e=>{"function"==typeof e?e(n):null!=e&&(e.current=n)})}}n.Component;var ze="undefined"!=typeof window&&void 0!==window.document&&void 0!==window.document.createElement;try{ze&&(window.__reactRouterVersion="7.8.0")}catch(di){}function Ne({basename:e,children:t,window:r}){let o=n.useRef();null==o.current&&(o.current=i({window:r,v5Compat:!0}));let a=o.current,[l,s]=n.useState({action:a.action,location:a.location}),u=n.useCallback(e=>{n.startTransition(()=>s(e))},[s]);return n.useLayoutEffect(()=>a.listen(u),[a,u]),n.createElement(le,{basename:e,children:t,location:l.location,navigationType:l.action,navigator:a})}var je=/^(?:[a-z][a-z0-9+.-]*:|\/\/)/i,Pe=n.forwardRef(function({onClick:e,discover:t="render",prefetch:r="none",relative:o,reloadDocument:a,replace:i,state:u,target:c,to:f,preventScrollReset:h,viewTransition:p,...m},g){let A,{basename:y}=n.useContext(U),v="string"==typeof f&&je.test(f),b=!1;if("string"==typeof f&&v&&(A=f,ze))try{let e=new URL(window.location.href),n=f.startsWith("//")?new URL(e.protocol+f):new URL(f),t=B(n.pathname,y);n.origin===e.origin&&null!=t?f=t+n.search+n.hash:b=!0}catch(e){s(!1,`<Link to="${f}"> contains an invalid URL which will probably break when clicked - please update to a valid URL path.`)}let x=function(e,{relative:t}={}){l(W(),"useHref() may be used only in the context of a <Router> component.");let{basename:r,navigator:o}=n.useContext(U),{hash:a,pathname:i,search:s}=G(e,{relative:t}),u=i;return"/"!==r&&(u="/"===i?r:j([r,i])),o.createHref({pathname:u,search:s,hash:a})}(f,{relative:o}),[E,C,w]=function(e,t){let r=n.useContext(Ee),[o,a]=n.useState(!1),[i,l]=n.useState(!1),{onFocus:s,onBlur:u,onMouseEnter:c,onMouseLeave:d,onTouchStart:f}=t,h=n.useRef(null);n.useEffect(()=>{if("render"===e&&l(!0),"viewport"===e){let e=new IntersectionObserver(e=>{e.forEach(e=>{l(e.isIntersecting)})},{threshold:.5});return h.current&&e.observe(h.current),()=>{e.disconnect()}}},[e]),n.useEffect(()=>{if(o){let e=setTimeout(()=>{l(!0)},100);return()=>{clearTimeout(e)}}},[o]);let p=()=>{a(!0)},m=()=>{a(!1),l(!1)};return r?"intent"!==e?[i,h,{}]:[i,h,{onFocus:we(s,p),onBlur:we(u,m),onMouseEnter:we(c,p),onMouseLeave:we(d,m),onTouchStart:we(f,p)}]:[!1,h,{}]}(r,m),_=function(e,{target:t,replace:r,state:o,preventScrollReset:a,relative:i,viewTransition:l}={}){let s=Q(),u=Y(),c=G(e,{relative:i});return n.useCallback(n=>{if(function(e,n){return!(0!==e.button||n&&"_self"!==n||function(e){return!!(e.metaKey||e.altKey||e.ctrlKey||e.shiftKey)}(e))}(n,t)){n.preventDefault();let t=void 0!==r?r:d(u)===d(c);s(e,{replace:t,state:o,preventScrollReset:a,relative:i,viewTransition:l})}},[u,s,c,r,o,t,e,a,i,l])}(f,{replace:i,state:u,target:c,preventScrollReset:h,relative:o,viewTransition:p}),k=n.createElement("a",{...m,...w,href:A||x,onClick:b||a?e:function(n){e&&e(n),n.defaultPrevented||_(n)},ref:Se(g,C),target:c,"data-discover":v||"render"!==t?void 0:"true"});return E&&!v?n.createElement(n.Fragment,null,k,n.createElement(_e,{page:x})):k});Pe.displayName="Link";var Te=n.forwardRef(function({"aria-current":e="page",caseSensitive:t=!1,className:r="",end:o=!1,style:a,to:i,viewTransition:s,children:u,...c},d){let f=G(i,{relative:c.relative}),h=Y(),p=n.useContext(D),{navigator:m,basename:g}=n.useContext(U),A=null!=p&&function(e,{relative:t}={}){let r=n.useContext(F);l(null!=r,"`useViewTransitionState` must be used within `react-router-dom`'s `RouterProvider`.  Did you accidentally import `RouterProvider` from `react-router`?");let{basename:o}=Oe("useViewTransitionState"),a=G(e,{relative:t});if(!r.isTransitioning)return!1;let i=B(r.currentLocation.pathname,o)||r.currentLocation.pathname,s=B(r.nextLocation.pathname,o)||r.nextLocation.pathname;return null!=_(a.pathname,s)||null!=_(a.pathname,i)}(f)&&!0===s,y=m.encodeLocation?m.encodeLocation(f).pathname:f.pathname,v=h.pathname,b=p&&p.navigation&&p.navigation.location?p.navigation.location.pathname:null;t||(v=v.toLowerCase(),b=b?b.toLowerCase():null,y=y.toLowerCase()),b&&g&&(b=B(b,g)||b);const x="/"!==y&&y.endsWith("/")?y.length-1:y.length;let E,C=v===y||!o&&v.startsWith(y)&&"/"===v.charAt(x),w=null!=b&&(b===y||!o&&b.startsWith(y)&&"/"===b.charAt(y.length)),k={isActive:C,isPending:w,isTransitioning:A},S=C?e:void 0;E="function"==typeof r?r(k):[r,C?"active":null,w?"pending":null,A?"transitioning":null].filter(Boolean).join(" ");let z="function"==typeof a?a(k):a;return n.createElement(Pe,{...c,"aria-current":S,className:E,ref:d,style:z,to:i,viewTransition:s},"function"==typeof u?u(k):u)});Te.displayName="NavLink";var Me=n.forwardRef(({discover:e="render",fetcherKey:t,navigate:r,reloadDocument:o,replace:a,state:i,method:s=ce,action:u,onSubmit:c,relative:f,preventScrollReset:h,viewTransition:p,...m},g)=>{let A=function(){let{router:e}=Oe("useSubmit"),{basename:t}=n.useContext(U),r=re("useRouteId");return n.useCallback(async(n,o={})=>{let{action:a,method:i,encType:l,formData:s,body:u}=function(e,n){let t,r,o,a,i;if(fe(l=e)&&"form"===l.tagName.toLowerCase()){let i=e.getAttribute("action");r=i?B(i,n):null,t=e.getAttribute("method")||ce,o=me(e.getAttribute("enctype"))||de,a=new FormData(e)}else if(function(e){return fe(e)&&"button"===e.tagName.toLowerCase()}(e)||function(e){return fe(e)&&"input"===e.tagName.toLowerCase()}(e)&&("submit"===e.type||"image"===e.type)){let i=e.form;if(null==i)throw new Error('Cannot submit a <button> or <input type="submit"> without a <form>');let l=e.getAttribute("formaction")||i.getAttribute("action");if(r=l?B(l,n):null,t=e.getAttribute("formmethod")||i.getAttribute("method")||ce,o=me(e.getAttribute("formenctype"))||me(i.getAttribute("enctype"))||de,a=new FormData(i,e),!function(){if(null===he)try{new FormData(document.createElement("form"),0),he=!1}catch(e){he=!0}return he}()){let{name:n,type:t,value:r}=e;if("image"===t){let e=n?`${n}.`:"";a.append(`${e}x`,"0"),a.append(`${e}y`,"0")}else n&&a.append(n,r)}}else{if(fe(e))throw new Error('Cannot submit element that is not <form>, <button>, or <input type="submit|image">');t=ce,r=null,o=de,i=e}var l;return a&&"text/plain"===o&&(i=a,a=void 0),{action:r,method:t.toLowerCase(),encType:o,formData:a,body:i}}(n,t);if(!1===o.navigate){let n=o.fetcherKey||Ie();await e.fetch(n,r,o.action||a,{preventScrollReset:o.preventScrollReset,formData:s,body:u,formMethod:o.method||i,formEncType:o.encType||l,flushSync:o.flushSync})}else await e.navigate(o.action||a,{preventScrollReset:o.preventScrollReset,formData:s,body:u,formMethod:o.method||i,formEncType:o.encType||l,replace:o.replace,state:o.state,fromRouteId:r,flushSync:o.flushSync,viewTransition:o.viewTransition})},[e,t,r])}(),y=function(e,{relative:t}={}){let{basename:r}=n.useContext(U),o=n.useContext(q);l(o,"useFormAction must be used inside a RouteContext");let[a]=o.matches.slice(-1),i={...G(e||".",{relative:t})},s=Y();if(null==e){i.search=s.search;let e=new URLSearchParams(i.search),n=e.getAll("index"),t=n.some(e=>""===e);if(t){e.delete("index"),n.filter(e=>e).forEach(n=>e.append("index",n));let t=e.toString();i.search=t?`?${t}`:""}}return e&&"."!==e||!a.route.index||(i.search=i.search?i.search.replace(/^\?/,"?index&"):"?index"),"/"!==r&&(i.pathname="/"===i.pathname?r:j([r,i.pathname])),d(i)}(u,{relative:f}),v="get"===s.toLowerCase()?"get":"post",b="string"==typeof u&&je.test(u);return n.createElement("form",{ref:g,method:v,action:y,onSubmit:o?c:e=>{if(c&&c(e),e.defaultPrevented)return;e.preventDefault();let n=e.nativeEvent.submitter,o=n?.getAttribute("formmethod")||s;A(n||e.currentTarget,{fetcherKey:t,method:o,navigate:r,replace:a,state:i,relative:f,preventScrollReset:h,viewTransition:p})},...m,"data-discover":b||"render"!==e?void 0:"true"})});function Oe(e){let t=n.useContext(L);return l(t,function(e){return`${e} must be used within a data router.  See https://reactrouter.com/en/main/routers/picking-a-router.`}(e)),t}Me.displayName="Form";var Re=0,Ie=()=>`__${String(++Re)}__`;function Le(e,n){return function(e){if(Array.isArray(e))return e}(e)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var r,o,a,i,l=[],s=!0,u=!1;try{if(a=(t=t.call(e)).next,0===n){if(Object(t)!==t)return;s=!1}else for(;!(s=(r=a.call(t)).done)&&(l.push(r.value),l.length!==n);s=!0);}catch(e){u=!0,o=e}finally{try{if(!s&&null!=t.return&&(i=t.return(),Object(i)!==i))return}finally{if(u)throw o}}return l}}(e,n)||De(e,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function De(e,n){if(e){if("string"==typeof e)return Fe(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?Fe(e,n):void 0}}function Fe(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}function Ue(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=Array(n);t<n;t++)r[t]=e[t];return r}function $e(e){return function(e){if(Array.isArray(e))return Ue(e)}(e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||qe(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function qe(e,n){if(e){if("string"==typeof e)return Ue(e,n);var t={}.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?Ue(e,n):void 0}}function He(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:n.useEffect,r=(0,n.useRef)(),o=(0,n.useRef)(!1),a=(0,n.useRef)(!1),i=function(e,n){return function(e){if(Array.isArray(e))return e}(e)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var r,o,a,i,l=[],s=!0,u=!1;try{if(a=(t=t.call(e)).next,0===n);else for(;!(s=(r=a.call(t)).done)&&(l.push(r.value),l.length!==n);s=!0);}catch(e){u=!0,o=e}finally{try{if(!s&&null!=t.return&&(i=t.return(),Object(i)!==i))return}finally{if(u)throw o}}return l}}(e,n)||qe(e,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}((0,n.useState)(0),2);i[0];var l=i[1];o.current&&(a.current=!0),t(function(){return o.current||(r.current=e(),o.current=!0),l(function(e){return e+1}),function(){a.current&&r.current&&r.current()}},[])}function We(){}function Ye(e){return null==e?We:function(){return this.querySelector(e)}}function Ve(){return[]}function Xe(e){return null==e?Ve:function(){return this.querySelectorAll(e)}}function Qe(e){return function(){return this.matches(e)}}function Ge(e){return function(n){return n.matches(e)}}var Ke=Array.prototype.find;function Ze(){return this.firstElementChild}var Je=Array.prototype.filter;function en(){return Array.from(this.children)}function nn(e){return new Array(e.length)}function tn(e,n){this.ownerDocument=e.ownerDocument,this.namespaceURI=e.namespaceURI,this._next=null,this._parent=e,this.__data__=n}function rn(e,n,t,r,o,a){for(var i,l=0,s=n.length,u=a.length;l<u;++l)(i=n[l])?(i.__data__=a[l],r[l]=i):t[l]=new tn(e,a[l]);for(;l<s;++l)(i=n[l])&&(o[l]=i)}function on(e,n,t,r,o,a,i){var l,s,u,c=new Map,d=n.length,f=a.length,h=new Array(d);for(l=0;l<d;++l)(s=n[l])&&(h[l]=u=i.call(s,s.__data__,l,n)+"",c.has(u)?o[l]=s:c.set(u,s));for(l=0;l<f;++l)u=i.call(e,a[l],l,a)+"",(s=c.get(u))?(r[l]=s,s.__data__=a[l],c.delete(u)):t[l]=new tn(e,a[l]);for(l=0;l<d;++l)(s=n[l])&&c.get(h[l])===s&&(o[l]=s)}function an(e){return e.__data__}function ln(e){return"object"==typeof e&&"length"in e?e:Array.from(e)}function sn(e,n){return e<n?-1:e>n?1:e>=n?0:NaN}tn.prototype={constructor:tn,appendChild:function(e){return this._parent.insertBefore(e,this._next)},insertBefore:function(e,n){return this._parent.insertBefore(e,n)},querySelector:function(e){return this._parent.querySelector(e)},querySelectorAll:function(e){return this._parent.querySelectorAll(e)}};var un="http://www.w3.org/1999/xhtml";const cn={svg:"http://www.w3.org/2000/svg",xhtml:un,xlink:"http://www.w3.org/1999/xlink",xml:"http://www.w3.org/XML/1998/namespace",xmlns:"http://www.w3.org/2000/xmlns/"};function dn(e){var n=e+="",t=n.indexOf(":");return t>=0&&"xmlns"!==(n=e.slice(0,t))&&(e=e.slice(t+1)),cn.hasOwnProperty(n)?{space:cn[n],local:e}:e}function fn(e){return function(){this.removeAttribute(e)}}function hn(e){return function(){this.removeAttributeNS(e.space,e.local)}}function pn(e,n){return function(){this.setAttribute(e,n)}}function mn(e,n){return function(){this.setAttributeNS(e.space,e.local,n)}}function gn(e,n){return function(){var t=n.apply(this,arguments);null==t?this.removeAttribute(e):this.setAttribute(e,t)}}function An(e,n){return function(){var t=n.apply(this,arguments);null==t?this.removeAttributeNS(e.space,e.local):this.setAttributeNS(e.space,e.local,t)}}function yn(e){return e.ownerDocument&&e.ownerDocument.defaultView||e.document&&e||e.defaultView}function vn(e){return function(){this.style.removeProperty(e)}}function bn(e,n,t){return function(){this.style.setProperty(e,n,t)}}function xn(e,n,t){return function(){var r=n.apply(this,arguments);null==r?this.style.removeProperty(e):this.style.setProperty(e,r,t)}}function En(e,n){return e.style.getPropertyValue(n)||yn(e).getComputedStyle(e,null).getPropertyValue(n)}function Cn(e){return function(){delete this[e]}}function wn(e,n){return function(){this[e]=n}}function _n(e,n){return function(){var t=n.apply(this,arguments);null==t?delete this[e]:this[e]=t}}function kn(e){return e.trim().split(/^|\s+/)}function Bn(e){return e.classList||new Sn(e)}function Sn(e){this._node=e,this._names=kn(e.getAttribute("class")||"")}function zn(e,n){for(var t=Bn(e),r=-1,o=n.length;++r<o;)t.add(n[r])}function Nn(e,n){for(var t=Bn(e),r=-1,o=n.length;++r<o;)t.remove(n[r])}function jn(e){return function(){zn(this,e)}}function Pn(e){return function(){Nn(this,e)}}function Tn(e,n){return function(){(n.apply(this,arguments)?zn:Nn)(this,e)}}function Mn(){this.textContent=""}function On(e){return function(){this.textContent=e}}function Rn(e){return function(){var n=e.apply(this,arguments);this.textContent=null==n?"":n}}function In(){this.innerHTML=""}function Ln(e){return function(){this.innerHTML=e}}function Dn(e){return function(){var n=e.apply(this,arguments);this.innerHTML=null==n?"":n}}function Fn(){this.nextSibling&&this.parentNode.appendChild(this)}function Un(){this.previousSibling&&this.parentNode.insertBefore(this,this.parentNode.firstChild)}function $n(e){return function(){var n=this.ownerDocument,t=this.namespaceURI;return t===un&&n.documentElement.namespaceURI===un?n.createElement(e):n.createElementNS(t,e)}}function qn(e){return function(){return this.ownerDocument.createElementNS(e.space,e.local)}}function Hn(e){var n=dn(e);return(n.local?qn:$n)(n)}function Wn(){return null}function Yn(){var e=this.parentNode;e&&e.removeChild(this)}function Vn(){var e=this.cloneNode(!1),n=this.parentNode;return n?n.insertBefore(e,this.nextSibling):e}function Xn(){var e=this.cloneNode(!0),n=this.parentNode;return n?n.insertBefore(e,this.nextSibling):e}function Qn(e){return function(){var n=this.__on;if(n){for(var t,r=0,o=-1,a=n.length;r<a;++r)t=n[r],e.type&&t.type!==e.type||t.name!==e.name?n[++o]=t:this.removeEventListener(t.type,t.listener,t.options);++o?n.length=o:delete this.__on}}}function Gn(e,n,t){return function(){var r,o=this.__on,a=function(e){return function(n){e.call(this,n,this.__data__)}}(n);if(o)for(var i=0,l=o.length;i<l;++i)if((r=o[i]).type===e.type&&r.name===e.name)return this.removeEventListener(r.type,r.listener,r.options),this.addEventListener(r.type,r.listener=a,r.options=t),void(r.value=n);this.addEventListener(e.type,a,t),r={type:e.type,name:e.name,value:n,listener:a,options:t},o?o.push(r):this.__on=[r]}}function Kn(e,n,t){var r=yn(e),o=r.CustomEvent;"function"==typeof o?o=new o(n,t):(o=r.document.createEvent("Event"),t?(o.initEvent(n,t.bubbles,t.cancelable),o.detail=t.detail):o.initEvent(n,!1,!1)),e.dispatchEvent(o)}function Zn(e,n){return function(){return Kn(this,e,n)}}function Jn(e,n){return function(){return Kn(this,e,n.apply(this,arguments))}}Sn.prototype={add:function(e){this._names.indexOf(e)<0&&(this._names.push(e),this._node.setAttribute("class",this._names.join(" ")))},remove:function(e){var n=this._names.indexOf(e);n>=0&&(this._names.splice(n,1),this._node.setAttribute("class",this._names.join(" ")))},contains:function(e){return this._names.indexOf(e)>=0}};var et=[null];function nt(e,n){this._groups=e,this._parents=n}function tt(){return new nt([[document.documentElement]],et)}nt.prototype=tt.prototype={constructor:nt,select:function(e){"function"!=typeof e&&(e=Ye(e));for(var n=this._groups,t=n.length,r=new Array(t),o=0;o<t;++o)for(var a,i,l=n[o],s=l.length,u=r[o]=new Array(s),c=0;c<s;++c)(a=l[c])&&(i=e.call(a,a.__data__,c,l))&&("__data__"in a&&(i.__data__=a.__data__),u[c]=i);return new nt(r,this._parents)},selectAll:function(e){e="function"==typeof e?function(e){return function(){return function(e){return null==e?[]:Array.isArray(e)?e:Array.from(e)}(e.apply(this,arguments))}}(e):Xe(e);for(var n=this._groups,t=n.length,r=[],o=[],a=0;a<t;++a)for(var i,l=n[a],s=l.length,u=0;u<s;++u)(i=l[u])&&(r.push(e.call(i,i.__data__,u,l)),o.push(i));return new nt(r,o)},selectChild:function(e){return this.select(null==e?Ze:function(e){return function(){return Ke.call(this.children,e)}}("function"==typeof e?e:Ge(e)))},selectChildren:function(e){return this.selectAll(null==e?en:function(e){return function(){return Je.call(this.children,e)}}("function"==typeof e?e:Ge(e)))},filter:function(e){"function"!=typeof e&&(e=Qe(e));for(var n=this._groups,t=n.length,r=new Array(t),o=0;o<t;++o)for(var a,i=n[o],l=i.length,s=r[o]=[],u=0;u<l;++u)(a=i[u])&&e.call(a,a.__data__,u,i)&&s.push(a);return new nt(r,this._parents)},data:function(e,n){if(!arguments.length)return Array.from(this,an);var t=n?on:rn,r=this._parents,o=this._groups;"function"!=typeof e&&(e=function(e){return function(){return e}}(e));for(var a=o.length,i=new Array(a),l=new Array(a),s=new Array(a),u=0;u<a;++u){var c=r[u],d=o[u],f=d.length,h=ln(e.call(c,c&&c.__data__,u,r)),p=h.length,m=l[u]=new Array(p),g=i[u]=new Array(p);t(c,d,m,g,s[u]=new Array(f),h,n);for(var A,y,v=0,b=0;v<p;++v)if(A=m[v]){for(v>=b&&(b=v+1);!(y=g[b])&&++b<p;);A._next=y||null}}return(i=new nt(i,r))._enter=l,i._exit=s,i},enter:function(){return new nt(this._enter||this._groups.map(nn),this._parents)},exit:function(){return new nt(this._exit||this._groups.map(nn),this._parents)},join:function(e,n,t){var r=this.enter(),o=this,a=this.exit();return"function"==typeof e?(r=e(r))&&(r=r.selection()):r=r.append(e+""),null!=n&&(o=n(o))&&(o=o.selection()),null==t?a.remove():t(a),r&&o?r.merge(o).order():o},merge:function(e){for(var n=e.selection?e.selection():e,t=this._groups,r=n._groups,o=t.length,a=r.length,i=Math.min(o,a),l=new Array(o),s=0;s<i;++s)for(var u,c=t[s],d=r[s],f=c.length,h=l[s]=new Array(f),p=0;p<f;++p)(u=c[p]||d[p])&&(h[p]=u);for(;s<o;++s)l[s]=t[s];return new nt(l,this._parents)},selection:function(){return this},order:function(){for(var e=this._groups,n=-1,t=e.length;++n<t;)for(var r,o=e[n],a=o.length-1,i=o[a];--a>=0;)(r=o[a])&&(i&&4^r.compareDocumentPosition(i)&&i.parentNode.insertBefore(r,i),i=r);return this},sort:function(e){function n(n,t){return n&&t?e(n.__data__,t.__data__):!n-!t}e||(e=sn);for(var t=this._groups,r=t.length,o=new Array(r),a=0;a<r;++a){for(var i,l=t[a],s=l.length,u=o[a]=new Array(s),c=0;c<s;++c)(i=l[c])&&(u[c]=i);u.sort(n)}return new nt(o,this._parents).order()},call:function(){var e=arguments[0];return arguments[0]=this,e.apply(null,arguments),this},nodes:function(){return Array.from(this)},node:function(){for(var e=this._groups,n=0,t=e.length;n<t;++n)for(var r=e[n],o=0,a=r.length;o<a;++o){var i=r[o];if(i)return i}return null},size:function(){let e=0;for(const n of this)++e;return e},empty:function(){return!this.node()},each:function(e){for(var n=this._groups,t=0,r=n.length;t<r;++t)for(var o,a=n[t],i=0,l=a.length;i<l;++i)(o=a[i])&&e.call(o,o.__data__,i,a);return this},attr:function(e,n){var t=dn(e);if(arguments.length<2){var r=this.node();return t.local?r.getAttributeNS(t.space,t.local):r.getAttribute(t)}return this.each((null==n?t.local?hn:fn:"function"==typeof n?t.local?An:gn:t.local?mn:pn)(t,n))},style:function(e,n,t){return arguments.length>1?this.each((null==n?vn:"function"==typeof n?xn:bn)(e,n,null==t?"":t)):En(this.node(),e)},property:function(e,n){return arguments.length>1?this.each((null==n?Cn:"function"==typeof n?_n:wn)(e,n)):this.node()[e]},classed:function(e,n){var t=kn(e+"");if(arguments.length<2){for(var r=Bn(this.node()),o=-1,a=t.length;++o<a;)if(!r.contains(t[o]))return!1;return!0}return this.each(("function"==typeof n?Tn:n?jn:Pn)(t,n))},text:function(e){return arguments.length?this.each(null==e?Mn:("function"==typeof e?Rn:On)(e)):this.node().textContent},html:function(e){return arguments.length?this.each(null==e?In:("function"==typeof e?Dn:Ln)(e)):this.node().innerHTML},raise:function(){return this.each(Fn)},lower:function(){return this.each(Un)},append:function(e){var n="function"==typeof e?e:Hn(e);return this.select(function(){return this.appendChild(n.apply(this,arguments))})},insert:function(e,n){var t="function"==typeof e?e:Hn(e),r=null==n?Wn:"function"==typeof n?n:Ye(n);return this.select(function(){return this.insertBefore(t.apply(this,arguments),r.apply(this,arguments)||null)})},remove:function(){return this.each(Yn)},clone:function(e){return this.select(e?Xn:Vn)},datum:function(e){return arguments.length?this.property("__data__",e):this.node().__data__},on:function(e,n,t){var r,o,a=function(e){return e.trim().split(/^|\s+/).map(function(e){var n="",t=e.indexOf(".");return t>=0&&(n=e.slice(t+1),e=e.slice(0,t)),{type:e,name:n}})}(e+""),i=a.length;if(!(arguments.length<2)){for(l=n?Gn:Qn,r=0;r<i;++r)this.each(l(a[r],n,t));return this}var l=this.node().__on;if(l)for(var s,u=0,c=l.length;u<c;++u)for(r=0,s=l[u];r<i;++r)if((o=a[r]).type===s.type&&o.name===s.name)return s.value},dispatch:function(e,n){return this.each(("function"==typeof n?Jn:Zn)(e,n))},[Symbol.iterator]:function*(){for(var e=this._groups,n=0,t=e.length;n<t;++n)for(var r,o=e[n],a=0,i=o.length;a<i;++a)(r=o[a])&&(yield r)}};const rt=tt;function ot(e){return"string"==typeof e?new nt([[document.querySelector(e)]],[document.documentElement]):new nt([[e]],et)}var at={value:()=>{}};function it(){for(var e,n=0,t=arguments.length,r={};n<t;++n){if(!(e=arguments[n]+"")||e in r||/[\s.]/.test(e))throw new Error("illegal type: "+e);r[e]=[]}return new lt(r)}function lt(e){this._=e}function st(e,n){for(var t,r=0,o=e.length;r<o;++r)if((t=e[r]).name===n)return t.value}function ut(e,n,t){for(var r=0,o=e.length;r<o;++r)if(e[r].name===n){e[r]=at,e=e.slice(0,r).concat(e.slice(r+1));break}return null!=t&&e.push({name:n,value:t}),e}lt.prototype=it.prototype={constructor:lt,on:function(e,n){var t,r,o=this._,a=(r=o,(e+"").trim().split(/^|\s+/).map(function(e){var n="",t=e.indexOf(".");if(t>=0&&(n=e.slice(t+1),e=e.slice(0,t)),e&&!r.hasOwnProperty(e))throw new Error("unknown type: "+e);return{type:e,name:n}})),i=-1,l=a.length;if(!(arguments.length<2)){if(null!=n&&"function"!=typeof n)throw new Error("invalid callback: "+n);for(;++i<l;)if(t=(e=a[i]).type)o[t]=ut(o[t],e.name,n);else if(null==n)for(t in o)o[t]=ut(o[t],e.name,null);return this}for(;++i<l;)if((t=(e=a[i]).type)&&(t=st(o[t],e.name)))return t},copy:function(){var e={},n=this._;for(var t in n)e[t]=n[t].slice();return new lt(e)},call:function(e,n){if((t=arguments.length-2)>0)for(var t,r,o=new Array(t),a=0;a<t;++a)o[a]=arguments[a+2];if(!this._.hasOwnProperty(e))throw new Error("unknown type: "+e);for(a=0,t=(r=this._[e]).length;a<t;++a)r[a].value.apply(n,o)},apply:function(e,n,t){if(!this._.hasOwnProperty(e))throw new Error("unknown type: "+e);for(var r=this._[e],o=0,a=r.length;o<a;++o)r[o].value.apply(n,t)}};const ct=it,dt={passive:!1},ft={capture:!0,passive:!1};function ht(e){e.stopImmediatePropagation()}function pt(e){e.preventDefault(),e.stopImmediatePropagation()}function mt(e){var n=e.document.documentElement,t=ot(e).on("dragstart.drag",pt,ft);"onselectstart"in n?t.on("selectstart.drag",pt,ft):(n.__noselect=n.style.MozUserSelect,n.style.MozUserSelect="none")}function gt(e,n){var t=e.document.documentElement,r=ot(e).on("dragstart.drag",null);n&&(r.on("click.drag",pt,ft),setTimeout(function(){r.on("click.drag",null)},0)),"onselectstart"in t?r.on("selectstart.drag",null):(t.style.MozUserSelect=t.__noselect,delete t.__noselect)}function At(e){return((e=Math.exp(e))+1/e)/2}const yt=function e(n,t,r){function o(e,o){var a,i,l=e[0],s=e[1],u=e[2],c=o[0],d=o[1],f=o[2],h=c-l,p=d-s,m=h*h+p*p;if(m<1e-12)i=Math.log(f/u)/n,a=function(e){return[l+e*h,s+e*p,u*Math.exp(n*e*i)]};else{var g=Math.sqrt(m),A=(f*f-u*u+r*m)/(2*u*t*g),y=(f*f-u*u-r*m)/(2*f*t*g),v=Math.log(Math.sqrt(A*A+1)-A),b=Math.log(Math.sqrt(y*y+1)-y);i=(b-v)/n,a=function(e){var r=e*i,o=At(v),a=u/(t*g)*(o*function(e){return((e=Math.exp(2*e))-1)/(e+1)}(n*r+v)-function(e){return((e=Math.exp(e))-1/e)/2}(v));return[l+a*h,s+a*p,u*o/At(n*r+v)]}}return a.duration=1e3*i*n/Math.SQRT2,a}return o.rho=function(n){var t=Math.max(.001,+n),r=t*t;return e(t,r,r*r)},o}(Math.SQRT2,2,4);function vt(e,n){if(e=function(e){let n;for(;n=e.sourceEvent;)e=n;return e}(e),void 0===n&&(n=e.currentTarget),n){var t=n.ownerSVGElement||n;if(t.createSVGPoint){var r=t.createSVGPoint();return r.x=e.clientX,r.y=e.clientY,[(r=r.matrixTransform(n.getScreenCTM().inverse())).x,r.y]}if(n.getBoundingClientRect){var o=n.getBoundingClientRect();return[e.clientX-o.left-n.clientLeft,e.clientY-o.top-n.clientTop]}}return[e.pageX,e.pageY]}var bt,xt,Et=0,Ct=0,wt=0,_t=0,kt=0,Bt=0,St="object"==typeof performance&&performance.now?performance:Date,zt="object"==typeof window&&window.requestAnimationFrame?window.requestAnimationFrame.bind(window):function(e){setTimeout(e,17)};function Nt(){return kt||(zt(jt),kt=St.now()+Bt)}function jt(){kt=0}function Pt(){this._call=this._time=this._next=null}function Tt(e,n,t){var r=new Pt;return r.restart(e,n,t),r}function Mt(){kt=(_t=St.now())+Bt,Et=Ct=0;try{!function(){Nt(),++Et;for(var e,n=bt;n;)(e=kt-n._time)>=0&&n._call.call(void 0,e),n=n._next;--Et}()}finally{Et=0,function(){for(var e,n,t=bt,r=1/0;t;)t._call?(r>t._time&&(r=t._time),e=t,t=t._next):(n=t._next,t._next=null,t=e?e._next=n:bt=n);xt=e,Rt(r)}(),kt=0}}function Ot(){var e=St.now(),n=e-_t;n>1e3&&(Bt-=n,_t=e)}function Rt(e){Et||(Ct&&(Ct=clearTimeout(Ct)),e-kt>24?(e<1/0&&(Ct=setTimeout(Mt,e-St.now()-Bt)),wt&&(wt=clearInterval(wt))):(wt||(_t=St.now(),wt=setInterval(Ot,1e3)),Et=1,zt(Mt)))}function It(e,n,t){var r=new Pt;return n=null==n?0:+n,r.restart(t=>{r.stop(),e(t+n)},n,t),r}Pt.prototype=Tt.prototype={constructor:Pt,restart:function(e,n,t){if("function"!=typeof e)throw new TypeError("callback is not a function");t=(null==t?Nt():+t)+(null==n?0:+n),this._next||xt===this||(xt?xt._next=this:bt=this,xt=this),this._call=e,this._time=t,Rt()},stop:function(){this._call&&(this._call=null,this._time=1/0,Rt())}};var Lt=ct("start","end","cancel","interrupt"),Dt=[];function Ft(e,n,t,r,o,a){var i=e.__transition;if(i){if(t in i)return}else e.__transition={};!function(e,n,t){var r,o=e.__transition;function a(s){var u,c,d,f;if(1!==t.state)return l();for(u in o)if((f=o[u]).name===t.name){if(3===f.state)return It(a);4===f.state?(f.state=6,f.timer.stop(),f.on.call("interrupt",e,e.__data__,f.index,f.group),delete o[u]):+u<n&&(f.state=6,f.timer.stop(),f.on.call("cancel",e,e.__data__,f.index,f.group),delete o[u])}if(It(function(){3===t.state&&(t.state=4,t.timer.restart(i,t.delay,t.time),i(s))}),t.state=2,t.on.call("start",e,e.__data__,t.index,t.group),2===t.state){for(t.state=3,r=new Array(d=t.tween.length),u=0,c=-1;u<d;++u)(f=t.tween[u].value.call(e,e.__data__,t.index,t.group))&&(r[++c]=f);r.length=c+1}}function i(n){for(var o=n<t.duration?t.ease.call(null,n/t.duration):(t.timer.restart(l),t.state=5,1),a=-1,i=r.length;++a<i;)r[a].call(e,o);5===t.state&&(t.on.call("end",e,e.__data__,t.index,t.group),l())}function l(){for(var r in t.state=6,t.timer.stop(),delete o[n],o)return;delete e.__transition}o[n]=t,t.timer=Tt(function(e){t.state=1,t.timer.restart(a,t.delay,t.time),t.delay<=e&&a(e-t.delay)},0,t.time)}(e,t,{name:n,index:r,group:o,on:Lt,tween:Dt,time:a.time,delay:a.delay,duration:a.duration,ease:a.ease,timer:null,state:0})}function Ut(e,n){var t=qt(e,n);if(t.state>0)throw new Error("too late; already scheduled");return t}function $t(e,n){var t=qt(e,n);if(t.state>3)throw new Error("too late; already running");return t}function qt(e,n){var t=e.__transition;if(!t||!(t=t[n]))throw new Error("transition not found");return t}function Ht(e,n){var t,r,o,a=e.__transition,i=!0;if(a){for(o in n=null==n?null:n+"",a)(t=a[o]).name===n?(r=t.state>2&&t.state<5,t.state=6,t.timer.stop(),t.on.call(r?"interrupt":"cancel",e,e.__data__,t.index,t.group),delete a[o]):i=!1;i&&delete e.__transition}}function Wt(e,n){return e=+e,n=+n,function(t){return e*(1-t)+n*t}}var Yt,Vt=180/Math.PI,Xt={translateX:0,translateY:0,rotate:0,skewX:0,scaleX:1,scaleY:1};function Qt(e,n,t,r,o,a){var i,l,s;return(i=Math.sqrt(e*e+n*n))&&(e/=i,n/=i),(s=e*t+n*r)&&(t-=e*s,r-=n*s),(l=Math.sqrt(t*t+r*r))&&(t/=l,r/=l,s/=l),e*r<n*t&&(e=-e,n=-n,s=-s,i=-i),{translateX:o,translateY:a,rotate:Math.atan2(n,e)*Vt,skewX:Math.atan(s)*Vt,scaleX:i,scaleY:l}}function Gt(e,n,t,r){function o(e){return e.length?e.pop()+" ":""}return function(a,i){var l=[],s=[];return a=e(a),i=e(i),function(e,r,o,a,i,l){if(e!==o||r!==a){var s=i.push("translate(",null,n,null,t);l.push({i:s-4,x:Wt(e,o)},{i:s-2,x:Wt(r,a)})}else(o||a)&&i.push("translate("+o+n+a+t)}(a.translateX,a.translateY,i.translateX,i.translateY,l,s),function(e,n,t,a){e!==n?(e-n>180?n+=360:n-e>180&&(e+=360),a.push({i:t.push(o(t)+"rotate(",null,r)-2,x:Wt(e,n)})):n&&t.push(o(t)+"rotate("+n+r)}(a.rotate,i.rotate,l,s),function(e,n,t,a){e!==n?a.push({i:t.push(o(t)+"skewX(",null,r)-2,x:Wt(e,n)}):n&&t.push(o(t)+"skewX("+n+r)}(a.skewX,i.skewX,l,s),function(e,n,t,r,a,i){if(e!==t||n!==r){var l=a.push(o(a)+"scale(",null,",",null,")");i.push({i:l-4,x:Wt(e,t)},{i:l-2,x:Wt(n,r)})}else 1===t&&1===r||a.push(o(a)+"scale("+t+","+r+")")}(a.scaleX,a.scaleY,i.scaleX,i.scaleY,l,s),a=i=null,function(e){for(var n,t=-1,r=s.length;++t<r;)l[(n=s[t]).i]=n.x(e);return l.join("")}}}var Kt=Gt(function(e){const n=new("function"==typeof DOMMatrix?DOMMatrix:WebKitCSSMatrix)(e+"");return n.isIdentity?Xt:Qt(n.a,n.b,n.c,n.d,n.e,n.f)},"px, ","px)","deg)"),Zt=Gt(function(e){return null==e?Xt:(Yt||(Yt=document.createElementNS("http://www.w3.org/2000/svg","g")),Yt.setAttribute("transform",e),(e=Yt.transform.baseVal.consolidate())?Qt((e=e.matrix).a,e.b,e.c,e.d,e.e,e.f):Xt)},", ",")",")");function Jt(e,n){var t,r;return function(){var o=$t(this,e),a=o.tween;if(a!==t)for(var i=0,l=(r=t=a).length;i<l;++i)if(r[i].name===n){(r=r.slice()).splice(i,1);break}o.tween=r}}function er(e,n,t){var r,o;if("function"!=typeof t)throw new Error;return function(){var a=$t(this,e),i=a.tween;if(i!==r){o=(r=i).slice();for(var l={name:n,value:t},s=0,u=o.length;s<u;++s)if(o[s].name===n){o[s]=l;break}s===u&&o.push(l)}a.tween=o}}function nr(e,n,t){var r=e._id;return e.each(function(){var e=$t(this,r);(e.value||(e.value={}))[n]=t.apply(this,arguments)}),function(e){return qt(e,r).value[n]}}function tr(e,n,t){e.prototype=n.prototype=t,t.constructor=e}function rr(e,n){var t=Object.create(e.prototype);for(var r in n)t[r]=n[r];return t}function or(){}var ar=.7,ir=1/ar,lr="\\s*([+-]?\\d+)\\s*",sr="\\s*([+-]?(?:\\d*\\.)?\\d+(?:[eE][+-]?\\d+)?)\\s*",ur="\\s*([+-]?(?:\\d*\\.)?\\d+(?:[eE][+-]?\\d+)?)%\\s*",cr=/^#([0-9a-f]{3,8})$/,dr=new RegExp(`^rgb\\(${lr},${lr},${lr}\\)$`),fr=new RegExp(`^rgb\\(${ur},${ur},${ur}\\)$`),hr=new RegExp(`^rgba\\(${lr},${lr},${lr},${sr}\\)$`),pr=new RegExp(`^rgba\\(${ur},${ur},${ur},${sr}\\)$`),mr=new RegExp(`^hsl\\(${sr},${ur},${ur}\\)$`),gr=new RegExp(`^hsla\\(${sr},${ur},${ur},${sr}\\)$`),Ar={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074};function yr(){return this.rgb().formatHex()}function vr(){return this.rgb().formatRgb()}function br(e){var n,t;return e=(e+"").trim().toLowerCase(),(n=cr.exec(e))?(t=n[1].length,n=parseInt(n[1],16),6===t?xr(n):3===t?new wr(n>>8&15|n>>4&240,n>>4&15|240&n,(15&n)<<4|15&n,1):8===t?Er(n>>24&255,n>>16&255,n>>8&255,(255&n)/255):4===t?Er(n>>12&15|n>>8&240,n>>8&15|n>>4&240,n>>4&15|240&n,((15&n)<<4|15&n)/255):null):(n=dr.exec(e))?new wr(n[1],n[2],n[3],1):(n=fr.exec(e))?new wr(255*n[1]/100,255*n[2]/100,255*n[3]/100,1):(n=hr.exec(e))?Er(n[1],n[2],n[3],n[4]):(n=pr.exec(e))?Er(255*n[1]/100,255*n[2]/100,255*n[3]/100,n[4]):(n=mr.exec(e))?Nr(n[1],n[2]/100,n[3]/100,1):(n=gr.exec(e))?Nr(n[1],n[2]/100,n[3]/100,n[4]):Ar.hasOwnProperty(e)?xr(Ar[e]):"transparent"===e?new wr(NaN,NaN,NaN,0):null}function xr(e){return new wr(e>>16&255,e>>8&255,255&e,1)}function Er(e,n,t,r){return r<=0&&(e=n=t=NaN),new wr(e,n,t,r)}function Cr(e,n,t,r){return 1===arguments.length?function(e){return e instanceof or||(e=br(e)),e?new wr((e=e.rgb()).r,e.g,e.b,e.opacity):new wr}(e):new wr(e,n,t,null==r?1:r)}function wr(e,n,t,r){this.r=+e,this.g=+n,this.b=+t,this.opacity=+r}function _r(){return`#${zr(this.r)}${zr(this.g)}${zr(this.b)}`}function kr(){const e=Br(this.opacity);return`${1===e?"rgb(":"rgba("}${Sr(this.r)}, ${Sr(this.g)}, ${Sr(this.b)}${1===e?")":`, ${e})`}`}function Br(e){return isNaN(e)?1:Math.max(0,Math.min(1,e))}function Sr(e){return Math.max(0,Math.min(255,Math.round(e)||0))}function zr(e){return((e=Sr(e))<16?"0":"")+e.toString(16)}function Nr(e,n,t,r){return r<=0?e=n=t=NaN:t<=0||t>=1?e=n=NaN:n<=0&&(e=NaN),new Pr(e,n,t,r)}function jr(e){if(e instanceof Pr)return new Pr(e.h,e.s,e.l,e.opacity);if(e instanceof or||(e=br(e)),!e)return new Pr;if(e instanceof Pr)return e;var n=(e=e.rgb()).r/255,t=e.g/255,r=e.b/255,o=Math.min(n,t,r),a=Math.max(n,t,r),i=NaN,l=a-o,s=(a+o)/2;return l?(i=n===a?(t-r)/l+6*(t<r):t===a?(r-n)/l+2:(n-t)/l+4,l/=s<.5?a+o:2-a-o,i*=60):l=s>0&&s<1?0:i,new Pr(i,l,s,e.opacity)}function Pr(e,n,t,r){this.h=+e,this.s=+n,this.l=+t,this.opacity=+r}function Tr(e){return(e=(e||0)%360)<0?e+360:e}function Mr(e){return Math.max(0,Math.min(1,e||0))}function Or(e,n,t){return 255*(e<60?n+(t-n)*e/60:e<180?t:e<240?n+(t-n)*(240-e)/60:n)}function Rr(e,n,t,r,o){var a=e*e,i=a*e;return((1-3*e+3*a-i)*n+(4-6*a+3*i)*t+(1+3*e+3*a-3*i)*r+i*o)/6}tr(or,br,{copy(e){return Object.assign(new this.constructor,this,e)},displayable(){return this.rgb().displayable()},hex:yr,formatHex:yr,formatHex8:function(){return this.rgb().formatHex8()},formatHsl:function(){return jr(this).formatHsl()},formatRgb:vr,toString:vr}),tr(wr,Cr,rr(or,{brighter(e){return e=null==e?ir:Math.pow(ir,e),new wr(this.r*e,this.g*e,this.b*e,this.opacity)},darker(e){return e=null==e?ar:Math.pow(ar,e),new wr(this.r*e,this.g*e,this.b*e,this.opacity)},rgb(){return this},clamp(){return new wr(Sr(this.r),Sr(this.g),Sr(this.b),Br(this.opacity))},displayable(){return-.5<=this.r&&this.r<255.5&&-.5<=this.g&&this.g<255.5&&-.5<=this.b&&this.b<255.5&&0<=this.opacity&&this.opacity<=1},hex:_r,formatHex:_r,formatHex8:function(){return`#${zr(this.r)}${zr(this.g)}${zr(this.b)}${zr(255*(isNaN(this.opacity)?1:this.opacity))}`},formatRgb:kr,toString:kr})),tr(Pr,function(e,n,t,r){return 1===arguments.length?jr(e):new Pr(e,n,t,null==r?1:r)},rr(or,{brighter(e){return e=null==e?ir:Math.pow(ir,e),new Pr(this.h,this.s,this.l*e,this.opacity)},darker(e){return e=null==e?ar:Math.pow(ar,e),new Pr(this.h,this.s,this.l*e,this.opacity)},rgb(){var e=this.h%360+360*(this.h<0),n=isNaN(e)||isNaN(this.s)?0:this.s,t=this.l,r=t+(t<.5?t:1-t)*n,o=2*t-r;return new wr(Or(e>=240?e-240:e+120,o,r),Or(e,o,r),Or(e<120?e+240:e-120,o,r),this.opacity)},clamp(){return new Pr(Tr(this.h),Mr(this.s),Mr(this.l),Br(this.opacity))},displayable(){return(0<=this.s&&this.s<=1||isNaN(this.s))&&0<=this.l&&this.l<=1&&0<=this.opacity&&this.opacity<=1},formatHsl(){const e=Br(this.opacity);return`${1===e?"hsl(":"hsla("}${Tr(this.h)}, ${100*Mr(this.s)}%, ${100*Mr(this.l)}%${1===e?")":`, ${e})`}`}}));const Ir=e=>()=>e;function Lr(e,n){var t=n-e;return t?function(e,n){return function(t){return e+t*n}}(e,t):Ir(isNaN(e)?n:e)}const Dr=function e(n){var t=function(e){return 1===(e=+e)?Lr:function(n,t){return t-n?function(e,n,t){return e=Math.pow(e,t),n=Math.pow(n,t)-e,t=1/t,function(r){return Math.pow(e+r*n,t)}}(n,t,e):Ir(isNaN(n)?t:n)}}(n);function r(e,n){var r=t((e=Cr(e)).r,(n=Cr(n)).r),o=t(e.g,n.g),a=t(e.b,n.b),i=Lr(e.opacity,n.opacity);return function(n){return e.r=r(n),e.g=o(n),e.b=a(n),e.opacity=i(n),e+""}}return r.gamma=e,r}(1);function Fr(e){return function(n){var t,r,o=n.length,a=new Array(o),i=new Array(o),l=new Array(o);for(t=0;t<o;++t)r=Cr(n[t]),a[t]=r.r||0,i[t]=r.g||0,l[t]=r.b||0;return a=e(a),i=e(i),l=e(l),r.opacity=1,function(e){return r.r=a(e),r.g=i(e),r.b=l(e),r+""}}}Fr(function(e){var n=e.length-1;return function(t){var r=t<=0?t=0:t>=1?(t=1,n-1):Math.floor(t*n),o=e[r],a=e[r+1],i=r>0?e[r-1]:2*o-a,l=r<n-1?e[r+2]:2*a-o;return Rr((t-r/n)*n,i,o,a,l)}}),Fr(function(e){var n=e.length;return function(t){var r=Math.floor(((t%=1)<0?++t:t)*n),o=e[(r+n-1)%n],a=e[r%n],i=e[(r+1)%n],l=e[(r+2)%n];return Rr((t-r/n)*n,o,a,i,l)}});var Ur=/[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g,$r=new RegExp(Ur.source,"g");function qr(e,n){var t,r,o,a=Ur.lastIndex=$r.lastIndex=0,i=-1,l=[],s=[];for(e+="",n+="";(t=Ur.exec(e))&&(r=$r.exec(n));)(o=r.index)>a&&(o=n.slice(a,o),l[i]?l[i]+=o:l[++i]=o),(t=t[0])===(r=r[0])?l[i]?l[i]+=r:l[++i]=r:(l[++i]=null,s.push({i,x:Wt(t,r)})),a=$r.lastIndex;return a<n.length&&(o=n.slice(a),l[i]?l[i]+=o:l[++i]=o),l.length<2?s[0]?function(e){return function(n){return e(n)+""}}(s[0].x):function(e){return function(){return e}}(n):(n=s.length,function(e){for(var t,r=0;r<n;++r)l[(t=s[r]).i]=t.x(e);return l.join("")})}function Hr(e,n){var t;return("number"==typeof n?Wt:n instanceof br?Dr:(t=br(n))?(n=t,Dr):qr)(e,n)}function Wr(e){return function(){this.removeAttribute(e)}}function Yr(e){return function(){this.removeAttributeNS(e.space,e.local)}}function Vr(e,n,t){var r,o,a=t+"";return function(){var i=this.getAttribute(e);return i===a?null:i===r?o:o=n(r=i,t)}}function Xr(e,n,t){var r,o,a=t+"";return function(){var i=this.getAttributeNS(e.space,e.local);return i===a?null:i===r?o:o=n(r=i,t)}}function Qr(e,n,t){var r,o,a;return function(){var i,l,s=t(this);if(null!=s)return(i=this.getAttribute(e))===(l=s+"")?null:i===r&&l===o?a:(o=l,a=n(r=i,s));this.removeAttribute(e)}}function Gr(e,n,t){var r,o,a;return function(){var i,l,s=t(this);if(null!=s)return(i=this.getAttributeNS(e.space,e.local))===(l=s+"")?null:i===r&&l===o?a:(o=l,a=n(r=i,s));this.removeAttributeNS(e.space,e.local)}}function Kr(e,n){var t,r;function o(){var o=n.apply(this,arguments);return o!==r&&(t=(r=o)&&function(e,n){return function(t){this.setAttributeNS(e.space,e.local,n.call(this,t))}}(e,o)),t}return o._value=n,o}function Zr(e,n){var t,r;function o(){var o=n.apply(this,arguments);return o!==r&&(t=(r=o)&&function(e,n){return function(t){this.setAttribute(e,n.call(this,t))}}(e,o)),t}return o._value=n,o}function Jr(e,n){return function(){Ut(this,e).delay=+n.apply(this,arguments)}}function eo(e,n){return n=+n,function(){Ut(this,e).delay=n}}function no(e,n){return function(){$t(this,e).duration=+n.apply(this,arguments)}}function to(e,n){return n=+n,function(){$t(this,e).duration=n}}var ro=rt.prototype.constructor;function oo(e){return function(){this.style.removeProperty(e)}}var ao=0;function io(e,n,t,r){this._groups=e,this._parents=n,this._name=t,this._id=r}function lo(){return++ao}var so=rt.prototype;io.prototype=function(e){return rt().transition(e)}.prototype={constructor:io,select:function(e){var n=this._name,t=this._id;"function"!=typeof e&&(e=Ye(e));for(var r=this._groups,o=r.length,a=new Array(o),i=0;i<o;++i)for(var l,s,u=r[i],c=u.length,d=a[i]=new Array(c),f=0;f<c;++f)(l=u[f])&&(s=e.call(l,l.__data__,f,u))&&("__data__"in l&&(s.__data__=l.__data__),d[f]=s,Ft(d[f],n,t,f,d,qt(l,t)));return new io(a,this._parents,n,t)},selectAll:function(e){var n=this._name,t=this._id;"function"!=typeof e&&(e=Xe(e));for(var r=this._groups,o=r.length,a=[],i=[],l=0;l<o;++l)for(var s,u=r[l],c=u.length,d=0;d<c;++d)if(s=u[d]){for(var f,h=e.call(s,s.__data__,d,u),p=qt(s,t),m=0,g=h.length;m<g;++m)(f=h[m])&&Ft(f,n,t,m,h,p);a.push(h),i.push(s)}return new io(a,i,n,t)},selectChild:so.selectChild,selectChildren:so.selectChildren,filter:function(e){"function"!=typeof e&&(e=Qe(e));for(var n=this._groups,t=n.length,r=new Array(t),o=0;o<t;++o)for(var a,i=n[o],l=i.length,s=r[o]=[],u=0;u<l;++u)(a=i[u])&&e.call(a,a.__data__,u,i)&&s.push(a);return new io(r,this._parents,this._name,this._id)},merge:function(e){if(e._id!==this._id)throw new Error;for(var n=this._groups,t=e._groups,r=n.length,o=t.length,a=Math.min(r,o),i=new Array(r),l=0;l<a;++l)for(var s,u=n[l],c=t[l],d=u.length,f=i[l]=new Array(d),h=0;h<d;++h)(s=u[h]||c[h])&&(f[h]=s);for(;l<r;++l)i[l]=n[l];return new io(i,this._parents,this._name,this._id)},selection:function(){return new ro(this._groups,this._parents)},transition:function(){for(var e=this._name,n=this._id,t=lo(),r=this._groups,o=r.length,a=0;a<o;++a)for(var i,l=r[a],s=l.length,u=0;u<s;++u)if(i=l[u]){var c=qt(i,n);Ft(i,e,t,u,l,{time:c.time+c.delay+c.duration,delay:0,duration:c.duration,ease:c.ease})}return new io(r,this._parents,e,t)},call:so.call,nodes:so.nodes,node:so.node,size:so.size,empty:so.empty,each:so.each,on:function(e,n){var t=this._id;return arguments.length<2?qt(this.node(),t).on.on(e):this.each(function(e,n,t){var r,o,a=function(e){return(e+"").trim().split(/^|\s+/).every(function(e){var n=e.indexOf(".");return n>=0&&(e=e.slice(0,n)),!e||"start"===e})}(n)?Ut:$t;return function(){var i=a(this,e),l=i.on;l!==r&&(o=(r=l).copy()).on(n,t),i.on=o}}(t,e,n))},attr:function(e,n){var t=dn(e),r="transform"===t?Zt:Hr;return this.attrTween(e,"function"==typeof n?(t.local?Gr:Qr)(t,r,nr(this,"attr."+e,n)):null==n?(t.local?Yr:Wr)(t):(t.local?Xr:Vr)(t,r,n))},attrTween:function(e,n){var t="attr."+e;if(arguments.length<2)return(t=this.tween(t))&&t._value;if(null==n)return this.tween(t,null);if("function"!=typeof n)throw new Error;var r=dn(e);return this.tween(t,(r.local?Kr:Zr)(r,n))},style:function(e,n,t){var r="transform"==(e+="")?Kt:Hr;return null==n?this.styleTween(e,function(e,n){var t,r,o;return function(){var a=En(this,e),i=(this.style.removeProperty(e),En(this,e));return a===i?null:a===t&&i===r?o:o=n(t=a,r=i)}}(e,r)).on("end.style."+e,oo(e)):"function"==typeof n?this.styleTween(e,function(e,n,t){var r,o,a;return function(){var i=En(this,e),l=t(this),s=l+"";return null==l&&(this.style.removeProperty(e),s=l=En(this,e)),i===s?null:i===r&&s===o?a:(o=s,a=n(r=i,l))}}(e,r,nr(this,"style."+e,n))).each(function(e,n){var t,r,o,a,i="style."+n,l="end."+i;return function(){var s=$t(this,e),u=s.on,c=null==s.value[i]?a||(a=oo(n)):void 0;u===t&&o===c||(r=(t=u).copy()).on(l,o=c),s.on=r}}(this._id,e)):this.styleTween(e,function(e,n,t){var r,o,a=t+"";return function(){var i=En(this,e);return i===a?null:i===r?o:o=n(r=i,t)}}(e,r,n),t).on("end.style."+e,null)},styleTween:function(e,n,t){var r="style."+(e+="");if(arguments.length<2)return(r=this.tween(r))&&r._value;if(null==n)return this.tween(r,null);if("function"!=typeof n)throw new Error;return this.tween(r,function(e,n,t){var r,o;function a(){var a=n.apply(this,arguments);return a!==o&&(r=(o=a)&&function(e,n,t){return function(r){this.style.setProperty(e,n.call(this,r),t)}}(e,a,t)),r}return a._value=n,a}(e,n,null==t?"":t))},text:function(e){return this.tween("text","function"==typeof e?function(e){return function(){var n=e(this);this.textContent=null==n?"":n}}(nr(this,"text",e)):function(e){return function(){this.textContent=e}}(null==e?"":e+""))},textTween:function(e){var n="text";if(arguments.length<1)return(n=this.tween(n))&&n._value;if(null==e)return this.tween(n,null);if("function"!=typeof e)throw new Error;return this.tween(n,function(e){var n,t;function r(){var r=e.apply(this,arguments);return r!==t&&(n=(t=r)&&function(e){return function(n){this.textContent=e.call(this,n)}}(r)),n}return r._value=e,r}(e))},remove:function(){return this.on("end.remove",function(e){return function(){var n=this.parentNode;for(var t in this.__transition)if(+t!==e)return;n&&n.removeChild(this)}}(this._id))},tween:function(e,n){var t=this._id;if(e+="",arguments.length<2){for(var r,o=qt(this.node(),t).tween,a=0,i=o.length;a<i;++a)if((r=o[a]).name===e)return r.value;return null}return this.each((null==n?Jt:er)(t,e,n))},delay:function(e){var n=this._id;return arguments.length?this.each(("function"==typeof e?Jr:eo)(n,e)):qt(this.node(),n).delay},duration:function(e){var n=this._id;return arguments.length?this.each(("function"==typeof e?no:to)(n,e)):qt(this.node(),n).duration},ease:function(e){var n=this._id;return arguments.length?this.each(function(e,n){if("function"!=typeof n)throw new Error;return function(){$t(this,e).ease=n}}(n,e)):qt(this.node(),n).ease},easeVarying:function(e){if("function"!=typeof e)throw new Error;return this.each(function(e,n){return function(){var t=n.apply(this,arguments);if("function"!=typeof t)throw new Error;$t(this,e).ease=t}}(this._id,e))},end:function(){var e,n,t=this,r=t._id,o=t.size();return new Promise(function(a,i){var l={value:i},s={value:function(){0===--o&&a()}};t.each(function(){var t=$t(this,r),o=t.on;o!==e&&((n=(e=o).copy())._.cancel.push(l),n._.interrupt.push(l),n._.end.push(s)),t.on=n}),0===o&&a()})},[Symbol.iterator]:so[Symbol.iterator]};var uo={time:null,delay:0,duration:250,ease:function(e){return((e*=2)<=1?e*e*e:(e-=2)*e*e+2)/2}};function co(e,n){for(var t;!(t=e.__transition)||!(t=t[n]);)if(!(e=e.parentNode))throw new Error(`transition ${n} not found`);return t}rt.prototype.interrupt=function(e){return this.each(function(){Ht(this,e)})},rt.prototype.transition=function(e){var n,t;e instanceof io?(n=e._id,e=e._name):(n=lo(),(t=uo).time=Nt(),e=null==e?null:e+"");for(var r=this._groups,o=r.length,a=0;a<o;++a)for(var i,l=r[a],s=l.length,u=0;u<s;++u)(i=l[u])&&Ft(i,e,n,u,l,t||co(i,n));return new io(r,this._parents,e,n)};const fo=e=>()=>e;function ho(e,{sourceEvent:n,target:t,transform:r,dispatch:o}){Object.defineProperties(this,{type:{value:e,enumerable:!0,configurable:!0},sourceEvent:{value:n,enumerable:!0,configurable:!0},target:{value:t,enumerable:!0,configurable:!0},transform:{value:r,enumerable:!0,configurable:!0},_:{value:o}})}function po(e,n,t){this.k=e,this.x=n,this.y=t}po.prototype={constructor:po,scale:function(e){return 1===e?this:new po(this.k*e,this.x,this.y)},translate:function(e,n){return 0===e&0===n?this:new po(this.k,this.x+this.k*e,this.y+this.k*n)},apply:function(e){return[e[0]*this.k+this.x,e[1]*this.k+this.y]},applyX:function(e){return e*this.k+this.x},applyY:function(e){return e*this.k+this.y},invert:function(e){return[(e[0]-this.x)/this.k,(e[1]-this.y)/this.k]},invertX:function(e){return(e-this.x)/this.k},invertY:function(e){return(e-this.y)/this.k},rescaleX:function(e){return e.copy().domain(e.range().map(this.invertX,this).map(e.invert,e))},rescaleY:function(e){return e.copy().domain(e.range().map(this.invertY,this).map(e.invert,e))},toString:function(){return"translate("+this.x+","+this.y+") scale("+this.k+")"}};var mo=new po(1,0,0);function go(e){for(;!e.__zoom;)if(!(e=e.parentNode))return mo;return e.__zoom}function Ao(e){e.stopImmediatePropagation()}function yo(e){e.preventDefault(),e.stopImmediatePropagation()}function vo(e){return!(e.ctrlKey&&"wheel"!==e.type||e.button)}function bo(){var e=this;return e instanceof SVGElement?(e=e.ownerSVGElement||e).hasAttribute("viewBox")?[[(e=e.viewBox.baseVal).x,e.y],[e.x+e.width,e.y+e.height]]:[[0,0],[e.width.baseVal.value,e.height.baseVal.value]]:[[0,0],[e.clientWidth,e.clientHeight]]}function xo(){return this.__zoom||mo}function Eo(e){return-e.deltaY*(1===e.deltaMode?.05:e.deltaMode?1:.002)*(e.ctrlKey?10:1)}function Co(){return navigator.maxTouchPoints||"ontouchstart"in this}function wo(e,n,t){var r=e.invertX(n[0][0])-t[0][0],o=e.invertX(n[1][0])-t[1][0],a=e.invertY(n[0][1])-t[0][1],i=e.invertY(n[1][1])-t[1][1];return e.translate(o>r?(r+o)/2:Math.min(0,r)||Math.max(0,o),i>a?(a+i)/2:Math.min(0,a)||Math.max(0,i))}function _o(){var e,n,t,r=vo,o=bo,a=wo,i=Eo,l=Co,s=[0,1/0],u=[[-1/0,-1/0],[1/0,1/0]],c=250,d=yt,f=ct("start","zoom","end"),h=0,p=10;function m(e){e.property("__zoom",xo).on("wheel.zoom",E,{passive:!1}).on("mousedown.zoom",C).on("dblclick.zoom",w).filter(l).on("touchstart.zoom",_).on("touchmove.zoom",k).on("touchend.zoom touchcancel.zoom",B).style("-webkit-tap-highlight-color","rgba(0,0,0,0)")}function g(e,n){return(n=Math.max(s[0],Math.min(s[1],n)))===e.k?e:new po(n,e.x,e.y)}function A(e,n,t){var r=n[0]-t[0]*e.k,o=n[1]-t[1]*e.k;return r===e.x&&o===e.y?e:new po(e.k,r,o)}function y(e){return[(+e[0][0]+ +e[1][0])/2,(+e[0][1]+ +e[1][1])/2]}function v(e,n,t,r){e.on("start.zoom",function(){b(this,arguments).event(r).start()}).on("interrupt.zoom end.zoom",function(){b(this,arguments).event(r).end()}).tween("zoom",function(){var e=this,a=arguments,i=b(e,a).event(r),l=o.apply(e,a),s=null==t?y(l):"function"==typeof t?t.apply(e,a):t,u=Math.max(l[1][0]-l[0][0],l[1][1]-l[0][1]),c=e.__zoom,f="function"==typeof n?n.apply(e,a):n,h=d(c.invert(s).concat(u/c.k),f.invert(s).concat(u/f.k));return function(e){if(1===e)e=f;else{var n=h(e),t=u/n[2];e=new po(t,s[0]-n[0]*t,s[1]-n[1]*t)}i.zoom(null,e)}})}function b(e,n,t){return!t&&e.__zooming||new x(e,n)}function x(e,n){this.that=e,this.args=n,this.active=0,this.sourceEvent=null,this.extent=o.apply(e,n),this.taps=0}function E(e,...n){if(r.apply(this,arguments)){var t=b(this,n).event(e),o=this.__zoom,l=Math.max(s[0],Math.min(s[1],o.k*Math.pow(2,i.apply(this,arguments)))),c=vt(e);if(t.wheel)t.mouse[0][0]===c[0]&&t.mouse[0][1]===c[1]||(t.mouse[1]=o.invert(t.mouse[0]=c)),clearTimeout(t.wheel);else{if(o.k===l)return;t.mouse=[c,o.invert(c)],Ht(this),t.start()}yo(e),t.wheel=setTimeout(function(){t.wheel=null,t.end()},150),t.zoom("mouse",a(A(g(o,l),t.mouse[0],t.mouse[1]),t.extent,u))}}function C(e,...n){if(!t&&r.apply(this,arguments)){var o=e.currentTarget,i=b(this,n,!0).event(e),l=ot(e.view).on("mousemove.zoom",function(e){if(yo(e),!i.moved){var n=e.clientX-c,t=e.clientY-d;i.moved=n*n+t*t>h}i.event(e).zoom("mouse",a(A(i.that.__zoom,i.mouse[0]=vt(e,o),i.mouse[1]),i.extent,u))},!0).on("mouseup.zoom",function(e){l.on("mousemove.zoom mouseup.zoom",null),gt(e.view,i.moved),yo(e),i.event(e).end()},!0),s=vt(e,o),c=e.clientX,d=e.clientY;mt(e.view),Ao(e),i.mouse=[s,this.__zoom.invert(s)],Ht(this),i.start()}}function w(e,...n){if(r.apply(this,arguments)){var t=this.__zoom,i=vt(e.changedTouches?e.changedTouches[0]:e,this),l=t.invert(i),s=t.k*(e.shiftKey?.5:2),d=a(A(g(t,s),i,l),o.apply(this,n),u);yo(e),c>0?ot(this).transition().duration(c).call(v,d,i,e):ot(this).call(m.transform,d,i,e)}}function _(t,...o){if(r.apply(this,arguments)){var a,i,l,s,u=t.touches,c=u.length,d=b(this,o,t.changedTouches.length===c).event(t);for(Ao(t),i=0;i<c;++i)s=[s=vt(l=u[i],this),this.__zoom.invert(s),l.identifier],d.touch0?d.touch1||d.touch0[2]===s[2]||(d.touch1=s,d.taps=0):(d.touch0=s,a=!0,d.taps=1+!!e);e&&(e=clearTimeout(e)),a&&(d.taps<2&&(n=s[0],e=setTimeout(function(){e=null},500)),Ht(this),d.start())}}function k(e,...n){if(this.__zooming){var t,r,o,i,l=b(this,n).event(e),s=e.changedTouches,c=s.length;for(yo(e),t=0;t<c;++t)o=vt(r=s[t],this),l.touch0&&l.touch0[2]===r.identifier?l.touch0[0]=o:l.touch1&&l.touch1[2]===r.identifier&&(l.touch1[0]=o);if(r=l.that.__zoom,l.touch1){var d=l.touch0[0],f=l.touch0[1],h=l.touch1[0],p=l.touch1[1],m=(m=h[0]-d[0])*m+(m=h[1]-d[1])*m,y=(y=p[0]-f[0])*y+(y=p[1]-f[1])*y;r=g(r,Math.sqrt(m/y)),o=[(d[0]+h[0])/2,(d[1]+h[1])/2],i=[(f[0]+p[0])/2,(f[1]+p[1])/2]}else{if(!l.touch0)return;o=l.touch0[0],i=l.touch0[1]}l.zoom("touch",a(A(r,o,i),l.extent,u))}}function B(e,...r){if(this.__zooming){var o,a,i=b(this,r).event(e),l=e.changedTouches,s=l.length;for(Ao(e),t&&clearTimeout(t),t=setTimeout(function(){t=null},500),o=0;o<s;++o)a=l[o],i.touch0&&i.touch0[2]===a.identifier?delete i.touch0:i.touch1&&i.touch1[2]===a.identifier&&delete i.touch1;if(i.touch1&&!i.touch0&&(i.touch0=i.touch1,delete i.touch1),i.touch0)i.touch0[1]=this.__zoom.invert(i.touch0[0]);else if(i.end(),2===i.taps&&(a=vt(a,this),Math.hypot(n[0]-a[0],n[1]-a[1])<p)){var u=ot(this).on("dblclick.zoom");u&&u.apply(this,arguments)}}}return m.transform=function(e,n,t,r){var o=e.selection?e.selection():e;o.property("__zoom",xo),e!==o?v(e,n,t,r):o.interrupt().each(function(){b(this,arguments).event(r).start().zoom(null,"function"==typeof n?n.apply(this,arguments):n).end()})},m.scaleBy=function(e,n,t,r){m.scaleTo(e,function(){return this.__zoom.k*("function"==typeof n?n.apply(this,arguments):n)},t,r)},m.scaleTo=function(e,n,t,r){m.transform(e,function(){var e=o.apply(this,arguments),r=this.__zoom,i=null==t?y(e):"function"==typeof t?t.apply(this,arguments):t,l=r.invert(i),s="function"==typeof n?n.apply(this,arguments):n;return a(A(g(r,s),i,l),e,u)},t,r)},m.translateBy=function(e,n,t,r){m.transform(e,function(){return a(this.__zoom.translate("function"==typeof n?n.apply(this,arguments):n,"function"==typeof t?t.apply(this,arguments):t),o.apply(this,arguments),u)},null,r)},m.translateTo=function(e,n,t,r,i){m.transform(e,function(){var e=o.apply(this,arguments),i=this.__zoom,l=null==r?y(e):"function"==typeof r?r.apply(this,arguments):r;return a(mo.translate(l[0],l[1]).scale(i.k).translate("function"==typeof n?-n.apply(this,arguments):-n,"function"==typeof t?-t.apply(this,arguments):-t),e,u)},r,i)},x.prototype={event:function(e){return e&&(this.sourceEvent=e),this},start:function(){return 1===++this.active&&(this.that.__zooming=this,this.emit("start")),this},zoom:function(e,n){return this.mouse&&"mouse"!==e&&(this.mouse[1]=n.invert(this.mouse[0])),this.touch0&&"touch"!==e&&(this.touch0[1]=n.invert(this.touch0[0])),this.touch1&&"touch"!==e&&(this.touch1[1]=n.invert(this.touch1[0])),this.that.__zoom=n,this.emit("zoom"),this},end:function(){return 0===--this.active&&(delete this.that.__zooming,this.emit("end")),this},emit:function(e){var n=ot(this.that).datum();f.call(e,this.that,new ho(e,{sourceEvent:this.sourceEvent,target:m,type:e,transform:this.that.__zoom,dispatch:f}),n)}},m.wheelDelta=function(e){return arguments.length?(i="function"==typeof e?e:fo(+e),m):i},m.filter=function(e){return arguments.length?(r="function"==typeof e?e:fo(!!e),m):r},m.touchable=function(e){return arguments.length?(l="function"==typeof e?e:fo(!!e),m):l},m.extent=function(e){return arguments.length?(o="function"==typeof e?e:fo([[+e[0][0],+e[0][1]],[+e[1][0],+e[1][1]]]),m):o},m.scaleExtent=function(e){return arguments.length?(s[0]=+e[0],s[1]=+e[1],m):[s[0],s[1]]},m.translateExtent=function(e){return arguments.length?(u[0][0]=+e[0][0],u[1][0]=+e[1][0],u[0][1]=+e[0][1],u[1][1]=+e[1][1],m):[[u[0][0],u[0][1]],[u[1][0],u[1][1]]]},m.constrain=function(e){return arguments.length?(a=e,m):a},m.duration=function(e){return arguments.length?(c=+e,m):c},m.interpolate=function(e){return arguments.length?(d=e,m):d},m.on=function(){var e=f.on.apply(f,arguments);return e===f?m:e},m.clickDistance=function(e){return arguments.length?(h=(e=+e)*e,m):Math.sqrt(h)},m.tapDistance=function(e){return arguments.length?(p=+e,m):p},m}go.prototype=po.prototype;const ko=e=>()=>e;function Bo(e,{sourceEvent:n,subject:t,target:r,identifier:o,active:a,x:i,y:l,dx:s,dy:u,dispatch:c}){Object.defineProperties(this,{type:{value:e,enumerable:!0,configurable:!0},sourceEvent:{value:n,enumerable:!0,configurable:!0},subject:{value:t,enumerable:!0,configurable:!0},target:{value:r,enumerable:!0,configurable:!0},identifier:{value:o,enumerable:!0,configurable:!0},active:{value:a,enumerable:!0,configurable:!0},x:{value:i,enumerable:!0,configurable:!0},y:{value:l,enumerable:!0,configurable:!0},dx:{value:s,enumerable:!0,configurable:!0},dy:{value:u,enumerable:!0,configurable:!0},_:{value:c}})}function So(e){return!e.ctrlKey&&!e.button}function zo(){return this.parentNode}function No(e,n){return null==n?{x:e.x,y:e.y}:n}function jo(){return navigator.maxTouchPoints||"ontouchstart"in this}function Po(e,n){let t;if(void 0===n)for(const n of e)null!=n&&(t>n||void 0===t&&n>=n)&&(t=n);else{let r=-1;for(let o of e)null!=(o=n(o,++r,e))&&(t>o||void 0===t&&o>=o)&&(t=o)}return t}function To(e,n){let t;if(void 0===n)for(const n of e)null!=n&&(t<n||void 0===t&&n>=n)&&(t=n);else{let r=-1;for(let o of e)null!=(o=n(o,++r,e))&&(t<o||void 0===t&&o>=o)&&(t=o)}return t}Bo.prototype.on=function(){var e=this._.on.apply(this._,arguments);return e===this._?this:e};const Mo=function(e){var n=typeof e;return null!=e&&("object"==n||"function"==n)},Oo="object"==typeof global&&global&&global.Object===Object&&global;var Ro="object"==typeof self&&self&&self.Object===Object&&self;const Io=Oo||Ro||Function("return this")(),Lo=function(){return Io.Date.now()};var Do=/\s/;var Fo=/^\s+/;const Uo=function(e){return e?e.slice(0,function(e){for(var n=e.length;n--&&Do.test(e.charAt(n)););return n}(e)+1).replace(Fo,""):e},$o=Io.Symbol;var qo=Object.prototype,Ho=qo.hasOwnProperty,Wo=qo.toString,Yo=$o?$o.toStringTag:void 0;var Vo=Object.prototype.toString;var Xo=$o?$o.toStringTag:void 0;const Qo=function(e){return null==e?void 0===e?"[object Undefined]":"[object Null]":Xo&&Xo in Object(e)?function(e){var n=Ho.call(e,Yo),t=e[Yo];try{e[Yo]=void 0;var r=!0}catch(e){}var o=Wo.call(e);return r&&(n?e[Yo]=t:delete e[Yo]),o}(e):function(e){return Vo.call(e)}(e)};var Go=/^[-+]0x[0-9a-f]+$/i,Ko=/^0b[01]+$/i,Zo=/^0o[0-7]+$/i,Jo=parseInt;const ea=function(e){if("number"==typeof e)return e;if(function(e){return"symbol"==typeof e||function(e){return null!=e&&"object"==typeof e}(e)&&"[object Symbol]"==Qo(e)}(e))return NaN;if(Mo(e)){var n="function"==typeof e.valueOf?e.valueOf():e;e=Mo(n)?n+"":n}if("string"!=typeof e)return 0===e?e:+e;e=Uo(e);var t=Ko.test(e);return t||Zo.test(e)?Jo(e.slice(2),t?2:8):Go.test(e)?NaN:+e};var na=Math.max,ta=Math.min;const ra=function(e,n,t){var r,o,a,i,l,s,u=0,c=!1,d=!1,f=!0;if("function"!=typeof e)throw new TypeError("Expected a function");function h(n){var t=r,a=o;return r=o=void 0,u=n,i=e.apply(a,t)}function p(e){var t=e-s;return void 0===s||t>=n||t<0||d&&e-u>=a}function m(){var e=Lo();if(p(e))return g(e);l=setTimeout(m,function(e){var t=n-(e-s);return d?ta(t,a-(e-u)):t}(e))}function g(e){return l=void 0,f&&r?h(e):(r=o=void 0,i)}function A(){var e=Lo(),t=p(e);if(r=arguments,o=this,s=e,t){if(void 0===l)return function(e){return u=e,l=setTimeout(m,n),c?h(e):i}(s);if(d)return clearTimeout(l),l=setTimeout(m,n),h(s)}return void 0===l&&(l=setTimeout(m,n)),i}return n=ea(n)||0,Mo(t)&&(c=!!t.leading,a=(d="maxWait"in t)?na(ea(t.maxWait)||0,n):a,f="trailing"in t?!!t.trailing:f),A.cancel=function(){void 0!==l&&clearTimeout(l),u=0,r=s=o=l=void 0},A.flush=function(){return void 0===l?i:g(Lo())},A};var oa=Object.freeze({Linear:Object.freeze({None:function(e){return e},In:function(e){return e},Out:function(e){return e},InOut:function(e){return e}}),Quadratic:Object.freeze({In:function(e){return e*e},Out:function(e){return e*(2-e)},InOut:function(e){return(e*=2)<1?.5*e*e:-.5*(--e*(e-2)-1)}}),Cubic:Object.freeze({In:function(e){return e*e*e},Out:function(e){return--e*e*e+1},InOut:function(e){return(e*=2)<1?.5*e*e*e:.5*((e-=2)*e*e+2)}}),Quartic:Object.freeze({In:function(e){return e*e*e*e},Out:function(e){return 1- --e*e*e*e},InOut:function(e){return(e*=2)<1?.5*e*e*e*e:-.5*((e-=2)*e*e*e-2)}}),Quintic:Object.freeze({In:function(e){return e*e*e*e*e},Out:function(e){return--e*e*e*e*e+1},InOut:function(e){return(e*=2)<1?.5*e*e*e*e*e:.5*((e-=2)*e*e*e*e+2)}}),Sinusoidal:Object.freeze({In:function(e){return 1-Math.sin((1-e)*Math.PI/2)},Out:function(e){return Math.sin(e*Math.PI/2)},InOut:function(e){return.5*(1-Math.sin(Math.PI*(.5-e)))}}),Exponential:Object.freeze({In:function(e){return 0===e?0:Math.pow(1024,e-1)},Out:function(e){return 1===e?1:1-Math.pow(2,-10*e)},InOut:function(e){return 0===e?0:1===e?1:(e*=2)<1?.5*Math.pow(1024,e-1):.5*(2-Math.pow(2,-10*(e-1)))}}),Circular:Object.freeze({In:function(e){return 1-Math.sqrt(1-e*e)},Out:function(e){return Math.sqrt(1- --e*e)},InOut:function(e){return(e*=2)<1?-.5*(Math.sqrt(1-e*e)-1):.5*(Math.sqrt(1-(e-=2)*e)+1)}}),Elastic:Object.freeze({In:function(e){return 0===e?0:1===e?1:-Math.pow(2,10*(e-1))*Math.sin(5*(e-1.1)*Math.PI)},Out:function(e){return 0===e?0:1===e?1:Math.pow(2,-10*e)*Math.sin(5*(e-.1)*Math.PI)+1},InOut:function(e){return 0===e?0:1===e?1:(e*=2)<1?-.5*Math.pow(2,10*(e-1))*Math.sin(5*(e-1.1)*Math.PI):.5*Math.pow(2,-10*(e-1))*Math.sin(5*(e-1.1)*Math.PI)+1}}),Back:Object.freeze({In:function(e){var n=1.70158;return 1===e?1:e*e*((n+1)*e-n)},Out:function(e){var n=1.70158;return 0===e?0:--e*e*((n+1)*e+n)+1},InOut:function(e){var n=2.5949095;return(e*=2)<1?e*e*((n+1)*e-n)*.5:.5*((e-=2)*e*((n+1)*e+n)+2)}}),Bounce:Object.freeze({In:function(e){return 1-oa.Bounce.Out(1-e)},Out:function(e){return e<1/2.75?7.5625*e*e:e<2/2.75?7.5625*(e-=1.5/2.75)*e+.75:e<2.5/2.75?7.5625*(e-=2.25/2.75)*e+.9375:7.5625*(e-=2.625/2.75)*e+.984375},InOut:function(e){return e<.5?.5*oa.Bounce.In(2*e):.5*oa.Bounce.Out(2*e-1)+.5}}),generatePow:function(e){return void 0===e&&(e=4),e=(e=e<Number.EPSILON?Number.EPSILON:e)>1e4?1e4:e,{In:function(n){return Math.pow(n,e)},Out:function(n){return 1-Math.pow(1-n,e)},InOut:function(n){return n<.5?Math.pow(2*n,e)/2:(1-Math.pow(2-2*n,e))/2+.5}}}}),aa=function(){return performance.now()},ia=function(){function e(){for(var e=[],n=0;n<arguments.length;n++)e[n]=arguments[n];this._tweens={},this._tweensAddedDuringUpdate={},this.add.apply(this,e)}return e.prototype.getAll=function(){var e=this;return Object.keys(this._tweens).map(function(n){return e._tweens[n]})},e.prototype.removeAll=function(){this._tweens={}},e.prototype.add=function(){for(var e,n=[],t=0;t<arguments.length;t++)n[t]=arguments[t];for(var r=0,o=n;r<o.length;r++){var a=o[r];null===(e=a._group)||void 0===e||e.remove(a),a._group=this,this._tweens[a.getId()]=a,this._tweensAddedDuringUpdate[a.getId()]=a}},e.prototype.remove=function(){for(var e=[],n=0;n<arguments.length;n++)e[n]=arguments[n];for(var t=0,r=e;t<r.length;t++){var o=r[t];o._group=void 0,delete this._tweens[o.getId()],delete this._tweensAddedDuringUpdate[o.getId()]}},e.prototype.allStopped=function(){return this.getAll().every(function(e){return!e.isPlaying()})},e.prototype.update=function(e,n){void 0===e&&(e=aa()),void 0===n&&(n=!0);var t=Object.keys(this._tweens);if(0!==t.length)for(;t.length>0;){this._tweensAddedDuringUpdate={};for(var r=0;r<t.length;r++){var o=this._tweens[t[r]],a=!n;o&&!1===o.update(e,a)&&!n&&this.remove(o)}t=Object.keys(this._tweensAddedDuringUpdate)}},e}(),la={Linear:function(e,n){var t=e.length-1,r=t*n,o=Math.floor(r),a=la.Utils.Linear;return n<0?a(e[0],e[1],r):n>1?a(e[t],e[t-1],t-r):a(e[o],e[o+1>t?t:o+1],r-o)},Bezier:function(e,n){for(var t=0,r=e.length-1,o=Math.pow,a=la.Utils.Bernstein,i=0;i<=r;i++)t+=o(1-n,r-i)*o(n,i)*e[i]*a(r,i);return t},CatmullRom:function(e,n){var t=e.length-1,r=t*n,o=Math.floor(r),a=la.Utils.CatmullRom;return e[0]===e[t]?(n<0&&(o=Math.floor(r=t*(1+n))),a(e[(o-1+t)%t],e[o],e[(o+1)%t],e[(o+2)%t],r-o)):n<0?e[0]-(a(e[0],e[0],e[1],e[1],-r)-e[0]):n>1?e[t]-(a(e[t],e[t],e[t-1],e[t-1],r-t)-e[t]):a(e[o?o-1:0],e[o],e[t<o+1?t:o+1],e[t<o+2?t:o+2],r-o)},Utils:{Linear:function(e,n,t){return(n-e)*t+e},Bernstein:function(e,n){var t=la.Utils.Factorial;return t(e)/t(n)/t(e-n)},Factorial:function(){var e=[1];return function(n){var t=1;if(e[n])return e[n];for(var r=n;r>1;r--)t*=r;return e[n]=t,t}}(),CatmullRom:function(e,n,t,r,o){var a=.5*(t-e),i=.5*(r-n),l=o*o;return(2*n-2*t+a+i)*(o*l)+(-3*n+3*t-2*a-i)*l+a*o+n}}},sa=function(){function e(){}return e.nextId=function(){return e._nextId++},e._nextId=0,e}(),ua=new ia,ca=function(){function e(e,n){this._isPaused=!1,this._pauseStart=0,this._valuesStart={},this._valuesEnd={},this._valuesStartRepeat={},this._duration=1e3,this._isDynamic=!1,this._initialRepeat=0,this._repeat=0,this._yoyo=!1,this._isPlaying=!1,this._reversed=!1,this._delayTime=0,this._startTime=0,this._easingFunction=oa.Linear.None,this._interpolationFunction=la.Linear,this._chainedTweens=[],this._onStartCallbackFired=!1,this._onEveryStartCallbackFired=!1,this._id=sa.nextId(),this._isChainStopped=!1,this._propertiesAreSetUp=!1,this._goToEnd=!1,this._object=e,"object"==typeof n?(this._group=n,n.add(this)):!0===n&&(this._group=ua,ua.add(this))}return e.prototype.getId=function(){return this._id},e.prototype.isPlaying=function(){return this._isPlaying},e.prototype.isPaused=function(){return this._isPaused},e.prototype.getDuration=function(){return this._duration},e.prototype.to=function(e,n){if(void 0===n&&(n=1e3),this._isPlaying)throw new Error("Can not call Tween.to() while Tween is already started or paused. Stop the Tween first.");return this._valuesEnd=e,this._propertiesAreSetUp=!1,this._duration=n<0?0:n,this},e.prototype.duration=function(e){return void 0===e&&(e=1e3),this._duration=e<0?0:e,this},e.prototype.dynamic=function(e){return void 0===e&&(e=!1),this._isDynamic=e,this},e.prototype.start=function(e,n){if(void 0===e&&(e=aa()),void 0===n&&(n=!1),this._isPlaying)return this;if(this._repeat=this._initialRepeat,this._reversed)for(var t in this._reversed=!1,this._valuesStartRepeat)this._swapEndStartRepeatValues(t),this._valuesStart[t]=this._valuesStartRepeat[t];if(this._isPlaying=!0,this._isPaused=!1,this._onStartCallbackFired=!1,this._onEveryStartCallbackFired=!1,this._isChainStopped=!1,this._startTime=e,this._startTime+=this._delayTime,!this._propertiesAreSetUp||n){if(this._propertiesAreSetUp=!0,!this._isDynamic){var r={};for(var o in this._valuesEnd)r[o]=this._valuesEnd[o];this._valuesEnd=r}this._setupProperties(this._object,this._valuesStart,this._valuesEnd,this._valuesStartRepeat,n)}return this},e.prototype.startFromCurrentValues=function(e){return this.start(e,!0)},e.prototype._setupProperties=function(e,n,t,r,o){for(var a in t){var i=e[a],l=Array.isArray(i),s=l?"array":typeof i,u=!l&&Array.isArray(t[a]);if("undefined"!==s&&"function"!==s){if(u){if(0===(g=t[a]).length)continue;for(var c=[i],d=0,f=g.length;d<f;d+=1){var h=this._handleRelativeValue(i,g[d]);if(isNaN(h)){u=!1,console.warn("Found invalid interpolation list. Skipping.");break}c.push(h)}u&&(t[a]=c)}if("object"!==s&&!l||!i||u)(void 0===n[a]||o)&&(n[a]=i),l||(n[a]*=1),r[a]=u?t[a].slice().reverse():n[a]||0;else{n[a]=l?[]:{};var p=i;for(var m in p)n[a][m]=p[m];r[a]=l?[]:{};var g=t[a];if(!this._isDynamic){var A={};for(var m in g)A[m]=g[m];t[a]=g=A}this._setupProperties(p,n[a],g,r[a],o)}}}},e.prototype.stop=function(){return this._isChainStopped||(this._isChainStopped=!0,this.stopChainedTweens()),this._isPlaying?(this._isPlaying=!1,this._isPaused=!1,this._onStopCallback&&this._onStopCallback(this._object),this):this},e.prototype.end=function(){return this._goToEnd=!0,this.update(this._startTime+this._duration),this},e.prototype.pause=function(e){return void 0===e&&(e=aa()),this._isPaused||!this._isPlaying||(this._isPaused=!0,this._pauseStart=e),this},e.prototype.resume=function(e){return void 0===e&&(e=aa()),this._isPaused&&this._isPlaying?(this._isPaused=!1,this._startTime+=e-this._pauseStart,this._pauseStart=0,this):this},e.prototype.stopChainedTweens=function(){for(var e=0,n=this._chainedTweens.length;e<n;e++)this._chainedTweens[e].stop();return this},e.prototype.group=function(e){return e?(e.add(this),this):(console.warn("tween.group() without args has been removed, use group.add(tween) instead."),this)},e.prototype.remove=function(){var e;return null===(e=this._group)||void 0===e||e.remove(this),this},e.prototype.delay=function(e){return void 0===e&&(e=0),this._delayTime=e,this},e.prototype.repeat=function(e){return void 0===e&&(e=0),this._initialRepeat=e,this._repeat=e,this},e.prototype.repeatDelay=function(e){return this._repeatDelayTime=e,this},e.prototype.yoyo=function(e){return void 0===e&&(e=!1),this._yoyo=e,this},e.prototype.easing=function(e){return void 0===e&&(e=oa.Linear.None),this._easingFunction=e,this},e.prototype.interpolation=function(e){return void 0===e&&(e=la.Linear),this._interpolationFunction=e,this},e.prototype.chain=function(){for(var e=[],n=0;n<arguments.length;n++)e[n]=arguments[n];return this._chainedTweens=e,this},e.prototype.onStart=function(e){return this._onStartCallback=e,this},e.prototype.onEveryStart=function(e){return this._onEveryStartCallback=e,this},e.prototype.onUpdate=function(e){return this._onUpdateCallback=e,this},e.prototype.onRepeat=function(e){return this._onRepeatCallback=e,this},e.prototype.onComplete=function(e){return this._onCompleteCallback=e,this},e.prototype.onStop=function(e){return this._onStopCallback=e,this},e.prototype.update=function(n,t){var r,o,a=this;if(void 0===n&&(n=aa()),void 0===t&&(t=e.autoStartOnUpdate),this._isPaused)return!0;if(!this._goToEnd&&!this._isPlaying){if(!t)return!1;this.start(n,!0)}if(this._goToEnd=!1,n<this._startTime)return!0;!1===this._onStartCallbackFired&&(this._onStartCallback&&this._onStartCallback(this._object),this._onStartCallbackFired=!0),!1===this._onEveryStartCallbackFired&&(this._onEveryStartCallback&&this._onEveryStartCallback(this._object),this._onEveryStartCallbackFired=!0);var i=n-this._startTime,l=this._duration+(null!==(r=this._repeatDelayTime)&&void 0!==r?r:this._delayTime),s=this._duration+this._repeat*l,u=function(){if(0===a._duration)return 1;if(i>s)return 1;var e=Math.trunc(i/l),n=i-e*l,t=Math.min(n/a._duration,1);return 0===t&&i===a._duration?1:t}(),c=this._easingFunction(u);if(this._updateProperties(this._object,this._valuesStart,this._valuesEnd,c),this._onUpdateCallback&&this._onUpdateCallback(this._object,u),0===this._duration||i>=this._duration){if(this._repeat>0){var d=Math.min(Math.trunc((i-this._duration)/l)+1,this._repeat);for(o in isFinite(this._repeat)&&(this._repeat-=d),this._valuesStartRepeat)this._yoyo||"string"!=typeof this._valuesEnd[o]||(this._valuesStartRepeat[o]=this._valuesStartRepeat[o]+parseFloat(this._valuesEnd[o])),this._yoyo&&this._swapEndStartRepeatValues(o),this._valuesStart[o]=this._valuesStartRepeat[o];return this._yoyo&&(this._reversed=!this._reversed),this._startTime+=l*d,this._onRepeatCallback&&this._onRepeatCallback(this._object),this._onEveryStartCallbackFired=!1,!0}this._onCompleteCallback&&this._onCompleteCallback(this._object);for(var f=0,h=this._chainedTweens.length;f<h;f++)this._chainedTweens[f].start(this._startTime+this._duration,!1);return this._isPlaying=!1,!1}return!0},e.prototype._updateProperties=function(e,n,t,r){for(var o in t)if(void 0!==n[o]){var a=n[o]||0,i=t[o],l=Array.isArray(e[o]),s=Array.isArray(i);!l&&s?e[o]=this._interpolationFunction(i,r):"object"==typeof i&&i?this._updateProperties(e[o],a,i,r):"number"==typeof(i=this._handleRelativeValue(a,i))&&(e[o]=a+(i-a)*r)}},e.prototype._handleRelativeValue=function(e,n){return"string"!=typeof n?n:"+"===n.charAt(0)||"-"===n.charAt(0)?e+parseFloat(n):parseFloat(n)},e.prototype._swapEndStartRepeatValues=function(e){var n=this._valuesStartRepeat[e],t=this._valuesEnd[e];this._valuesStartRepeat[e]="string"==typeof t?this._valuesStartRepeat[e]+parseFloat(t):this._valuesEnd[e],this._valuesEnd[e]=n},e.autoStartOnUpdate=!1,e}(),da=(sa.nextId,ua);function fa(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=Array(n);t<n;t++)r[t]=e[t];return r}function ha(e,n,t){return Object.defineProperty(e,"prototype",{writable:!1}),e}da.getAll.bind(da),da.removeAll.bind(da),da.add.bind(da),da.remove.bind(da),da.update.bind(da);var pa=ha(function e(n,t){var r=t.default,o=void 0===r?null:r,a=t.triggerUpdate,i=void 0===a||a,l=t.onChange,s=void 0===l?function(e,n){}:l;!function(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}(this,e),this.name=n,this.defaultVal=o,this.triggerUpdate=i,this.onChange=s});function ma(e){var n=e.stateInit,t=void 0===n?function(){return{}}:n,r=e.props,o=void 0===r?{}:r,a=e.methods,i=void 0===a?{}:a,l=e.aliases,s=void 0===l?{}:l,u=e.init,c=void 0===u?function(){}:u,d=e.update,f=void 0===d?function(){}:d,h=Object.keys(o).map(function(e){return new pa(e,o[e])});return function e(){for(var n=arguments.length,r=new Array(n),o=0;o<n;o++)r[o]=arguments[o];var a=!!(this instanceof e?this.constructor:void 0),l=a?r.shift():void 0,u=r[0],d=void 0===u?{}:u,p=Object.assign({},t instanceof Function?t(d):t,{initialised:!1}),m={};function g(e){return A(e,d),y(),g}var A=function(e,n){c.call(g,e,p,n),p.initialised=!0},y=ra(function(){p.initialised&&(f.call(g,p,m),m={})},1);return h.forEach(function(e){g[e.name]=function(e){var n=e.name,t=e.triggerUpdate,r=void 0!==t&&t,o=e.onChange,a=void 0===o?function(e,n){}:o,i=e.defaultVal,l=void 0===i?null:i;return function(e){var t=p[n];if(!arguments.length)return t;var o=void 0===e?l:e;return p[n]=o,a.call(g,o,p,t),!m.hasOwnProperty(n)&&(m[n]=t),r&&y(),g}}(e)}),Object.keys(i).forEach(function(e){g[e]=function(){for(var n,t=arguments.length,r=new Array(t),o=0;o<t;o++)r[o]=arguments[o];return(n=i[e]).call.apply(n,[g,p].concat(r))}}),Object.entries(s).forEach(function(e){var n=function(e,n){return function(e){if(Array.isArray(e))return e}(e)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var r,o,a,i,l=[],s=!0,u=!1;try{if(a=(t=t.call(e)).next,0===n);else for(;!(s=(r=a.call(t)).done)&&(l.push(r.value),l.length!==n);s=!0);}catch(e){u=!0,o=e}finally{try{if(!s&&null!=t.return&&(i=t.return(),Object(i)!==i))return}finally{if(u)throw o}}return l}}(e,n)||function(e,n){if(e){if("string"==typeof e)return fa(e,n);var t={}.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?fa(e,n):void 0}}(e,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}(e,2),t=n[0],r=n[1];return g[t]=g[r]}),g.resetProps=function(){return h.forEach(function(e){g[e.name](e.defaultVal)}),g},g.resetProps(),p._rerender=y,a&&l&&g(l),g}}var ga=function(e){return"function"==typeof e?e:"string"==typeof e?function(n){return n[e]}:function(n){return e}};function Aa(e){return Aa="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Aa(e)}var ya=/^\s+/,va=/\s+$/;function ba(e,n){if(n=n||{},(e=e||"")instanceof ba)return e;if(!(this instanceof ba))return new ba(e,n);var t=function(e){var n={r:0,g:0,b:0},t=1,r=null,o=null,a=null,i=!1,l=!1;return"string"==typeof e&&(e=function(e){e=e.replace(ya,"").replace(va,"").toLowerCase();var n,t=!1;if(Ia[e])e=Ia[e],t=!0;else if("transparent"==e)return{r:0,g:0,b:0,a:0,format:"name"};return(n=Ga.rgb.exec(e))?{r:n[1],g:n[2],b:n[3]}:(n=Ga.rgba.exec(e))?{r:n[1],g:n[2],b:n[3],a:n[4]}:(n=Ga.hsl.exec(e))?{h:n[1],s:n[2],l:n[3]}:(n=Ga.hsla.exec(e))?{h:n[1],s:n[2],l:n[3],a:n[4]}:(n=Ga.hsv.exec(e))?{h:n[1],s:n[2],v:n[3]}:(n=Ga.hsva.exec(e))?{h:n[1],s:n[2],v:n[3],a:n[4]}:(n=Ga.hex8.exec(e))?{r:$a(n[1]),g:$a(n[2]),b:$a(n[3]),a:Ya(n[4]),format:t?"name":"hex8"}:(n=Ga.hex6.exec(e))?{r:$a(n[1]),g:$a(n[2]),b:$a(n[3]),format:t?"name":"hex"}:(n=Ga.hex4.exec(e))?{r:$a(n[1]+""+n[1]),g:$a(n[2]+""+n[2]),b:$a(n[3]+""+n[3]),a:Ya(n[4]+""+n[4]),format:t?"name":"hex8"}:!!(n=Ga.hex3.exec(e))&&{r:$a(n[1]+""+n[1]),g:$a(n[2]+""+n[2]),b:$a(n[3]+""+n[3]),format:t?"name":"hex"}}(e)),"object"==Aa(e)&&(Ka(e.r)&&Ka(e.g)&&Ka(e.b)?(n=function(e,n,t){return{r:255*Fa(e,255),g:255*Fa(n,255),b:255*Fa(t,255)}}(e.r,e.g,e.b),i=!0,l="%"===String(e.r).substr(-1)?"prgb":"rgb"):Ka(e.h)&&Ka(e.s)&&Ka(e.v)?(r=Ha(e.s),o=Ha(e.v),n=function(e,n,t){e=6*Fa(e,360),n=Fa(n,100),t=Fa(t,100);var r=Math.floor(e),o=e-r,a=t*(1-n),i=t*(1-o*n),l=t*(1-(1-o)*n),s=r%6;return{r:255*[t,i,a,a,l,t][s],g:255*[l,t,t,i,a,a][s],b:255*[a,a,l,t,t,i][s]}}(e.h,r,o),i=!0,l="hsv"):Ka(e.h)&&Ka(e.s)&&Ka(e.l)&&(r=Ha(e.s),a=Ha(e.l),n=function(e,n,t){var r,o,a;function i(e,n,t){return t<0&&(t+=1),t>1&&(t-=1),t<1/6?e+6*(n-e)*t:t<.5?n:t<2/3?e+(n-e)*(2/3-t)*6:e}if(e=Fa(e,360),n=Fa(n,100),t=Fa(t,100),0===n)r=o=a=t;else{var l=t<.5?t*(1+n):t+n-t*n,s=2*t-l;r=i(s,l,e+1/3),o=i(s,l,e),a=i(s,l,e-1/3)}return{r:255*r,g:255*o,b:255*a}}(e.h,r,a),i=!0,l="hsl"),e.hasOwnProperty("a")&&(t=e.a)),t=Da(t),{ok:i,format:e.format||l,r:Math.min(255,Math.max(n.r,0)),g:Math.min(255,Math.max(n.g,0)),b:Math.min(255,Math.max(n.b,0)),a:t}}(e);this._originalInput=e,this._r=t.r,this._g=t.g,this._b=t.b,this._a=t.a,this._roundA=Math.round(100*this._a)/100,this._format=n.format||t.format,this._gradientType=n.gradientType,this._r<1&&(this._r=Math.round(this._r)),this._g<1&&(this._g=Math.round(this._g)),this._b<1&&(this._b=Math.round(this._b)),this._ok=t.ok}function xa(e,n,t){e=Fa(e,255),n=Fa(n,255),t=Fa(t,255);var r,o,a=Math.max(e,n,t),i=Math.min(e,n,t),l=(a+i)/2;if(a==i)r=o=0;else{var s=a-i;switch(o=l>.5?s/(2-a-i):s/(a+i),a){case e:r=(n-t)/s+(n<t?6:0);break;case n:r=(t-e)/s+2;break;case t:r=(e-n)/s+4}r/=6}return{h:r,s:o,l}}function Ea(e,n,t){e=Fa(e,255),n=Fa(n,255),t=Fa(t,255);var r,o,a=Math.max(e,n,t),i=Math.min(e,n,t),l=a,s=a-i;if(o=0===a?0:s/a,a==i)r=0;else{switch(a){case e:r=(n-t)/s+(n<t?6:0);break;case n:r=(t-e)/s+2;break;case t:r=(e-n)/s+4}r/=6}return{h:r,s:o,v:l}}function Ca(e,n,t,r){var o=[qa(Math.round(e).toString(16)),qa(Math.round(n).toString(16)),qa(Math.round(t).toString(16))];return r&&o[0].charAt(0)==o[0].charAt(1)&&o[1].charAt(0)==o[1].charAt(1)&&o[2].charAt(0)==o[2].charAt(1)?o[0].charAt(0)+o[1].charAt(0)+o[2].charAt(0):o.join("")}function wa(e,n,t,r){return[qa(Wa(r)),qa(Math.round(e).toString(16)),qa(Math.round(n).toString(16)),qa(Math.round(t).toString(16))].join("")}function _a(e,n){n=0===n?0:n||10;var t=ba(e).toHsl();return t.s-=n/100,t.s=Ua(t.s),ba(t)}function ka(e,n){n=0===n?0:n||10;var t=ba(e).toHsl();return t.s+=n/100,t.s=Ua(t.s),ba(t)}function Ba(e){return ba(e).desaturate(100)}function Sa(e,n){n=0===n?0:n||10;var t=ba(e).toHsl();return t.l+=n/100,t.l=Ua(t.l),ba(t)}function za(e,n){n=0===n?0:n||10;var t=ba(e).toRgb();return t.r=Math.max(0,Math.min(255,t.r-Math.round(-n/100*255))),t.g=Math.max(0,Math.min(255,t.g-Math.round(-n/100*255))),t.b=Math.max(0,Math.min(255,t.b-Math.round(-n/100*255))),ba(t)}function Na(e,n){n=0===n?0:n||10;var t=ba(e).toHsl();return t.l-=n/100,t.l=Ua(t.l),ba(t)}function ja(e,n){var t=ba(e).toHsl(),r=(t.h+n)%360;return t.h=r<0?360+r:r,ba(t)}function Pa(e){var n=ba(e).toHsl();return n.h=(n.h+180)%360,ba(n)}function Ta(e,n){if(isNaN(n)||n<=0)throw new Error("Argument to polyad must be a positive number");for(var t=ba(e).toHsl(),r=[ba(e)],o=360/n,a=1;a<n;a++)r.push(ba({h:(t.h+a*o)%360,s:t.s,l:t.l}));return r}function Ma(e){var n=ba(e).toHsl(),t=n.h;return[ba(e),ba({h:(t+72)%360,s:n.s,l:n.l}),ba({h:(t+216)%360,s:n.s,l:n.l})]}function Oa(e,n,t){n=n||6,t=t||30;var r=ba(e).toHsl(),o=360/t,a=[ba(e)];for(r.h=(r.h-(o*n>>1)+720)%360;--n;)r.h=(r.h+o)%360,a.push(ba(r));return a}function Ra(e,n){n=n||6;for(var t=ba(e).toHsv(),r=t.h,o=t.s,a=t.v,i=[],l=1/n;n--;)i.push(ba({h:r,s:o,v:a})),a=(a+l)%1;return i}ba.prototype={isDark:function(){return this.getBrightness()<128},isLight:function(){return!this.isDark()},isValid:function(){return this._ok},getOriginalInput:function(){return this._originalInput},getFormat:function(){return this._format},getAlpha:function(){return this._a},getBrightness:function(){var e=this.toRgb();return(299*e.r+587*e.g+114*e.b)/1e3},getLuminance:function(){var e,n,t,r=this.toRgb();return e=r.r/255,n=r.g/255,t=r.b/255,.2126*(e<=.03928?e/12.92:Math.pow((e+.055)/1.055,2.4))+.7152*(n<=.03928?n/12.92:Math.pow((n+.055)/1.055,2.4))+.0722*(t<=.03928?t/12.92:Math.pow((t+.055)/1.055,2.4))},setAlpha:function(e){return this._a=Da(e),this._roundA=Math.round(100*this._a)/100,this},toHsv:function(){var e=Ea(this._r,this._g,this._b);return{h:360*e.h,s:e.s,v:e.v,a:this._a}},toHsvString:function(){var e=Ea(this._r,this._g,this._b),n=Math.round(360*e.h),t=Math.round(100*e.s),r=Math.round(100*e.v);return 1==this._a?"hsv("+n+", "+t+"%, "+r+"%)":"hsva("+n+", "+t+"%, "+r+"%, "+this._roundA+")"},toHsl:function(){var e=xa(this._r,this._g,this._b);return{h:360*e.h,s:e.s,l:e.l,a:this._a}},toHslString:function(){var e=xa(this._r,this._g,this._b),n=Math.round(360*e.h),t=Math.round(100*e.s),r=Math.round(100*e.l);return 1==this._a?"hsl("+n+", "+t+"%, "+r+"%)":"hsla("+n+", "+t+"%, "+r+"%, "+this._roundA+")"},toHex:function(e){return Ca(this._r,this._g,this._b,e)},toHexString:function(e){return"#"+this.toHex(e)},toHex8:function(e){return function(e,n,t,r,o){var a=[qa(Math.round(e).toString(16)),qa(Math.round(n).toString(16)),qa(Math.round(t).toString(16)),qa(Wa(r))];return o&&a[0].charAt(0)==a[0].charAt(1)&&a[1].charAt(0)==a[1].charAt(1)&&a[2].charAt(0)==a[2].charAt(1)&&a[3].charAt(0)==a[3].charAt(1)?a[0].charAt(0)+a[1].charAt(0)+a[2].charAt(0)+a[3].charAt(0):a.join("")}(this._r,this._g,this._b,this._a,e)},toHex8String:function(e){return"#"+this.toHex8(e)},toRgb:function(){return{r:Math.round(this._r),g:Math.round(this._g),b:Math.round(this._b),a:this._a}},toRgbString:function(){return 1==this._a?"rgb("+Math.round(this._r)+", "+Math.round(this._g)+", "+Math.round(this._b)+")":"rgba("+Math.round(this._r)+", "+Math.round(this._g)+", "+Math.round(this._b)+", "+this._roundA+")"},toPercentageRgb:function(){return{r:Math.round(100*Fa(this._r,255))+"%",g:Math.round(100*Fa(this._g,255))+"%",b:Math.round(100*Fa(this._b,255))+"%",a:this._a}},toPercentageRgbString:function(){return 1==this._a?"rgb("+Math.round(100*Fa(this._r,255))+"%, "+Math.round(100*Fa(this._g,255))+"%, "+Math.round(100*Fa(this._b,255))+"%)":"rgba("+Math.round(100*Fa(this._r,255))+"%, "+Math.round(100*Fa(this._g,255))+"%, "+Math.round(100*Fa(this._b,255))+"%, "+this._roundA+")"},toName:function(){return 0===this._a?"transparent":!(this._a<1)&&(La[Ca(this._r,this._g,this._b,!0)]||!1)},toFilter:function(e){var n="#"+wa(this._r,this._g,this._b,this._a),t=n,r=this._gradientType?"GradientType = 1, ":"";if(e){var o=ba(e);t="#"+wa(o._r,o._g,o._b,o._a)}return"progid:DXImageTransform.Microsoft.gradient("+r+"startColorstr="+n+",endColorstr="+t+")"},toString:function(e){var n=!!e;e=e||this._format;var t=!1,r=this._a<1&&this._a>=0;return n||!r||"hex"!==e&&"hex6"!==e&&"hex3"!==e&&"hex4"!==e&&"hex8"!==e&&"name"!==e?("rgb"===e&&(t=this.toRgbString()),"prgb"===e&&(t=this.toPercentageRgbString()),"hex"!==e&&"hex6"!==e||(t=this.toHexString()),"hex3"===e&&(t=this.toHexString(!0)),"hex4"===e&&(t=this.toHex8String(!0)),"hex8"===e&&(t=this.toHex8String()),"name"===e&&(t=this.toName()),"hsl"===e&&(t=this.toHslString()),"hsv"===e&&(t=this.toHsvString()),t||this.toHexString()):"name"===e&&0===this._a?this.toName():this.toRgbString()},clone:function(){return ba(this.toString())},_applyModification:function(e,n){var t=e.apply(null,[this].concat([].slice.call(n)));return this._r=t._r,this._g=t._g,this._b=t._b,this.setAlpha(t._a),this},lighten:function(){return this._applyModification(Sa,arguments)},brighten:function(){return this._applyModification(za,arguments)},darken:function(){return this._applyModification(Na,arguments)},desaturate:function(){return this._applyModification(_a,arguments)},saturate:function(){return this._applyModification(ka,arguments)},greyscale:function(){return this._applyModification(Ba,arguments)},spin:function(){return this._applyModification(ja,arguments)},_applyCombination:function(e,n){return e.apply(null,[this].concat([].slice.call(n)))},analogous:function(){return this._applyCombination(Oa,arguments)},complement:function(){return this._applyCombination(Pa,arguments)},monochromatic:function(){return this._applyCombination(Ra,arguments)},splitcomplement:function(){return this._applyCombination(Ma,arguments)},triad:function(){return this._applyCombination(Ta,[3])},tetrad:function(){return this._applyCombination(Ta,[4])}},ba.fromRatio=function(e,n){if("object"==Aa(e)){var t={};for(var r in e)e.hasOwnProperty(r)&&(t[r]="a"===r?e[r]:Ha(e[r]));e=t}return ba(e,n)},ba.equals=function(e,n){return!(!e||!n)&&ba(e).toRgbString()==ba(n).toRgbString()},ba.random=function(){return ba.fromRatio({r:Math.random(),g:Math.random(),b:Math.random()})},ba.mix=function(e,n,t){t=0===t?0:t||50;var r=ba(e).toRgb(),o=ba(n).toRgb(),a=t/100;return ba({r:(o.r-r.r)*a+r.r,g:(o.g-r.g)*a+r.g,b:(o.b-r.b)*a+r.b,a:(o.a-r.a)*a+r.a})},ba.readability=function(e,n){var t=ba(e),r=ba(n);return(Math.max(t.getLuminance(),r.getLuminance())+.05)/(Math.min(t.getLuminance(),r.getLuminance())+.05)},ba.isReadable=function(e,n,t){var r,o,a,i,l,s=ba.readability(e,n);switch(o=!1,"AA"!==(i=((a=(a=t)||{level:"AA",size:"small"}).level||"AA").toUpperCase())&&"AAA"!==i&&(i="AA"),"small"!==(l=(a.size||"small").toLowerCase())&&"large"!==l&&(l="small"),(r={level:i,size:l}).level+r.size){case"AAsmall":case"AAAlarge":o=s>=4.5;break;case"AAlarge":o=s>=3;break;case"AAAsmall":o=s>=7}return o},ba.mostReadable=function(e,n,t){var r,o,a,i,l=null,s=0;o=(t=t||{}).includeFallbackColors,a=t.level,i=t.size;for(var u=0;u<n.length;u++)(r=ba.readability(e,n[u]))>s&&(s=r,l=ba(n[u]));return ba.isReadable(e,l,{level:a,size:i})||!o?l:(t.includeFallbackColors=!1,ba.mostReadable(e,["#fff","#000"],t))};var Ia=ba.names={aliceblue:"f0f8ff",antiquewhite:"faebd7",aqua:"0ff",aquamarine:"7fffd4",azure:"f0ffff",beige:"f5f5dc",bisque:"ffe4c4",black:"000",blanchedalmond:"ffebcd",blue:"00f",blueviolet:"8a2be2",brown:"a52a2a",burlywood:"deb887",burntsienna:"ea7e5d",cadetblue:"5f9ea0",chartreuse:"7fff00",chocolate:"d2691e",coral:"ff7f50",cornflowerblue:"6495ed",cornsilk:"fff8dc",crimson:"dc143c",cyan:"0ff",darkblue:"00008b",darkcyan:"008b8b",darkgoldenrod:"b8860b",darkgray:"a9a9a9",darkgreen:"006400",darkgrey:"a9a9a9",darkkhaki:"bdb76b",darkmagenta:"8b008b",darkolivegreen:"556b2f",darkorange:"ff8c00",darkorchid:"9932cc",darkred:"8b0000",darksalmon:"e9967a",darkseagreen:"8fbc8f",darkslateblue:"483d8b",darkslategray:"2f4f4f",darkslategrey:"2f4f4f",darkturquoise:"00ced1",darkviolet:"9400d3",deeppink:"ff1493",deepskyblue:"00bfff",dimgray:"696969",dimgrey:"696969",dodgerblue:"1e90ff",firebrick:"b22222",floralwhite:"fffaf0",forestgreen:"228b22",fuchsia:"f0f",gainsboro:"dcdcdc",ghostwhite:"f8f8ff",gold:"ffd700",goldenrod:"daa520",gray:"808080",green:"008000",greenyellow:"adff2f",grey:"808080",honeydew:"f0fff0",hotpink:"ff69b4",indianred:"cd5c5c",indigo:"4b0082",ivory:"fffff0",khaki:"f0e68c",lavender:"e6e6fa",lavenderblush:"fff0f5",lawngreen:"7cfc00",lemonchiffon:"fffacd",lightblue:"add8e6",lightcoral:"f08080",lightcyan:"e0ffff",lightgoldenrodyellow:"fafad2",lightgray:"d3d3d3",lightgreen:"90ee90",lightgrey:"d3d3d3",lightpink:"ffb6c1",lightsalmon:"ffa07a",lightseagreen:"20b2aa",lightskyblue:"87cefa",lightslategray:"789",lightslategrey:"789",lightsteelblue:"b0c4de",lightyellow:"ffffe0",lime:"0f0",limegreen:"32cd32",linen:"faf0e6",magenta:"f0f",maroon:"800000",mediumaquamarine:"66cdaa",mediumblue:"0000cd",mediumorchid:"ba55d3",mediumpurple:"9370db",mediumseagreen:"3cb371",mediumslateblue:"7b68ee",mediumspringgreen:"00fa9a",mediumturquoise:"48d1cc",mediumvioletred:"c71585",midnightblue:"191970",mintcream:"f5fffa",mistyrose:"ffe4e1",moccasin:"ffe4b5",navajowhite:"ffdead",navy:"000080",oldlace:"fdf5e6",olive:"808000",olivedrab:"6b8e23",orange:"ffa500",orangered:"ff4500",orchid:"da70d6",palegoldenrod:"eee8aa",palegreen:"98fb98",paleturquoise:"afeeee",palevioletred:"db7093",papayawhip:"ffefd5",peachpuff:"ffdab9",peru:"cd853f",pink:"ffc0cb",plum:"dda0dd",powderblue:"b0e0e6",purple:"800080",rebeccapurple:"663399",red:"f00",rosybrown:"bc8f8f",royalblue:"4169e1",saddlebrown:"8b4513",salmon:"fa8072",sandybrown:"f4a460",seagreen:"2e8b57",seashell:"fff5ee",sienna:"a0522d",silver:"c0c0c0",skyblue:"87ceeb",slateblue:"6a5acd",slategray:"708090",slategrey:"708090",snow:"fffafa",springgreen:"00ff7f",steelblue:"4682b4",tan:"d2b48c",teal:"008080",thistle:"d8bfd8",tomato:"ff6347",turquoise:"40e0d0",violet:"ee82ee",wheat:"f5deb3",white:"fff",whitesmoke:"f5f5f5",yellow:"ff0",yellowgreen:"9acd32"},La=ba.hexNames=function(e){var n={};for(var t in e)e.hasOwnProperty(t)&&(n[e[t]]=t);return n}(Ia);function Da(e){return e=parseFloat(e),(isNaN(e)||e<0||e>1)&&(e=1),e}function Fa(e,n){(function(e){return"string"==typeof e&&-1!=e.indexOf(".")&&1===parseFloat(e)})(e)&&(e="100%");var t=function(e){return"string"==typeof e&&-1!=e.indexOf("%")}(e);return e=Math.min(n,Math.max(0,parseFloat(e))),t&&(e=parseInt(e*n,10)/100),Math.abs(e-n)<1e-6?1:e%n/parseFloat(n)}function Ua(e){return Math.min(1,Math.max(0,e))}function $a(e){return parseInt(e,16)}function qa(e){return 1==e.length?"0"+e:""+e}function Ha(e){return e<=1&&(e=100*e+"%"),e}function Wa(e){return Math.round(255*parseFloat(e)).toString(16)}function Ya(e){return $a(e)/255}var Va,Xa,Qa,Ga=(Xa="[\\s|\\(]+("+(Va="(?:[-\\+]?\\d*\\.\\d+%?)|(?:[-\\+]?\\d+%?)")+")[,|\\s]+("+Va+")[,|\\s]+("+Va+")\\s*\\)?",Qa="[\\s|\\(]+("+Va+")[,|\\s]+("+Va+")[,|\\s]+("+Va+")[,|\\s]+("+Va+")\\s*\\)?",{CSS_UNIT:new RegExp(Va),rgb:new RegExp("rgb"+Xa),rgba:new RegExp("rgba"+Qa),hsl:new RegExp("hsl"+Xa),hsla:new RegExp("hsla"+Qa),hsv:new RegExp("hsv"+Xa),hsva:new RegExp("hsva"+Qa),hex3:/^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,hex6:/^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/,hex4:/^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,hex8:/^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/});function Ka(e){return!!Ga.CSS_UNIT.exec(e)}function Za(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=Array(n);t<n;t++)r[t]=e[t];return r}function Ja(e,n,t){if("function"==typeof e?e===n:e.has(n))return arguments.length<3?n:t;throw new TypeError("Private element is not present on this object")}function ei(e,n){return e.get(Ja(e,n))}function ni(e,n,t){(function(e,n){if(n.has(e))throw new TypeError("Cannot initialize the same private elements twice on an object")})(e,n),n.set(e,t)}function ti(e,n,t){return e.set(Ja(e,n),t),t}function ri(e){var n=function(e){if("object"!=typeof e||!e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var t=n.call(e,"string");if("object"!=typeof t)return t;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"==typeof n?n:n+""}var oi,ai,ii,li,si,ui,ci,di,fi,hi,pi,mi,gi=function(e,n,t){return(e<<16)+(n<<8)+t},Ai=function(e,n){return 123*e%Math.pow(2,n)},yi=new WeakMap,vi=new WeakMap,bi=function(){return function(e,n){return n&&function(e,n){for(var t=0;t<n.length;t++){var r=n[t];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,ri(r.key),r)}}(e.prototype,n),Object.defineProperty(e,"prototype",{writable:!1}),e}(function e(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:6;!function(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}(this,e),ni(this,yi,void 0),ni(this,vi,void 0),ti(vi,this,n),this.reset()},[{key:"reset",value:function(){ti(yi,this,["__reserved for background__"])}},{key:"register",value:function(e){if(ei(yi,this).length>=Math.pow(2,24-ei(vi,this)))return null;var n,t=ei(yi,this).length,r=(n=t+(Ai(t,ei(vi,this))<<24-ei(vi,this)),"#".concat(Math.min(n,Math.pow(2,24)).toString(16).padStart(6,"0")));return ei(yi,this).push(e),r}},{key:"lookup",value:function(e){if(!e)return null;var n="string"==typeof e?function(e){var n=ba(e).toRgb(),t=n.r,r=n.g,o=n.b;return gi(t,r,o)}(e):gi.apply(void 0,function(e){return function(e){if(Array.isArray(e))return Za(e)}(e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||function(e,n){if(e){if("string"==typeof e)return Za(e,n);var t={}.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?Za(e,n):void 0}}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}(e));if(!n)return null;var t=n&Math.pow(2,24-ei(vi,this))-1,r=n>>24-ei(vi,this)&Math.pow(2,ei(vi,this))-1;return Ai(t,ei(vi,this))!==r||t>=ei(yi,this).length?null:ei(yi,this)[t]}}])}(),xi={},Ei=[],Ci=/acit|ex(?:s|g|n|p|$)|rph|grid|ows|mnc|ntw|ine[ch]|zoo|^ord|itera/i,wi=Array.isArray;function _i(e,n){for(var t in n)e[t]=n[t];return e}function ki(e){e&&e.parentNode&&e.parentNode.removeChild(e)}function Bi(e,n,t,r,o){var a={type:e,props:n,key:t,ref:r,__k:null,__:null,__b:0,__e:null,__c:null,constructor:void 0,__v:null==o?++ii:o,__i:-1,__u:0};return null==o&&null!=ai.vnode&&ai.vnode(a),a}function Si(e){return e.children}function zi(e,n){this.props=e,this.context=n}function Ni(e,n){if(null==n)return e.__?Ni(e.__,e.__i+1):null;for(var t;n<e.__k.length;n++)if(null!=(t=e.__k[n])&&null!=t.__e)return t.__e;return"function"==typeof e.type?Ni(e):null}function ji(e){var n,t;if(null!=(e=e.__)&&null!=e.__c){for(e.__e=e.__c.base=null,n=0;n<e.__k.length;n++)if(null!=(t=e.__k[n])&&null!=t.__e){e.__e=e.__c.base=t.__e;break}return ji(e)}}function Pi(e){(!e.__d&&(e.__d=!0)&&si.push(e)&&!Ti.__r++||ui!=ai.debounceRendering)&&((ui=ai.debounceRendering)||ci)(Ti)}function Ti(){for(var e,n,t,r,o,a,i,l=1;si.length;)si.length>l&&si.sort(di),e=si.shift(),l=si.length,e.__d&&(t=void 0,o=(r=(n=e).__v).__e,a=[],i=[],n.__P&&((t=_i({},r)).__v=r.__v+1,ai.vnode&&ai.vnode(t),Ui(n.__P,t,r,n.__n,n.__P.namespaceURI,32&r.__u?[o]:null,a,null==o?Ni(r):o,!!(32&r.__u),i),t.__v=r.__v,t.__.__k[t.__i]=t,qi(a,t,i),t.__e!=o&&ji(t)));Ti.__r=0}function Mi(e,n,t,r,o,a,i,l,s,u,c){var d,f,h,p,m,g,A=r&&r.__k||Ei,y=n.length;for(s=Oi(t,n,A,s,y),d=0;d<y;d++)null!=(h=t.__k[d])&&(f=-1==h.__i?xi:A[h.__i]||xi,h.__i=d,g=Ui(e,h,f,o,a,i,l,s,u,c),p=h.__e,h.ref&&f.ref!=h.ref&&(f.ref&&Yi(f.ref,null,h),c.push(h.ref,h.__c||p,h)),null==m&&null!=p&&(m=p),4&h.__u||f.__k===h.__k?s=Ri(h,s,e):"function"==typeof h.type&&void 0!==g?s=g:p&&(s=p.nextSibling),h.__u&=-7);return t.__e=m,s}function Oi(e,n,t,r,o){var a,i,l,s,u,c=t.length,d=c,f=0;for(e.__k=new Array(o),a=0;a<o;a++)null!=(i=n[a])&&"boolean"!=typeof i&&"function"!=typeof i?(s=a+f,(i=e.__k[a]="string"==typeof i||"number"==typeof i||"bigint"==typeof i||i.constructor==String?Bi(null,i,null,null,null):wi(i)?Bi(Si,{children:i},null,null,null):null==i.constructor&&i.__b>0?Bi(i.type,i.props,i.key,i.ref?i.ref:null,i.__v):i).__=e,i.__b=e.__b+1,l=null,-1!=(u=i.__i=Ii(i,t,s,d))&&(d--,(l=t[u])&&(l.__u|=2)),null==l||null==l.__v?(-1==u&&(o>c?f--:o<c&&f++),"function"!=typeof i.type&&(i.__u|=4)):u!=s&&(u==s-1?f--:u==s+1?f++:(u>s?f--:f++,i.__u|=4))):e.__k[a]=null;if(d)for(a=0;a<c;a++)null!=(l=t[a])&&!(2&l.__u)&&(l.__e==r&&(r=Ni(l)),Vi(l,l));return r}function Ri(e,n,t){var r,o;if("function"==typeof e.type){for(r=e.__k,o=0;r&&o<r.length;o++)r[o]&&(r[o].__=e,n=Ri(r[o],n,t));return n}e.__e!=n&&(n&&e.type&&!t.contains(n)&&(n=Ni(e)),t.insertBefore(e.__e,n||null),n=e.__e);do{n=n&&n.nextSibling}while(null!=n&&8==n.nodeType);return n}function Ii(e,n,t,r){var o,a,i,l=e.key,s=e.type,u=n[t],c=null!=u&&!(2&u.__u);if(null===u&&null==e.key||c&&l==u.key&&s==u.type)return t;if(r>(c?1:0))for(o=t-1,a=t+1;o>=0||a<n.length;)if(null!=(u=n[i=o>=0?o--:a++])&&!(2&u.__u)&&l==u.key&&s==u.type)return i;return-1}function Li(e,n,t){"-"==n[0]?e.setProperty(n,null==t?"":t):e[n]=null==t?"":"number"!=typeof t||Ci.test(n)?t:t+"px"}function Di(e,n,t,r,o){var a,i;e:if("style"==n)if("string"==typeof t)e.style.cssText=t;else{if("string"==typeof r&&(e.style.cssText=r=""),r)for(n in r)t&&n in t||Li(e.style,n,"");if(t)for(n in t)r&&t[n]==r[n]||Li(e.style,n,t[n])}else if("o"==n[0]&&"n"==n[1])a=n!=(n=n.replace(fi,"$1")),i=n.toLowerCase(),n=i in e||"onFocusOut"==n||"onFocusIn"==n?i.slice(2):n.slice(2),e.l||(e.l={}),e.l[n+a]=t,t?r?t.u=r.u:(t.u=hi,e.addEventListener(n,a?mi:pi,a)):e.removeEventListener(n,a?mi:pi,a);else{if("http://www.w3.org/2000/svg"==o)n=n.replace(/xlink(H|:h)/,"h").replace(/sName$/,"s");else if("width"!=n&&"height"!=n&&"href"!=n&&"list"!=n&&"form"!=n&&"tabIndex"!=n&&"download"!=n&&"rowSpan"!=n&&"colSpan"!=n&&"role"!=n&&"popover"!=n&&n in e)try{e[n]=null==t?"":t;break e}catch(e){}"function"==typeof t||(null==t||!1===t&&"-"!=n[4]?e.removeAttribute(n):e.setAttribute(n,"popover"==n&&1==t?"":t))}}function Fi(e){return function(n){if(this.l){var t=this.l[n.type+e];if(null==n.t)n.t=hi++;else if(n.t<t.u)return;return t(ai.event?ai.event(n):n)}}}function Ui(e,n,t,r,o,a,i,l,s,u){var c,d,f,h,p,m,g,A,y,v,b,x,E,C,w,_,k,B=n.type;if(null!=n.constructor)return null;128&t.__u&&(s=!!(32&t.__u),a=[l=n.__e=t.__e]),(c=ai.__b)&&c(n);e:if("function"==typeof B)try{if(A=n.props,y="prototype"in B&&B.prototype.render,v=(c=B.contextType)&&r[c.__c],b=c?v?v.props.value:c.__:r,t.__c?g=(d=n.__c=t.__c).__=d.__E:(y?n.__c=d=new B(A,b):(n.__c=d=new zi(A,b),d.constructor=B,d.render=Xi),v&&v.sub(d),d.props=A,d.state||(d.state={}),d.context=b,d.__n=r,f=d.__d=!0,d.__h=[],d._sb=[]),y&&null==d.__s&&(d.__s=d.state),y&&null!=B.getDerivedStateFromProps&&(d.__s==d.state&&(d.__s=_i({},d.__s)),_i(d.__s,B.getDerivedStateFromProps(A,d.__s))),h=d.props,p=d.state,d.__v=n,f)y&&null==B.getDerivedStateFromProps&&null!=d.componentWillMount&&d.componentWillMount(),y&&null!=d.componentDidMount&&d.__h.push(d.componentDidMount);else{if(y&&null==B.getDerivedStateFromProps&&A!==h&&null!=d.componentWillReceiveProps&&d.componentWillReceiveProps(A,b),!d.__e&&null!=d.shouldComponentUpdate&&!1===d.shouldComponentUpdate(A,d.__s,b)||n.__v==t.__v){for(n.__v!=t.__v&&(d.props=A,d.state=d.__s,d.__d=!1),n.__e=t.__e,n.__k=t.__k,n.__k.some(function(e){e&&(e.__=n)}),x=0;x<d._sb.length;x++)d.__h.push(d._sb[x]);d._sb=[],d.__h.length&&i.push(d);break e}null!=d.componentWillUpdate&&d.componentWillUpdate(A,d.__s,b),y&&null!=d.componentDidUpdate&&d.__h.push(function(){d.componentDidUpdate(h,p,m)})}if(d.context=b,d.props=A,d.__P=e,d.__e=!1,E=ai.__r,C=0,y){for(d.state=d.__s,d.__d=!1,E&&E(n),c=d.render(d.props,d.state,d.context),w=0;w<d._sb.length;w++)d.__h.push(d._sb[w]);d._sb=[]}else do{d.__d=!1,E&&E(n),c=d.render(d.props,d.state,d.context),d.state=d.__s}while(d.__d&&++C<25);d.state=d.__s,null!=d.getChildContext&&(r=_i(_i({},r),d.getChildContext())),y&&!f&&null!=d.getSnapshotBeforeUpdate&&(m=d.getSnapshotBeforeUpdate(h,p)),_=c,null!=c&&c.type===Si&&null==c.key&&(_=Hi(c.props.children)),l=Mi(e,wi(_)?_:[_],n,t,r,o,a,i,l,s,u),d.base=n.__e,n.__u&=-161,d.__h.length&&i.push(d),g&&(d.__E=d.__=null)}catch(e){if(n.__v=null,s||null!=a)if(e.then){for(n.__u|=s?160:128;l&&8==l.nodeType&&l.nextSibling;)l=l.nextSibling;a[a.indexOf(l)]=null,n.__e=l}else{for(k=a.length;k--;)ki(a[k]);$i(n)}else n.__e=t.__e,n.__k=t.__k,e.then||$i(n);ai.__e(e,n,t)}else null==a&&n.__v==t.__v?(n.__k=t.__k,n.__e=t.__e):l=n.__e=Wi(t.__e,n,t,r,o,a,i,s,u);return(c=ai.diffed)&&c(n),128&n.__u?void 0:l}function $i(e){e&&e.__c&&(e.__c.__e=!0),e&&e.__k&&e.__k.forEach($i)}function qi(e,n,t){for(var r=0;r<t.length;r++)Yi(t[r],t[++r],t[++r]);ai.__c&&ai.__c(n,e),e.some(function(n){try{e=n.__h,n.__h=[],e.some(function(e){e.call(n)})}catch(e){ai.__e(e,n.__v)}})}function Hi(e){return"object"!=typeof e||null==e||e.__b&&e.__b>0?e:wi(e)?e.map(Hi):_i({},e)}function Wi(e,n,t,r,o,a,i,l,s){var u,c,d,f,h,p,m,g=t.props,A=n.props,y=n.type;if("svg"==y?o="http://www.w3.org/2000/svg":"math"==y?o="http://www.w3.org/1998/Math/MathML":o||(o="http://www.w3.org/1999/xhtml"),null!=a)for(u=0;u<a.length;u++)if((h=a[u])&&"setAttribute"in h==!!y&&(y?h.localName==y:3==h.nodeType)){e=h,a[u]=null;break}if(null==e){if(null==y)return document.createTextNode(A);e=document.createElementNS(o,y,A.is&&A),l&&(ai.__m&&ai.__m(n,a),l=!1),a=null}if(null==y)g===A||l&&e.data==A||(e.data=A);else{if(a=a&&oi.call(e.childNodes),g=t.props||xi,!l&&null!=a)for(g={},u=0;u<e.attributes.length;u++)g[(h=e.attributes[u]).name]=h.value;for(u in g)if(h=g[u],"children"==u);else if("dangerouslySetInnerHTML"==u)d=h;else if(!(u in A)){if("value"==u&&"defaultValue"in A||"checked"==u&&"defaultChecked"in A)continue;Di(e,u,null,h,o)}for(u in A)h=A[u],"children"==u?f=h:"dangerouslySetInnerHTML"==u?c=h:"value"==u?p=h:"checked"==u?m=h:l&&"function"!=typeof h||g[u]===h||Di(e,u,h,g[u],o);if(c)l||d&&(c.__html==d.__html||c.__html==e.innerHTML)||(e.innerHTML=c.__html),n.__k=[];else if(d&&(e.innerHTML=""),Mi("template"==n.type?e.content:e,wi(f)?f:[f],n,t,r,"foreignObject"==y?"http://www.w3.org/1999/xhtml":o,a,i,a?a[0]:t.__k&&Ni(t,0),l,s),null!=a)for(u=a.length;u--;)ki(a[u]);l||(u="value","progress"==y&&null==p?e.removeAttribute("value"):null!=p&&(p!==e[u]||"progress"==y&&!p||"option"==y&&p!=g[u])&&Di(e,u,p,g[u],o),u="checked",null!=m&&m!=e[u]&&Di(e,u,m,g[u],o))}return e}function Yi(e,n,t){try{if("function"==typeof e){var r="function"==typeof e.__u;r&&e.__u(),r&&null==n||(e.__u=e(n))}else e.current=n}catch(e){ai.__e(e,t)}}function Vi(e,n,t){var r,o;if(ai.unmount&&ai.unmount(e),(r=e.ref)&&(r.current&&r.current!=e.__e||Yi(r,null,n)),null!=(r=e.__c)){if(r.componentWillUnmount)try{r.componentWillUnmount()}catch(e){ai.__e(e,n)}r.base=r.__P=null}if(r=e.__k)for(o=0;o<r.length;o++)r[o]&&Vi(r[o],n,t||"function"!=typeof e.type);t||ki(e.__e),e.__c=e.__=e.__e=void 0}function Xi(e,n,t){return this.constructor(e,t)}function Qi(e,n,t){var r,o,a,i,l=_i({},e.props);for(a in e.type&&e.type.defaultProps&&(i=e.type.defaultProps),n)"key"==a?r=n[a]:"ref"==a?o=n[a]:l[a]=void 0===n[a]&&null!=i?i[a]:n[a];return arguments.length>2&&(l.children=arguments.length>3?oi.call(arguments,2):t),Bi(e.type,l,r||e.key,o||e.ref,null)}function Gi(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=Array(n);t<n;t++)r[t]=e[t];return r}function Ki(e,n,t){return(n=function(e){var n=function(e,n){if("object"!=typeof e||!e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var r=t.call(e,n);if("object"!=typeof r)return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e,"string");return"symbol"==typeof n?n:n+""}(n))in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function Zi(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter(function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable})),t.push.apply(t,r)}return t}function Ji(e){return Ji="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Ji(e)}oi=Ei.slice,ai={__e:function(e,n,t,r){for(var o,a,i;n=n.__;)if((o=n.__c)&&!o.__)try{if((a=o.constructor)&&null!=a.getDerivedStateFromError&&(o.setState(a.getDerivedStateFromError(e)),i=o.__d),null!=o.componentDidCatch&&(o.componentDidCatch(e,r||{}),i=o.__d),i)return o.__E=o}catch(n){e=n}throw e}},ii=0,li=function(e){return null!=e&&null==e.constructor},zi.prototype.setState=function(e,n){var t;t=null!=this.__s&&this.__s!=this.state?this.__s:this.__s=_i({},this.state),"function"==typeof e&&(e=e(_i({},t),this.props)),e&&_i(t,e),null!=e&&this.__v&&(n&&this._sb.push(n),Pi(this))},zi.prototype.forceUpdate=function(e){this.__v&&(this.__e=!0,e&&this.__h.push(e),Pi(this))},zi.prototype.render=Si,si=[],ci="function"==typeof Promise?Promise.prototype.then.bind(Promise.resolve()):setTimeout,di=function(e,n){return e.__v.__b-n.__v.__b},Ti.__r=0,fi=/(PointerCapture)$|Capture$/i,hi=0,pi=Fi(!1),mi=Fi(!0);var el=function(e){if("object"!==Ji(e))return e;var n,t=Qi(e);return t.props&&(t.props=function(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?Zi(Object(t),!0).forEach(function(n){Ki(e,n,t[n])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):Zi(Object(t)).forEach(function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))})}return e}({},t.props),null!=t&&null!==(n=t.props)&&void 0!==n&&n.children&&(t.props.children=Array.isArray(t.props.children)?t.props.children.map(el):el(t.props.children))),t};!function(e,n){void 0===n&&(n={});var t=n.insertAt;if("undefined"!=typeof document){var r=document.head||document.getElementsByTagName("head")[0],o=document.createElement("style");o.type="text/css","top"===t&&r.firstChild?r.insertBefore(o,r.firstChild):r.appendChild(o),o.styleSheet?o.styleSheet.cssText=e:o.appendChild(document.createTextNode(e))}}(".float-tooltip-kap {\n  position: absolute;\n  width: max-content; /* prevent shrinking near right edge */\n  max-width: max(50%, 150px);\n  padding: 3px 5px;\n  border-radius: 3px;\n  font: 12px sans-serif;\n  color: #eee;\n  background: rgba(0,0,0,0.6);\n  pointer-events: none;\n}\n");var nl=ma({props:{content:{default:!1},offsetX:{triggerUpdate:!1},offsetY:{triggerUpdate:!1}},init:function(e,n){var t=(arguments.length>2&&void 0!==arguments[2]?arguments[2]:{}).style,r=void 0===t?{}:t,o=ot(e&&"object"===Ji(e)&&e.node&&"function"==typeof e.node?e.node():e);"static"===o.style("position")&&o.style("position","relative"),n.tooltipEl=o.append("div").attr("class","float-tooltip-kap"),Object.entries(r).forEach(function(e){var t=function(e,n){return function(e){if(Array.isArray(e))return e}(e)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var r,o,a,i,l=[],s=!0,u=!1;try{if(a=(t=t.call(e)).next,0===n);else for(;!(s=(r=a.call(t)).done)&&(l.push(r.value),l.length!==n);s=!0);}catch(e){u=!0,o=e}finally{try{if(!s&&null!=t.return&&(i=t.return(),Object(i)!==i))return}finally{if(u)throw o}}return l}}(e,n)||function(e,n){if(e){if("string"==typeof e)return Gi(e,n);var t={}.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?Gi(e,n):void 0}}(e,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}(e,2),r=t[0],o=t[1];return n.tooltipEl.style(r,o)}),n.tooltipEl.style("left","-10000px").style("display","none");var a="tooltip-".concat(Math.round(1e12*Math.random()));n.mouseInside=!1,o.on("mousemove.".concat(a),function(e){n.mouseInside=!0;var t=vt(e),r=o.node(),a=r.offsetWidth,i=r.offsetHeight,l=[null===n.offsetX||void 0===n.offsetX?"-".concat(t[0]/a*100,"%"):"number"==typeof n.offsetX?"calc(-50% + ".concat(n.offsetX,"px)"):n.offsetX,null===n.offsetY||void 0===n.offsetY?i>130&&i-t[1]<100?"calc(-100% - 6px)":"21px":"number"==typeof n.offsetY?n.offsetY<0?"calc(-100% - ".concat(Math.abs(n.offsetY),"px)"):"".concat(n.offsetY,"px"):n.offsetY];n.tooltipEl.style("left",t[0]+"px").style("top",t[1]+"px").style("transform","translate(".concat(l.join(","),")")),n.content&&n.tooltipEl.style("display","inline")}),o.on("mouseover.".concat(a),function(){n.mouseInside=!0,n.content&&n.tooltipEl.style("display","inline")}),o.on("mouseout.".concat(a),function(){n.mouseInside=!1,n.tooltipEl.style("display","none")})},update:function(e){var n,t;e.tooltipEl.style("display",e.content&&e.mouseInside?"inline":"none"),e.content?e.content instanceof HTMLElement?(e.tooltipEl.text(""),e.tooltipEl.append(function(){return e.content})):"string"==typeof e.content?e.tooltipEl.html(e.content):function(e){return li(Qi(e))}(e.content)?(e.tooltipEl.text(""),n=e.content,delete(t=e.tooltipEl.node()).__k,function(e,n,t){var r,o,a,i;n==document&&(n=document.documentElement),ai.__&&ai.__(e,n),o=(r="function"==typeof t)?null:t&&t.__k||n.__k,a=[],i=[],Ui(n,e=(!r&&t||n).__k=function(e,n,t){var r,o,a,i={};for(a in n)"key"==a?r=n[a]:"ref"==a?o=n[a]:i[a]=n[a];if(arguments.length>2&&(i.children=arguments.length>3?oi.call(arguments,2):t),"function"==typeof e&&null!=e.defaultProps)for(a in e.defaultProps)void 0===i[a]&&(i[a]=e.defaultProps[a]);return Bi(e,i,r,o,null)}(Si,null,[e]),o||xi,xi,n.namespaceURI,!r&&t?[t]:o?null:n.firstChild?oi.call(n.childNodes):null,a,!r&&t?t:o?o.__e:n.firstChild,r,i),qi(a,e,i)}(el(n),t)):(e.tooltipEl.style("display","none"),console.warn("Tooltip content is invalid, skipping.",e.content,e.content.toString())):e.tooltipEl.text("")}});const tl=4294967296;function rl(e){return e.x}function ol(e){return e.y}function al(e){return e.z}var il=Math.PI*(3-Math.sqrt(5)),ll=20*Math.PI/(9+Math.sqrt(221));function sl(e,n){n=n||2;var t,r=Math.min(3,Math.max(1,Math.round(n))),o=1,a=.001,i=1-Math.pow(a,1/300),l=0,s=.6,u=new Map,c=Tt(h),d=ct("tick","end"),f=function(){let e=1;return()=>(e=(1664525*e+1013904223)%tl)/tl}();function h(){p(),d.call("tick",t),o<a&&(c.stop(),d.call("end",t))}function p(n){var a,c,d=e.length;void 0===n&&(n=1);for(var f=0;f<n;++f)for(o+=(l-o)*i,u.forEach(function(e){e(o)}),a=0;a<d;++a)null==(c=e[a]).fx?c.x+=c.vx*=s:(c.x=c.fx,c.vx=0),r>1&&(null==c.fy?c.y+=c.vy*=s:(c.y=c.fy,c.vy=0)),r>2&&(null==c.fz?c.z+=c.vz*=s:(c.z=c.fz,c.vz=0));return t}function m(){for(var n,t=0,o=e.length;t<o;++t){if((n=e[t]).index=t,null!=n.fx&&(n.x=n.fx),null!=n.fy&&(n.y=n.fy),null!=n.fz&&(n.z=n.fz),isNaN(n.x)||r>1&&isNaN(n.y)||r>2&&isNaN(n.z)){var a=10*(r>2?Math.cbrt(.5+t):r>1?Math.sqrt(.5+t):t),i=t*il,l=t*ll;1===r?n.x=a:2===r?(n.x=a*Math.cos(i),n.y=a*Math.sin(i)):(n.x=a*Math.sin(i)*Math.cos(l),n.y=a*Math.cos(i),n.z=a*Math.sin(i)*Math.sin(l))}(isNaN(n.vx)||r>1&&isNaN(n.vy)||r>2&&isNaN(n.vz))&&(n.vx=0,r>1&&(n.vy=0),r>2&&(n.vz=0))}}function g(n){return n.initialize&&n.initialize(e,f,r),n}return null==e&&(e=[]),m(),t={tick:p,restart:function(){return c.restart(h),t},stop:function(){return c.stop(),t},numDimensions:function(e){return arguments.length?(r=Math.min(3,Math.max(1,Math.round(e))),u.forEach(g),t):r},nodes:function(n){return arguments.length?(e=n,m(),u.forEach(g),t):e},alpha:function(e){return arguments.length?(o=+e,t):o},alphaMin:function(e){return arguments.length?(a=+e,t):a},alphaDecay:function(e){return arguments.length?(i=+e,t):+i},alphaTarget:function(e){return arguments.length?(l=+e,t):l},velocityDecay:function(e){return arguments.length?(s=1-e,t):1-s},randomSource:function(e){return arguments.length?(f=e,u.forEach(g),t):f},force:function(e,n){return arguments.length>1?(null==n?u.delete(e):u.set(e,g(n)),t):u.get(e)},find:function(){var n,t,o,a,i,l,s=Array.prototype.slice.call(arguments),u=s.shift()||0,c=(r>1?s.shift():null)||0,d=(r>2?s.shift():null)||0,f=s.shift()||1/0,h=0,p=e.length;for(f*=f,h=0;h<p;++h)(a=(n=u-(i=e[h]).x)*n+(t=c-(i.y||0))*t+(o=d-(i.z||0))*o)<f&&(l=i,f=a);return l},on:function(e,n){return arguments.length>1?(d.on(e,n),t):d.on(e)}}}function ul(e){return function(){return e}}function cl(e){return 1e-6*(e()-.5)}function dl(e){return e.index}function fl(e,n){var t=e.get(n);if(!t)throw new Error("node not found: "+n);return t}function hl(e){var n,t,r,o,a,i,l,s=dl,u=function(e){return 1/Math.min(a[e.source.index],a[e.target.index])},c=ul(30),d=1;function f(r){for(var a=0,s=e.length;a<d;++a)for(var u,c,f,h,p,m=0,g=0,A=0,y=0;m<s;++m)c=(u=e[m]).source,g=(f=u.target).x+f.vx-c.x-c.vx||cl(l),o>1&&(A=f.y+f.vy-c.y-c.vy||cl(l)),o>2&&(y=f.z+f.vz-c.z-c.vz||cl(l)),g*=h=((h=Math.sqrt(g*g+A*A+y*y))-t[m])/h*r*n[m],A*=h,y*=h,f.vx-=g*(p=i[m]),o>1&&(f.vy-=A*p),o>2&&(f.vz-=y*p),c.vx+=g*(p=1-p),o>1&&(c.vy+=A*p),o>2&&(c.vz+=y*p)}function h(){if(r){var o,l,u=r.length,c=e.length,d=new Map(r.map((e,n)=>[s(e,n,r),e]));for(o=0,a=new Array(u);o<c;++o)(l=e[o]).index=o,"object"!=typeof l.source&&(l.source=fl(d,l.source)),"object"!=typeof l.target&&(l.target=fl(d,l.target)),a[l.source.index]=(a[l.source.index]||0)+1,a[l.target.index]=(a[l.target.index]||0)+1;for(o=0,i=new Array(c);o<c;++o)l=e[o],i[o]=a[l.source.index]/(a[l.source.index]+a[l.target.index]);n=new Array(c),p(),t=new Array(c),m()}}function p(){if(r)for(var t=0,o=e.length;t<o;++t)n[t]=+u(e[t],t,e)}function m(){if(r)for(var n=0,o=e.length;n<o;++n)t[n]=+c(e[n],n,e)}return null==e&&(e=[]),f.initialize=function(e,...n){r=e,l=n.find(e=>"function"==typeof e)||Math.random,o=n.find(e=>[1,2,3].includes(e))||2,h()},f.links=function(n){return arguments.length?(e=n,h(),f):e},f.id=function(e){return arguments.length?(s=e,f):s},f.iterations=function(e){return arguments.length?(d=+e,f):d},f.strength=function(e){return arguments.length?(u="function"==typeof e?e:ul(+e),p(),f):u},f.distance=function(e){return arguments.length?(c="function"==typeof e?e:ul(+e),m(),f):c},f}function pl(e,n,t){if(isNaN(n))return e;var r,o,a,i,l,s,u=e._root,c={data:t},d=e._x0,f=e._x1;if(!u)return e._root=c,e;for(;u.length;)if((i=n>=(o=(d+f)/2))?d=o:f=o,r=u,!(u=u[l=+i]))return r[l]=c,e;if(n===(a=+e._x.call(null,u.data)))return c.next=u,r?r[l]=c:e._root=c,e;do{r=r?r[l]=new Array(2):e._root=new Array(2),(i=n>=(o=(d+f)/2))?d=o:f=o}while((l=+i)===(s=+(a>=o)));return r[s]=u,r[l]=c,e}function ml(e,n,t){this.node=e,this.x0=n,this.x1=t}function gl(e){return e[0]}function Al(e,n){var t=new yl(null==n?gl:n,NaN,NaN);return null==e?t:t.addAll(e)}function yl(e,n,t){this._x=e,this._x0=n,this._x1=t,this._root=void 0}function vl(e){for(var n={data:e.data},t=n;e=e.next;)t=t.next={data:e.data};return n}var bl=Al.prototype=yl.prototype;function xl(e,n,t,r){if(isNaN(n)||isNaN(t))return e;var o,a,i,l,s,u,c,d,f,h=e._root,p={data:r},m=e._x0,g=e._y0,A=e._x1,y=e._y1;if(!h)return e._root=p,e;for(;h.length;)if((u=n>=(a=(m+A)/2))?m=a:A=a,(c=t>=(i=(g+y)/2))?g=i:y=i,o=h,!(h=h[d=c<<1|u]))return o[d]=p,e;if(l=+e._x.call(null,h.data),s=+e._y.call(null,h.data),n===l&&t===s)return p.next=h,o?o[d]=p:e._root=p,e;do{o=o?o[d]=new Array(4):e._root=new Array(4),(u=n>=(a=(m+A)/2))?m=a:A=a,(c=t>=(i=(g+y)/2))?g=i:y=i}while((d=c<<1|u)==(f=(s>=i)<<1|l>=a));return o[f]=h,o[d]=p,e}function El(e,n,t,r,o){this.node=e,this.x0=n,this.y0=t,this.x1=r,this.y1=o}function Cl(e){return e[0]}function wl(e){return e[1]}function _l(e,n,t){var r=new kl(null==n?Cl:n,null==t?wl:t,NaN,NaN,NaN,NaN);return null==e?r:r.addAll(e)}function kl(e,n,t,r,o,a){this._x=e,this._y=n,this._x0=t,this._y0=r,this._x1=o,this._y1=a,this._root=void 0}function Bl(e){for(var n={data:e.data},t=n;e=e.next;)t=t.next={data:e.data};return n}bl.copy=function(){var e,n,t=new yl(this._x,this._x0,this._x1),r=this._root;if(!r)return t;if(!r.length)return t._root=vl(r),t;for(e=[{source:r,target:t._root=new Array(2)}];r=e.pop();)for(var o=0;o<2;++o)(n=r.source[o])&&(n.length?e.push({source:n,target:r.target[o]=new Array(2)}):r.target[o]=vl(n));return t},bl.add=function(e){const n=+this._x.call(null,e);return pl(this.cover(n),n,e)},bl.addAll=function(e){Array.isArray(e)||(e=Array.from(e));const n=e.length,t=new Float64Array(n);let r=1/0,o=-1/0;for(let a,i=0;i<n;++i)isNaN(a=+this._x.call(null,e[i]))||(t[i]=a,a<r&&(r=a),a>o&&(o=a));if(r>o)return this;this.cover(r).cover(o);for(let r=0;r<n;++r)pl(this,t[r],e[r]);return this},bl.cover=function(e){if(isNaN(e=+e))return this;var n=this._x0,t=this._x1;if(isNaN(n))t=(n=Math.floor(e))+1;else{for(var r,o,a=t-n||1,i=this._root;n>e||e>=t;)switch(o=+(e<n),(r=new Array(2))[o]=i,i=r,a*=2,o){case 0:t=n+a;break;case 1:n=t-a}this._root&&this._root.length&&(this._root=i)}return this._x0=n,this._x1=t,this},bl.data=function(){var e=[];return this.visit(function(n){if(!n.length)do{e.push(n.data)}while(n=n.next)}),e},bl.extent=function(e){return arguments.length?this.cover(+e[0][0]).cover(+e[1][0]):isNaN(this._x0)?void 0:[[this._x0],[this._x1]]},bl.find=function(e,n){var t,r,o,a,i,l=this._x0,s=this._x1,u=[],c=this._root;for(c&&u.push(new ml(c,l,s)),null==n?n=1/0:(l=e-n,s=e+n);a=u.pop();)if(!(!(c=a.node)||(r=a.x0)>s||(o=a.x1)<l))if(c.length){var d=(r+o)/2;u.push(new ml(c[1],d,o),new ml(c[0],r,d)),(i=+(e>=d))&&(a=u[u.length-1],u[u.length-1]=u[u.length-1-i],u[u.length-1-i]=a)}else{var f=Math.abs(e-+this._x.call(null,c.data));f<n&&(n=f,l=e-f,s=e+f,t=c.data)}return t},bl.remove=function(e){if(isNaN(a=+this._x.call(null,e)))return this;var n,t,r,o,a,i,l,s,u,c=this._root,d=this._x0,f=this._x1;if(!c)return this;if(c.length)for(;;){if((l=a>=(i=(d+f)/2))?d=i:f=i,n=c,!(c=c[s=+l]))return this;if(!c.length)break;n[s+1&1]&&(t=n,u=s)}for(;c.data!==e;)if(r=c,!(c=c.next))return this;return(o=c.next)&&delete c.next,r?(o?r.next=o:delete r.next,this):n?(o?n[s]=o:delete n[s],(c=n[0]||n[1])&&c===(n[1]||n[0])&&!c.length&&(t?t[u]=c:this._root=c),this):(this._root=o,this)},bl.removeAll=function(e){for(var n=0,t=e.length;n<t;++n)this.remove(e[n]);return this},bl.root=function(){return this._root},bl.size=function(){var e=0;return this.visit(function(n){if(!n.length)do{++e}while(n=n.next)}),e},bl.visit=function(e){var n,t,r,o,a=[],i=this._root;for(i&&a.push(new ml(i,this._x0,this._x1));n=a.pop();)if(!e(i=n.node,r=n.x0,o=n.x1)&&i.length){var l=(r+o)/2;(t=i[1])&&a.push(new ml(t,l,o)),(t=i[0])&&a.push(new ml(t,r,l))}return this},bl.visitAfter=function(e){var n,t=[],r=[];for(this._root&&t.push(new ml(this._root,this._x0,this._x1));n=t.pop();){var o=n.node;if(o.length){var a,i=n.x0,l=n.x1,s=(i+l)/2;(a=o[0])&&t.push(new ml(a,i,s)),(a=o[1])&&t.push(new ml(a,s,l))}r.push(n)}for(;n=r.pop();)e(n.node,n.x0,n.x1);return this},bl.x=function(e){return arguments.length?(this._x=e,this):this._x};var Sl=_l.prototype=kl.prototype;function zl(e,n,t,r,o){if(isNaN(n)||isNaN(t)||isNaN(r))return e;var a,i,l,s,u,c,d,f,h,p,m,g,A=e._root,y={data:o},v=e._x0,b=e._y0,x=e._z0,E=e._x1,C=e._y1,w=e._z1;if(!A)return e._root=y,e;for(;A.length;)if((f=n>=(i=(v+E)/2))?v=i:E=i,(h=t>=(l=(b+C)/2))?b=l:C=l,(p=r>=(s=(x+w)/2))?x=s:w=s,a=A,!(A=A[m=p<<2|h<<1|f]))return a[m]=y,e;if(u=+e._x.call(null,A.data),c=+e._y.call(null,A.data),d=+e._z.call(null,A.data),n===u&&t===c&&r===d)return y.next=A,a?a[m]=y:e._root=y,e;do{a=a?a[m]=new Array(8):e._root=new Array(8),(f=n>=(i=(v+E)/2))?v=i:E=i,(h=t>=(l=(b+C)/2))?b=l:C=l,(p=r>=(s=(x+w)/2))?x=s:w=s}while((m=p<<2|h<<1|f)==(g=(d>=s)<<2|(c>=l)<<1|u>=i));return a[g]=A,a[m]=y,e}function Nl(e,n,t,r,o,a,i){this.node=e,this.x0=n,this.y0=t,this.z0=r,this.x1=o,this.y1=a,this.z1=i}Sl.copy=function(){var e,n,t=new kl(this._x,this._y,this._x0,this._y0,this._x1,this._y1),r=this._root;if(!r)return t;if(!r.length)return t._root=Bl(r),t;for(e=[{source:r,target:t._root=new Array(4)}];r=e.pop();)for(var o=0;o<4;++o)(n=r.source[o])&&(n.length?e.push({source:n,target:r.target[o]=new Array(4)}):r.target[o]=Bl(n));return t},Sl.add=function(e){const n=+this._x.call(null,e),t=+this._y.call(null,e);return xl(this.cover(n,t),n,t,e)},Sl.addAll=function(e){var n,t,r,o,a=e.length,i=new Array(a),l=new Array(a),s=1/0,u=1/0,c=-1/0,d=-1/0;for(t=0;t<a;++t)isNaN(r=+this._x.call(null,n=e[t]))||isNaN(o=+this._y.call(null,n))||(i[t]=r,l[t]=o,r<s&&(s=r),r>c&&(c=r),o<u&&(u=o),o>d&&(d=o));if(s>c||u>d)return this;for(this.cover(s,u).cover(c,d),t=0;t<a;++t)xl(this,i[t],l[t],e[t]);return this},Sl.cover=function(e,n){if(isNaN(e=+e)||isNaN(n=+n))return this;var t=this._x0,r=this._y0,o=this._x1,a=this._y1;if(isNaN(t))o=(t=Math.floor(e))+1,a=(r=Math.floor(n))+1;else{for(var i,l,s=o-t||1,u=this._root;t>e||e>=o||r>n||n>=a;)switch(l=(n<r)<<1|e<t,(i=new Array(4))[l]=u,u=i,s*=2,l){case 0:o=t+s,a=r+s;break;case 1:t=o-s,a=r+s;break;case 2:o=t+s,r=a-s;break;case 3:t=o-s,r=a-s}this._root&&this._root.length&&(this._root=u)}return this._x0=t,this._y0=r,this._x1=o,this._y1=a,this},Sl.data=function(){var e=[];return this.visit(function(n){if(!n.length)do{e.push(n.data)}while(n=n.next)}),e},Sl.extent=function(e){return arguments.length?this.cover(+e[0][0],+e[0][1]).cover(+e[1][0],+e[1][1]):isNaN(this._x0)?void 0:[[this._x0,this._y0],[this._x1,this._y1]]},Sl.find=function(e,n,t){var r,o,a,i,l,s,u,c=this._x0,d=this._y0,f=this._x1,h=this._y1,p=[],m=this._root;for(m&&p.push(new El(m,c,d,f,h)),null==t?t=1/0:(c=e-t,d=n-t,f=e+t,h=n+t,t*=t);s=p.pop();)if(!(!(m=s.node)||(o=s.x0)>f||(a=s.y0)>h||(i=s.x1)<c||(l=s.y1)<d))if(m.length){var g=(o+i)/2,A=(a+l)/2;p.push(new El(m[3],g,A,i,l),new El(m[2],o,A,g,l),new El(m[1],g,a,i,A),new El(m[0],o,a,g,A)),(u=(n>=A)<<1|e>=g)&&(s=p[p.length-1],p[p.length-1]=p[p.length-1-u],p[p.length-1-u]=s)}else{var y=e-+this._x.call(null,m.data),v=n-+this._y.call(null,m.data),b=y*y+v*v;if(b<t){var x=Math.sqrt(t=b);c=e-x,d=n-x,f=e+x,h=n+x,r=m.data}}return r},Sl.remove=function(e){if(isNaN(a=+this._x.call(null,e))||isNaN(i=+this._y.call(null,e)))return this;var n,t,r,o,a,i,l,s,u,c,d,f,h=this._root,p=this._x0,m=this._y0,g=this._x1,A=this._y1;if(!h)return this;if(h.length)for(;;){if((u=a>=(l=(p+g)/2))?p=l:g=l,(c=i>=(s=(m+A)/2))?m=s:A=s,n=h,!(h=h[d=c<<1|u]))return this;if(!h.length)break;(n[d+1&3]||n[d+2&3]||n[d+3&3])&&(t=n,f=d)}for(;h.data!==e;)if(r=h,!(h=h.next))return this;return(o=h.next)&&delete h.next,r?(o?r.next=o:delete r.next,this):n?(o?n[d]=o:delete n[d],(h=n[0]||n[1]||n[2]||n[3])&&h===(n[3]||n[2]||n[1]||n[0])&&!h.length&&(t?t[f]=h:this._root=h),this):(this._root=o,this)},Sl.removeAll=function(e){for(var n=0,t=e.length;n<t;++n)this.remove(e[n]);return this},Sl.root=function(){return this._root},Sl.size=function(){var e=0;return this.visit(function(n){if(!n.length)do{++e}while(n=n.next)}),e},Sl.visit=function(e){var n,t,r,o,a,i,l=[],s=this._root;for(s&&l.push(new El(s,this._x0,this._y0,this._x1,this._y1));n=l.pop();)if(!e(s=n.node,r=n.x0,o=n.y0,a=n.x1,i=n.y1)&&s.length){var u=(r+a)/2,c=(o+i)/2;(t=s[3])&&l.push(new El(t,u,c,a,i)),(t=s[2])&&l.push(new El(t,r,c,u,i)),(t=s[1])&&l.push(new El(t,u,o,a,c)),(t=s[0])&&l.push(new El(t,r,o,u,c))}return this},Sl.visitAfter=function(e){var n,t=[],r=[];for(this._root&&t.push(new El(this._root,this._x0,this._y0,this._x1,this._y1));n=t.pop();){var o=n.node;if(o.length){var a,i=n.x0,l=n.y0,s=n.x1,u=n.y1,c=(i+s)/2,d=(l+u)/2;(a=o[0])&&t.push(new El(a,i,l,c,d)),(a=o[1])&&t.push(new El(a,c,l,s,d)),(a=o[2])&&t.push(new El(a,i,d,c,u)),(a=o[3])&&t.push(new El(a,c,d,s,u))}r.push(n)}for(;n=r.pop();)e(n.node,n.x0,n.y0,n.x1,n.y1);return this},Sl.x=function(e){return arguments.length?(this._x=e,this):this._x},Sl.y=function(e){return arguments.length?(this._y=e,this):this._y};const jl=(e,n,t,r,o,a)=>Math.sqrt((e-r)**2+(n-o)**2+(t-a)**2);function Pl(e){return e[0]}function Tl(e){return e[1]}function Ml(e){return e[2]}function Ol(e,n,t,r){var o=new Rl(null==n?Pl:n,null==t?Tl:t,null==r?Ml:r,NaN,NaN,NaN,NaN,NaN,NaN);return null==e?o:o.addAll(e)}function Rl(e,n,t,r,o,a,i,l,s){this._x=e,this._y=n,this._z=t,this._x0=r,this._y0=o,this._z0=a,this._x1=i,this._y1=l,this._z1=s,this._root=void 0}function Il(e){for(var n={data:e.data},t=n;e=e.next;)t=t.next={data:e.data};return n}var Ll=Ol.prototype=Rl.prototype;function Dl(){var e,n,t,r,o,a,i=ul(-30),l=1,s=1/0,u=.81;function c(r){var a,i=e.length,l=(1===n?Al(e,rl):2===n?_l(e,rl,ol):3===n?Ol(e,rl,ol,al):null).visitAfter(f);for(o=r,a=0;a<i;++a)t=e[a],l.visit(h)}function d(){if(e){var n,t,r=e.length;for(a=new Array(r),n=0;n<r;++n)t=e[n],a[t.index]=+i(t,n,e)}}function f(e){var t,r,o,i,l,s,u=0,c=0,d=e.length;if(d){for(o=i=l=s=0;s<d;++s)(t=e[s])&&(r=Math.abs(t.value))&&(u+=t.value,c+=r,o+=r*(t.x||0),i+=r*(t.y||0),l+=r*(t.z||0));u*=Math.sqrt(4/d),e.x=o/c,n>1&&(e.y=i/c),n>2&&(e.z=l/c)}else{(t=e).x=t.data.x,n>1&&(t.y=t.data.y),n>2&&(t.z=t.data.z);do{u+=a[t.data.index]}while(t=t.next)}e.value=u}function h(e,i,c,d,f){if(!e.value)return!0;var h=[c,d,f][n-1],p=e.x-t.x,m=n>1?e.y-t.y:0,g=n>2?e.z-t.z:0,A=h-i,y=p*p+m*m+g*g;if(A*A/u<y)return y<s&&(0===p&&(y+=(p=cl(r))*p),n>1&&0===m&&(y+=(m=cl(r))*m),n>2&&0===g&&(y+=(g=cl(r))*g),y<l&&(y=Math.sqrt(l*y)),t.vx+=p*e.value*o/y,n>1&&(t.vy+=m*e.value*o/y),n>2&&(t.vz+=g*e.value*o/y)),!0;if(!(e.length||y>=s)){(e.data!==t||e.next)&&(0===p&&(y+=(p=cl(r))*p),n>1&&0===m&&(y+=(m=cl(r))*m),n>2&&0===g&&(y+=(g=cl(r))*g),y<l&&(y=Math.sqrt(l*y)));do{e.data!==t&&(A=a[e.data.index]*o/y,t.vx+=p*A,n>1&&(t.vy+=m*A),n>2&&(t.vz+=g*A))}while(e=e.next)}}return c.initialize=function(t,...o){e=t,r=o.find(e=>"function"==typeof e)||Math.random,n=o.find(e=>[1,2,3].includes(e))||2,d()},c.strength=function(e){return arguments.length?(i="function"==typeof e?e:ul(+e),d(),c):i},c.distanceMin=function(e){return arguments.length?(l=e*e,c):Math.sqrt(l)},c.distanceMax=function(e){return arguments.length?(s=e*e,c):Math.sqrt(s)},c.theta=function(e){return arguments.length?(u=e*e,c):Math.sqrt(u)},c}function Fl(e,n,t){var r,o=1;function a(){var a,i,l=r.length,s=0,u=0,c=0;for(a=0;a<l;++a)s+=(i=r[a]).x||0,u+=i.y||0,c+=i.z||0;for(s=(s/l-e)*o,u=(u/l-n)*o,c=(c/l-t)*o,a=0;a<l;++a)i=r[a],s&&(i.x-=s),u&&(i.y-=u),c&&(i.z-=c)}return null==e&&(e=0),null==n&&(n=0),null==t&&(t=0),a.initialize=function(e){r=e},a.x=function(n){return arguments.length?(e=+n,a):e},a.y=function(e){return arguments.length?(n=+e,a):n},a.z=function(e){return arguments.length?(t=+e,a):t},a.strength=function(e){return arguments.length?(o=+e,a):o},a}Ll.copy=function(){var e,n,t=new Rl(this._x,this._y,this._z,this._x0,this._y0,this._z0,this._x1,this._y1,this._z1),r=this._root;if(!r)return t;if(!r.length)return t._root=Il(r),t;for(e=[{source:r,target:t._root=new Array(8)}];r=e.pop();)for(var o=0;o<8;++o)(n=r.source[o])&&(n.length?e.push({source:n,target:r.target[o]=new Array(8)}):r.target[o]=Il(n));return t},Ll.add=function(e){const n=+this._x.call(null,e),t=+this._y.call(null,e),r=+this._z.call(null,e);return zl(this.cover(n,t,r),n,t,r,e)},Ll.addAll=function(e){Array.isArray(e)||(e=Array.from(e));const n=e.length,t=new Float64Array(n),r=new Float64Array(n),o=new Float64Array(n);let a=1/0,i=1/0,l=1/0,s=-1/0,u=-1/0,c=-1/0;for(let d,f,h,p,m=0;m<n;++m)isNaN(f=+this._x.call(null,d=e[m]))||isNaN(h=+this._y.call(null,d))||isNaN(p=+this._z.call(null,d))||(t[m]=f,r[m]=h,o[m]=p,f<a&&(a=f),f>s&&(s=f),h<i&&(i=h),h>u&&(u=h),p<l&&(l=p),p>c&&(c=p));if(a>s||i>u||l>c)return this;this.cover(a,i,l).cover(s,u,c);for(let a=0;a<n;++a)zl(this,t[a],r[a],o[a],e[a]);return this},Ll.cover=function(e,n,t){if(isNaN(e=+e)||isNaN(n=+n)||isNaN(t=+t))return this;var r=this._x0,o=this._y0,a=this._z0,i=this._x1,l=this._y1,s=this._z1;if(isNaN(r))i=(r=Math.floor(e))+1,l=(o=Math.floor(n))+1,s=(a=Math.floor(t))+1;else{for(var u,c,d=i-r||1,f=this._root;r>e||e>=i||o>n||n>=l||a>t||t>=s;)switch(c=(t<a)<<2|(n<o)<<1|e<r,(u=new Array(8))[c]=f,f=u,d*=2,c){case 0:i=r+d,l=o+d,s=a+d;break;case 1:r=i-d,l=o+d,s=a+d;break;case 2:i=r+d,o=l-d,s=a+d;break;case 3:r=i-d,o=l-d,s=a+d;break;case 4:i=r+d,l=o+d,a=s-d;break;case 5:r=i-d,l=o+d,a=s-d;break;case 6:i=r+d,o=l-d,a=s-d;break;case 7:r=i-d,o=l-d,a=s-d}this._root&&this._root.length&&(this._root=f)}return this._x0=r,this._y0=o,this._z0=a,this._x1=i,this._y1=l,this._z1=s,this},Ll.data=function(){var e=[];return this.visit(function(n){if(!n.length)do{e.push(n.data)}while(n=n.next)}),e},Ll.extent=function(e){return arguments.length?this.cover(+e[0][0],+e[0][1],+e[0][2]).cover(+e[1][0],+e[1][1],+e[1][2]):isNaN(this._x0)?void 0:[[this._x0,this._y0,this._z0],[this._x1,this._y1,this._z1]]},Ll.find=function(e,n,t,r){var o,a,i,l,s,u,c,d,f,h=this._x0,p=this._y0,m=this._z0,g=this._x1,A=this._y1,y=this._z1,v=[],b=this._root;for(b&&v.push(new Nl(b,h,p,m,g,A,y)),null==r?r=1/0:(h=e-r,p=n-r,m=t-r,g=e+r,A=n+r,y=t+r,r*=r);d=v.pop();)if(!(!(b=d.node)||(a=d.x0)>g||(i=d.y0)>A||(l=d.z0)>y||(s=d.x1)<h||(u=d.y1)<p||(c=d.z1)<m))if(b.length){var x=(a+s)/2,E=(i+u)/2,C=(l+c)/2;v.push(new Nl(b[7],x,E,C,s,u,c),new Nl(b[6],a,E,C,x,u,c),new Nl(b[5],x,i,C,s,E,c),new Nl(b[4],a,i,C,x,E,c),new Nl(b[3],x,E,l,s,u,C),new Nl(b[2],a,E,l,x,u,C),new Nl(b[1],x,i,l,s,E,C),new Nl(b[0],a,i,l,x,E,C)),(f=(t>=C)<<2|(n>=E)<<1|e>=x)&&(d=v[v.length-1],v[v.length-1]=v[v.length-1-f],v[v.length-1-f]=d)}else{var w=e-+this._x.call(null,b.data),_=n-+this._y.call(null,b.data),k=t-+this._z.call(null,b.data),B=w*w+_*_+k*k;if(B<r){var S=Math.sqrt(r=B);h=e-S,p=n-S,m=t-S,g=e+S,A=n+S,y=t+S,o=b.data}}return o},Ll.findAllWithinRadius=function(e,n,t,r){const o=[],a=e-r,i=n-r,l=t-r,s=e+r,u=n+r,c=t+r;return this.visit((d,f,h,p,m,g,A)=>{if(!d.length)do{const a=d.data;jl(e,n,t,this._x(a),this._y(a),this._z(a))<=r&&o.push(a)}while(d=d.next);return f>s||h>u||p>c||m<a||g<i||A<l}),o},Ll.remove=function(e){if(isNaN(a=+this._x.call(null,e))||isNaN(i=+this._y.call(null,e))||isNaN(l=+this._z.call(null,e)))return this;var n,t,r,o,a,i,l,s,u,c,d,f,h,p,m,g=this._root,A=this._x0,y=this._y0,v=this._z0,b=this._x1,x=this._y1,E=this._z1;if(!g)return this;if(g.length)for(;;){if((d=a>=(s=(A+b)/2))?A=s:b=s,(f=i>=(u=(y+x)/2))?y=u:x=u,(h=l>=(c=(v+E)/2))?v=c:E=c,n=g,!(g=g[p=h<<2|f<<1|d]))return this;if(!g.length)break;(n[p+1&7]||n[p+2&7]||n[p+3&7]||n[p+4&7]||n[p+5&7]||n[p+6&7]||n[p+7&7])&&(t=n,m=p)}for(;g.data!==e;)if(r=g,!(g=g.next))return this;return(o=g.next)&&delete g.next,r?(o?r.next=o:delete r.next,this):n?(o?n[p]=o:delete n[p],(g=n[0]||n[1]||n[2]||n[3]||n[4]||n[5]||n[6]||n[7])&&g===(n[7]||n[6]||n[5]||n[4]||n[3]||n[2]||n[1]||n[0])&&!g.length&&(t?t[m]=g:this._root=g),this):(this._root=o,this)},Ll.removeAll=function(e){for(var n=0,t=e.length;n<t;++n)this.remove(e[n]);return this},Ll.root=function(){return this._root},Ll.size=function(){var e=0;return this.visit(function(n){if(!n.length)do{++e}while(n=n.next)}),e},Ll.visit=function(e){var n,t,r,o,a,i,l,s,u=[],c=this._root;for(c&&u.push(new Nl(c,this._x0,this._y0,this._z0,this._x1,this._y1,this._z1));n=u.pop();)if(!e(c=n.node,r=n.x0,o=n.y0,a=n.z0,i=n.x1,l=n.y1,s=n.z1)&&c.length){var d=(r+i)/2,f=(o+l)/2,h=(a+s)/2;(t=c[7])&&u.push(new Nl(t,d,f,h,i,l,s)),(t=c[6])&&u.push(new Nl(t,r,f,h,d,l,s)),(t=c[5])&&u.push(new Nl(t,d,o,h,i,f,s)),(t=c[4])&&u.push(new Nl(t,r,o,h,d,f,s)),(t=c[3])&&u.push(new Nl(t,d,f,a,i,l,h)),(t=c[2])&&u.push(new Nl(t,r,f,a,d,l,h)),(t=c[1])&&u.push(new Nl(t,d,o,a,i,f,h)),(t=c[0])&&u.push(new Nl(t,r,o,a,d,f,h))}return this},Ll.visitAfter=function(e){var n,t=[],r=[];for(this._root&&t.push(new Nl(this._root,this._x0,this._y0,this._z0,this._x1,this._y1,this._z1));n=t.pop();){var o=n.node;if(o.length){var a,i=n.x0,l=n.y0,s=n.z0,u=n.x1,c=n.y1,d=n.z1,f=(i+u)/2,h=(l+c)/2,p=(s+d)/2;(a=o[0])&&t.push(new Nl(a,i,l,s,f,h,p)),(a=o[1])&&t.push(new Nl(a,f,l,s,u,h,p)),(a=o[2])&&t.push(new Nl(a,i,h,s,f,c,p)),(a=o[3])&&t.push(new Nl(a,f,h,s,u,c,p)),(a=o[4])&&t.push(new Nl(a,i,l,p,f,h,d)),(a=o[5])&&t.push(new Nl(a,f,l,p,u,h,d)),(a=o[6])&&t.push(new Nl(a,i,h,p,f,c,d)),(a=o[7])&&t.push(new Nl(a,f,h,p,u,c,d))}r.push(n)}for(;n=r.pop();)e(n.node,n.x0,n.y0,n.z0,n.x1,n.y1,n.z1);return this},Ll.x=function(e){return arguments.length?(this._x=e,this):this._x},Ll.y=function(e){return arguments.length?(this._y=e,this):this._y},Ll.z=function(e){return arguments.length?(this._z=e,this):this._z};const{abs:Ul,cos:$l,sin:ql,acos:Hl,atan2:Wl,sqrt:Yl,pow:Vl}=Math;function Xl(e){return e<0?-Vl(-e,1/3):Vl(e,1/3)}const Ql=Math.PI,Gl=2*Ql,Kl=Ql/2,Zl=Number.MAX_SAFE_INTEGER||9007199254740991,Jl=Number.MIN_SAFE_INTEGER||-9007199254740991,es={x:0,y:0,z:0},ns={Tvalues:[-.06405689286260563,.06405689286260563,-.1911188674736163,.1911188674736163,-.3150426796961634,.3150426796961634,-.4337935076260451,.4337935076260451,-.5454214713888396,.5454214713888396,-.6480936519369755,.6480936519369755,-.7401241915785544,.7401241915785544,-.820001985973903,.820001985973903,-.8864155270044011,.8864155270044011,-.9382745520027328,.9382745520027328,-.9747285559713095,.9747285559713095,-.9951872199970213,.9951872199970213],Cvalues:[.12793819534675216,.12793819534675216,.1258374563468283,.1258374563468283,.12167047292780339,.12167047292780339,.1155056680537256,.1155056680537256,.10744427011596563,.10744427011596563,.09761865210411388,.09761865210411388,.08619016153195327,.08619016153195327,.0733464814110803,.0733464814110803,.05929858491543678,.05929858491543678,.04427743881741981,.04427743881741981,.028531388628933663,.028531388628933663,.0123412297999872,.0123412297999872],arcfn:function(e,n){const t=n(e);let r=t.x*t.x+t.y*t.y;return void 0!==t.z&&(r+=t.z*t.z),Yl(r)},compute:function(e,n,t){if(0===e)return n[0].t=0,n[0];const r=n.length-1;if(1===e)return n[r].t=1,n[r];const o=1-e;let a=n;if(0===r)return n[0].t=e,n[0];if(1===r){const n={x:o*a[0].x+e*a[1].x,y:o*a[0].y+e*a[1].y,t:e};return t&&(n.z=o*a[0].z+e*a[1].z),n}if(r<4){let n,i,l,s=o*o,u=e*e,c=0;2===r?(a=[a[0],a[1],a[2],es],n=s,i=o*e*2,l=u):3===r&&(n=s*o,i=s*e*3,l=o*u*3,c=e*u);const d={x:n*a[0].x+i*a[1].x+l*a[2].x+c*a[3].x,y:n*a[0].y+i*a[1].y+l*a[2].y+c*a[3].y,t:e};return t&&(d.z=n*a[0].z+i*a[1].z+l*a[2].z+c*a[3].z),d}const i=JSON.parse(JSON.stringify(n));for(;i.length>1;){for(let n=0;n<i.length-1;n++)i[n]={x:i[n].x+(i[n+1].x-i[n].x)*e,y:i[n].y+(i[n+1].y-i[n].y)*e},void 0!==i[n].z&&(i[n].z=i[n].z+(i[n+1].z-i[n].z)*e);i.splice(i.length-1,1)}return i[0].t=e,i[0]},computeWithRatios:function(e,n,t,r){const o=1-e,a=t,i=n;let l,s=a[0],u=a[1],c=a[2],d=a[3];return s*=o,u*=e,2===i.length?(l=s+u,{x:(s*i[0].x+u*i[1].x)/l,y:(s*i[0].y+u*i[1].y)/l,z:!!r&&(s*i[0].z+u*i[1].z)/l,t:e}):(s*=o,u*=2*o,c*=e*e,3===i.length?(l=s+u+c,{x:(s*i[0].x+u*i[1].x+c*i[2].x)/l,y:(s*i[0].y+u*i[1].y+c*i[2].y)/l,z:!!r&&(s*i[0].z+u*i[1].z+c*i[2].z)/l,t:e}):(s*=o,u*=1.5*o,c*=3*o,d*=e*e*e,4===i.length?(l=s+u+c+d,{x:(s*i[0].x+u*i[1].x+c*i[2].x+d*i[3].x)/l,y:(s*i[0].y+u*i[1].y+c*i[2].y+d*i[3].y)/l,z:!!r&&(s*i[0].z+u*i[1].z+c*i[2].z+d*i[3].z)/l,t:e}):void 0))},derive:function(e,n){const t=[];for(let r=e,o=r.length,a=o-1;o>1;o--,a--){const e=[];for(let t,o=0;o<a;o++)t={x:a*(r[o+1].x-r[o].x),y:a*(r[o+1].y-r[o].y)},n&&(t.z=a*(r[o+1].z-r[o].z)),e.push(t);t.push(e),r=e}return t},between:function(e,n,t){return n<=e&&e<=t||ns.approximately(e,n)||ns.approximately(e,t)},approximately:function(e,n,t){return Ul(e-n)<=(t||1e-6)},length:function(e){const n=ns.Tvalues.length;let t=0;for(let r,o=0;o<n;o++)r=.5*ns.Tvalues[o]+.5,t+=ns.Cvalues[o]*ns.arcfn(r,e);return.5*t},map:function(e,n,t,r,o){return r+(e-n)/(t-n)*(o-r)},lerp:function(e,n,t){const r={x:n.x+e*(t.x-n.x),y:n.y+e*(t.y-n.y)};return void 0!==n.z&&void 0!==t.z&&(r.z=n.z+e*(t.z-n.z)),r},pointToString:function(e){let n=e.x+"/"+e.y;return void 0!==e.z&&(n+="/"+e.z),n},pointsToString:function(e){return"["+e.map(ns.pointToString).join(", ")+"]"},copy:function(e){return JSON.parse(JSON.stringify(e))},angle:function(e,n,t){const r=n.x-e.x,o=n.y-e.y,a=t.x-e.x,i=t.y-e.y;return Wl(r*i-o*a,r*a+o*i)},round:function(e,n){const t=""+e,r=t.indexOf(".");return parseFloat(t.substring(0,r+1+n))},dist:function(e,n){const t=e.x-n.x,r=e.y-n.y;return Yl(t*t+r*r)},closest:function(e,n){let t,r,o=Vl(2,63);return e.forEach(function(e,a){r=ns.dist(n,e),r<o&&(o=r,t=a)}),{mdist:o,mpos:t}},abcratio:function(e,n){if(2!==n&&3!==n)return!1;if(void 0===e)e=.5;else if(0===e||1===e)return e;const t=Vl(e,n)+Vl(1-e,n);return Ul((t-1)/t)},projectionratio:function(e,n){if(2!==n&&3!==n)return!1;if(void 0===e)e=.5;else if(0===e||1===e)return e;const t=Vl(1-e,n);return t/(Vl(e,n)+t)},lli8:function(e,n,t,r,o,a,i,l){const s=(e-t)*(a-l)-(n-r)*(o-i);return 0!=s&&{x:((e*r-n*t)*(o-i)-(e-t)*(o*l-a*i))/s,y:((e*r-n*t)*(a-l)-(n-r)*(o*l-a*i))/s}},lli4:function(e,n,t,r){const o=e.x,a=e.y,i=n.x,l=n.y,s=t.x,u=t.y,c=r.x,d=r.y;return ns.lli8(o,a,i,l,s,u,c,d)},lli:function(e,n){return ns.lli4(e,e.c,n,n.c)},makeline:function(e,n){return new ds(e.x,e.y,(e.x+n.x)/2,(e.y+n.y)/2,n.x,n.y)},findbbox:function(e){let n=Zl,t=Zl,r=Jl,o=Jl;return e.forEach(function(e){const a=e.bbox();n>a.x.min&&(n=a.x.min),t>a.y.min&&(t=a.y.min),r<a.x.max&&(r=a.x.max),o<a.y.max&&(o=a.y.max)}),{x:{min:n,mid:(n+r)/2,max:r,size:r-n},y:{min:t,mid:(t+o)/2,max:o,size:o-t}}},shapeintersections:function(e,n,t,r,o){if(!ns.bboxoverlap(n,r))return[];const a=[],i=[e.startcap,e.forward,e.back,e.endcap],l=[t.startcap,t.forward,t.back,t.endcap];return i.forEach(function(n){n.virtual||l.forEach(function(r){if(r.virtual)return;const i=n.intersects(r,o);i.length>0&&(i.c1=n,i.c2=r,i.s1=e,i.s2=t,a.push(i))})}),a},makeshape:function(e,n,t){const r=n.points.length,o=e.points.length,a=ns.makeline(n.points[r-1],e.points[0]),i=ns.makeline(e.points[o-1],n.points[0]),l={startcap:a,forward:e,back:n,endcap:i,bbox:ns.findbbox([a,e,n,i]),intersections:function(e){return ns.shapeintersections(l,l.bbox,e,e.bbox,t)}};return l},getminmax:function(e,n,t){if(!t)return{min:0,max:0};let r,o,a=Zl,i=Jl;-1===t.indexOf(0)&&(t=[0].concat(t)),-1===t.indexOf(1)&&t.push(1);for(let l=0,s=t.length;l<s;l++)r=t[l],o=e.get(r),o[n]<a&&(a=o[n]),o[n]>i&&(i=o[n]);return{min:a,mid:(a+i)/2,max:i,size:i-a}},align:function(e,n){const t=n.p1.x,r=n.p1.y,o=-Wl(n.p2.y-r,n.p2.x-t);return e.map(function(e){return{x:(e.x-t)*$l(o)-(e.y-r)*ql(o),y:(e.x-t)*ql(o)+(e.y-r)*$l(o)}})},roots:function(e,n){n=n||{p1:{x:0,y:0},p2:{x:1,y:0}};const t=e.length-1,r=ns.align(e,n),o=function(e){return 0<=e&&e<=1};if(2===t){const e=r[0].y,n=r[1].y,t=r[2].y,a=e-2*n+t;if(0!==a){const r=-Yl(n*n-e*t),i=-e+n;return[-(r+i)/a,-(-r+i)/a].filter(o)}return n!==t&&0===a?[(2*n-t)/(2*n-2*t)].filter(o):[]}const a=r[0].y,i=r[1].y,l=r[2].y;let s=3*i-a-3*l+r[3].y,u=3*a-6*i+3*l,c=-3*a+3*i,d=a;if(ns.approximately(s,0)){if(ns.approximately(u,0))return ns.approximately(c,0)?[]:[-d/c].filter(o);const e=Yl(c*c-4*u*d),n=2*u;return[(e-c)/n,(-c-e)/n].filter(o)}u/=s,c/=s,d/=s;const f=(3*c-u*u)/3,h=f/3,p=(2*u*u*u-9*u*c+27*d)/27,m=p/2,g=m*m+h*h*h;let A,y,v,b,x;if(g<0){const e=-f/3,n=Yl(e*e*e),t=-p/(2*n),r=Hl(t<-1?-1:t>1?1:t),a=2*Xl(n);return v=a*$l(r/3)-u/3,b=a*$l((r+Gl)/3)-u/3,x=a*$l((r+2*Gl)/3)-u/3,[v,b,x].filter(o)}if(0===g)return A=m<0?Xl(-m):-Xl(m),v=2*A-u/3,b=-A-u/3,[v,b].filter(o);{const e=Yl(g);return A=Xl(-m+e),y=Xl(m+e),[A-y-u/3].filter(o)}},droots:function(e){if(3===e.length){const n=e[0],t=e[1],r=e[2],o=n-2*t+r;if(0!==o){const e=-Yl(t*t-n*r),a=-n+t;return[-(e+a)/o,-(-e+a)/o]}return t!==r&&0===o?[(2*t-r)/(2*(t-r))]:[]}if(2===e.length){const n=e[0],t=e[1];return n!==t?[n/(n-t)]:[]}return[]},curvature:function(e,n,t,r,o){let a,i,l,s,u=0,c=0;const d=ns.compute(e,n),f=ns.compute(e,t),h=d.x*d.x+d.y*d.y;if(r?(a=Yl(Vl(d.y*f.z-f.y*d.z,2)+Vl(d.z*f.x-f.z*d.x,2)+Vl(d.x*f.y-f.x*d.y,2)),i=Vl(h+d.z*d.z,1.5)):(a=d.x*f.y-d.y*f.x,i=Vl(h,1.5)),0===a||0===i)return{k:0,r:0};if(u=a/i,c=i/a,!o){const o=ns.curvature(e-.001,n,t,r,!0).k,a=ns.curvature(e+.001,n,t,r,!0).k;s=(a-u+(u-o))/2,l=(Ul(a-u)+Ul(u-o))/2}return{k:u,r:c,dk:s,adk:l}},inflections:function(e){if(e.length<4)return[];const n=ns.align(e,{p1:e[0],p2:e.slice(-1)[0]}),t=n[2].x*n[1].y,r=n[3].x*n[1].y,o=n[1].x*n[2].y,a=18*(-3*t+2*r+3*o-n[3].x*n[2].y),i=18*(3*t-r-3*o),l=18*(o-t);if(ns.approximately(a,0)){if(!ns.approximately(i,0)){let e=-l/i;if(0<=e&&e<=1)return[e]}return[]}const s=2*a;if(ns.approximately(s,0))return[];const u=i*i-4*a*l;if(u<0)return[];const c=Math.sqrt(u);return[(c-i)/s,-(i+c)/s].filter(function(e){return 0<=e&&e<=1})},bboxoverlap:function(e,n){const t=["x","y"],r=t.length;for(let o,a,i,l,s=0;s<r;s++)if(o=t[s],a=e[o].mid,i=n[o].mid,l=(e[o].size+n[o].size)/2,Ul(a-i)>=l)return!1;return!0},expandbox:function(e,n){n.x.min<e.x.min&&(e.x.min=n.x.min),n.y.min<e.y.min&&(e.y.min=n.y.min),n.z&&n.z.min<e.z.min&&(e.z.min=n.z.min),n.x.max>e.x.max&&(e.x.max=n.x.max),n.y.max>e.y.max&&(e.y.max=n.y.max),n.z&&n.z.max>e.z.max&&(e.z.max=n.z.max),e.x.mid=(e.x.min+e.x.max)/2,e.y.mid=(e.y.min+e.y.max)/2,e.z&&(e.z.mid=(e.z.min+e.z.max)/2),e.x.size=e.x.max-e.x.min,e.y.size=e.y.max-e.y.min,e.z&&(e.z.size=e.z.max-e.z.min)},pairiteration:function(e,n,t){const r=e.bbox(),o=n.bbox(),a=1e5,i=t||.5;if(r.x.size+r.y.size<i&&o.x.size+o.y.size<i)return[(a*(e._t1+e._t2)/2|0)/a+"/"+(a*(n._t1+n._t2)/2|0)/a];let l=e.split(.5),s=n.split(.5),u=[{left:l.left,right:s.left},{left:l.left,right:s.right},{left:l.right,right:s.right},{left:l.right,right:s.left}];u=u.filter(function(e){return ns.bboxoverlap(e.left.bbox(),e.right.bbox())});let c=[];return 0===u.length||(u.forEach(function(e){c=c.concat(ns.pairiteration(e.left,e.right,i))}),c=c.filter(function(e,n){return c.indexOf(e)===n})),c},getccenter:function(e,n,t){const r=n.x-e.x,o=n.y-e.y,a=t.x-n.x,i=t.y-n.y,l=r*$l(Kl)-o*ql(Kl),s=r*ql(Kl)+o*$l(Kl),u=a*$l(Kl)-i*ql(Kl),c=a*ql(Kl)+i*$l(Kl),d=(e.x+n.x)/2,f=(e.y+n.y)/2,h=(n.x+t.x)/2,p=(n.y+t.y)/2,m=d+l,g=f+s,A=h+u,y=p+c,v=ns.lli8(d,f,m,g,h,p,A,y),b=ns.dist(v,e);let x,E=Wl(e.y-v.y,e.x-v.x),C=Wl(n.y-v.y,n.x-v.x),w=Wl(t.y-v.y,t.x-v.x);return E<w?((E>C||C>w)&&(E+=Gl),E>w&&(x=w,w=E,E=x)):w<C&&C<E?(x=w,w=E,E=x):w+=Gl,v.s=E,v.e=w,v.r=b,v},numberSort:function(e,n){return e-n}};class ts{constructor(e){this.curves=[],this._3d=!1,e&&(this.curves=e,this._3d=this.curves[0]._3d)}valueOf(){return this.toString()}toString(){return"["+this.curves.map(function(e){return ns.pointsToString(e.points)}).join(", ")+"]"}addCurve(e){this.curves.push(e),this._3d=this._3d||e._3d}length(){return this.curves.map(function(e){return e.length()}).reduce(function(e,n){return e+n})}curve(e){return this.curves[e]}bbox(){const e=this.curves;for(var n=e[0].bbox(),t=1;t<e.length;t++)ns.expandbox(n,e[t].bbox());return n}offset(e){const n=[];return this.curves.forEach(function(t){n.push(...t.offset(e))}),new ts(n)}}const{abs:rs,min:os,max:as,cos:is,sin:ls,acos:ss,sqrt:us}=Math,cs=Math.PI;class ds{constructor(e){let n=e&&e.forEach?e:Array.from(arguments).slice(),t=!1;if("object"==typeof n[0]){t=n.length;const e=[];n.forEach(function(n){["x","y","z"].forEach(function(t){void 0!==n[t]&&e.push(n[t])})}),n=e}let r=!1;const o=n.length;if(t){if(t>4){if(1!==arguments.length)throw new Error("Only new Bezier(point[]) is accepted for 4th and higher order curves");r=!0}}else if(6!==o&&8!==o&&9!==o&&12!==o&&1!==arguments.length)throw new Error("Only new Bezier(point[]) is accepted for 4th and higher order curves");const a=this._3d=!r&&(9===o||12===o)||e&&e[0]&&void 0!==e[0].z,i=this.points=[];for(let e=0,t=a?3:2;e<o;e+=t){var l={x:n[e],y:n[e+1]};a&&(l.z=n[e+2]),i.push(l)}const s=this.order=i.length-1,u=this.dims=["x","y"];a&&u.push("z"),this.dimlen=u.length;const c=ns.align(i,{p1:i[0],p2:i[s]}),d=ns.dist(i[0],i[s]);this._linear=c.reduce((e,n)=>e+rs(n.y),0)<d/50,this._lut=[],this._t1=0,this._t2=1,this.update()}static quadraticFromPoints(e,n,t,r){if(void 0===r&&(r=.5),0===r)return new ds(n,n,t);if(1===r)return new ds(e,n,n);const o=ds.getABC(2,e,n,t,r);return new ds(e,o.A,t)}static cubicFromPoints(e,n,t,r,o){void 0===r&&(r=.5);const a=ds.getABC(3,e,n,t,r);void 0===o&&(o=ns.dist(n,a.C));const i=o*(1-r)/r,l=ns.dist(e,t),s=(t.x-e.x)/l,u=(t.y-e.y)/l,c=o*s,d=o*u,f=i*s,h=i*u,p=n.x-c,m=n.y-d,g=n.x+f,A=n.y+h,y=a.A,v=y.x+(p-y.x)/(1-r),b=y.y+(m-y.y)/(1-r),x=y.x+(g-y.x)/r,E=y.y+(A-y.y)/r,C={x:e.x+(v-e.x)/r,y:e.y+(b-e.y)/r},w={x:t.x+(x-t.x)/(1-r),y:t.y+(E-t.y)/(1-r)};return new ds(e,C,w,t)}static getUtils(){return ns}getUtils(){return ds.getUtils()}static get PolyBezier(){return ts}valueOf(){return this.toString()}toString(){return ns.pointsToString(this.points)}toSVG(){if(this._3d)return!1;const e=this.points,n=["M",e[0].x,e[0].y,2===this.order?"Q":"C"];for(let t=1,r=e.length;t<r;t++)n.push(e[t].x),n.push(e[t].y);return n.join(" ")}setRatios(e){if(e.length!==this.points.length)throw new Error("incorrect number of ratio values");this.ratios=e,this._lut=[]}verify(){const e=this.coordDigest();e!==this._print&&(this._print=e,this.update())}coordDigest(){return this.points.map(function(e,n){return""+n+e.x+e.y+(e.z?e.z:0)}).join("")}update(){this._lut=[],this.dpoints=ns.derive(this.points,this._3d),this.computedirection()}computedirection(){const e=this.points,n=ns.angle(e[0],e[this.order],e[1]);this.clockwise=n>0}length(){return ns.length(this.derivative.bind(this))}static getABC(e=2,n,t,r,o=.5){const a=ns.projectionratio(o,e),i=1-a,l={x:a*n.x+i*r.x,y:a*n.y+i*r.y},s=ns.abcratio(o,e);return{A:{x:t.x+(t.x-l.x)/s,y:t.y+(t.y-l.y)/s},B:t,C:l,S:n,E:r}}getABC(e,n){n=n||this.get(e);let t=this.points[0],r=this.points[this.order];return ds.getABC(this.order,t,n,r,e)}getLUT(e){if(this.verify(),e=e||100,this._lut.length===e+1)return this._lut;this._lut=[],e++,this._lut=[];for(let n,t,r=0;r<e;r++)t=r/(e-1),n=this.compute(t),n.t=t,this._lut.push(n);return this._lut}on(e,n){n=n||5;const r=this.getLUT(),o=[];for(let t,a=0,i=0;a<r.length;a++)t=r[a],ns.dist(t,e)<n&&(o.push(t),i+=a/r.length);return!!o.length&&(t/=o.length)}project(e){const n=this.getLUT(),t=n.length-1,r=ns.closest(n,e),o=r.mpos,a=(o-1)/t,i=(o+1)/t,l=.1/t;let s,u=r.mdist,c=a,d=c;u+=1;for(let n;c<i+l;c+=l)s=this.compute(c),n=ns.dist(e,s),n<u&&(u=n,d=c);return d=d<0?0:d>1?1:d,s=this.compute(d),s.t=d,s.d=u,s}get(e){return this.compute(e)}point(e){return this.points[e]}compute(e){return this.ratios?ns.computeWithRatios(e,this.points,this.ratios,this._3d):ns.compute(e,this.points,this._3d,this.ratios)}raise(){const e=this.points,n=[e[0]],t=e.length;for(let r,o,a=1;a<t;a++)r=e[a],o=e[a-1],n[a]={x:(t-a)/t*r.x+a/t*o.x,y:(t-a)/t*r.y+a/t*o.y};return n[t]=e[t-1],new ds(n)}derivative(e){return ns.compute(e,this.dpoints[0],this._3d)}dderivative(e){return ns.compute(e,this.dpoints[1],this._3d)}align(){let e=this.points;return new ds(ns.align(e,{p1:e[0],p2:e[e.length-1]}))}curvature(e){return ns.curvature(e,this.dpoints[0],this.dpoints[1],this._3d)}inflections(){return ns.inflections(this.points)}normal(e){return this._3d?this.__normal3(e):this.__normal2(e)}__normal2(e){const n=this.derivative(e),t=us(n.x*n.x+n.y*n.y);return{t:e,x:-n.y/t,y:n.x/t}}__normal3(e){const n=this.derivative(e),t=this.derivative(e+.01),r=us(n.x*n.x+n.y*n.y+n.z*n.z),o=us(t.x*t.x+t.y*t.y+t.z*t.z);n.x/=r,n.y/=r,n.z/=r,t.x/=o,t.y/=o,t.z/=o;const a={x:t.y*n.z-t.z*n.y,y:t.z*n.x-t.x*n.z,z:t.x*n.y-t.y*n.x},i=us(a.x*a.x+a.y*a.y+a.z*a.z);a.x/=i,a.y/=i,a.z/=i;const l=[a.x*a.x,a.x*a.y-a.z,a.x*a.z+a.y,a.x*a.y+a.z,a.y*a.y,a.y*a.z-a.x,a.x*a.z-a.y,a.y*a.z+a.x,a.z*a.z];return{t:e,x:l[0]*n.x+l[1]*n.y+l[2]*n.z,y:l[3]*n.x+l[4]*n.y+l[5]*n.z,z:l[6]*n.x+l[7]*n.y+l[8]*n.z}}hull(e){let n=this.points,t=[],r=[],o=0;for(r[o++]=n[0],r[o++]=n[1],r[o++]=n[2],3===this.order&&(r[o++]=n[3]);n.length>1;){t=[];for(let a,i=0,l=n.length-1;i<l;i++)a=ns.lerp(e,n[i],n[i+1]),r[o++]=a,t.push(a);n=t}return r}split(e,n){if(0===e&&n)return this.split(n).left;if(1===n)return this.split(e).right;const t=this.hull(e),r={left:2===this.order?new ds([t[0],t[3],t[5]]):new ds([t[0],t[4],t[7],t[9]]),right:2===this.order?new ds([t[5],t[4],t[2]]):new ds([t[9],t[8],t[6],t[3]]),span:t};return r.left._t1=ns.map(0,0,1,this._t1,this._t2),r.left._t2=ns.map(e,0,1,this._t1,this._t2),r.right._t1=ns.map(e,0,1,this._t1,this._t2),r.right._t2=ns.map(1,0,1,this._t1,this._t2),n?(n=ns.map(n,e,1,0,1),r.right.split(n).left):r}extrema(){const e={};let n=[];return this.dims.forEach(function(t){let r=function(e){return e[t]},o=this.dpoints[0].map(r);e[t]=ns.droots(o),3===this.order&&(o=this.dpoints[1].map(r),e[t]=e[t].concat(ns.droots(o))),e[t]=e[t].filter(function(e){return e>=0&&e<=1}),n=n.concat(e[t].sort(ns.numberSort))}.bind(this)),e.values=n.sort(ns.numberSort).filter(function(e,t){return n.indexOf(e)===t}),e}bbox(){const e=this.extrema(),n={};return this.dims.forEach(function(t){n[t]=ns.getminmax(this,t,e[t])}.bind(this)),n}overlaps(e){const n=this.bbox(),t=e.bbox();return ns.bboxoverlap(n,t)}offset(e,n){if(void 0!==n){const t=this.get(e),r=this.normal(e),o={c:t,n:r,x:t.x+r.x*n,y:t.y+r.y*n};return this._3d&&(o.z=t.z+r.z*n),o}if(this._linear){const n=this.normal(0),t=this.points.map(function(t){const r={x:t.x+e*n.x,y:t.y+e*n.y};return t.z&&n.z&&(r.z=t.z+e*n.z),r});return[new ds(t)]}return this.reduce().map(function(n){return n._linear?n.offset(e)[0]:n.scale(e)})}simple(){if(3===this.order){const e=ns.angle(this.points[0],this.points[3],this.points[1]),n=ns.angle(this.points[0],this.points[3],this.points[2]);if(e>0&&n<0||e<0&&n>0)return!1}const e=this.normal(0),n=this.normal(1);let t=e.x*n.x+e.y*n.y;return this._3d&&(t+=e.z*n.z),rs(ss(t))<cs/3}reduce(){let e,n,t=0,r=0,o=.01,a=[],i=[],l=this.extrema().values;for(-1===l.indexOf(0)&&(l=[0].concat(l)),-1===l.indexOf(1)&&l.push(1),t=l[0],e=1;e<l.length;e++)r=l[e],n=this.split(t,r),n._t1=t,n._t2=r,a.push(n),t=r;return a.forEach(function(e){for(t=0,r=0;r<=1;)for(r=t+o;r<=1.01;r+=o)if(n=e.split(t,r),!n.simple()){if(r-=o,rs(t-r)<o)return[];n=e.split(t,r),n._t1=ns.map(t,0,1,e._t1,e._t2),n._t2=ns.map(r,0,1,e._t1,e._t2),i.push(n),t=r;break}t<1&&(n=e.split(t,1),n._t1=ns.map(t,0,1,e._t1,e._t2),n._t2=e._t2,i.push(n))}),i}translate(e,n,t){t="number"==typeof t?t:n;const r=this.order;let o=this.points.map((e,o)=>(1-o/r)*n+o/r*t);return new ds(this.points.map((n,t)=>({x:n.x+e.x*o[t],y:n.y+e.y*o[t]})))}scale(e){const n=this.order;let t=!1;if("function"==typeof e&&(t=e),t&&2===n)return this.raise().scale(t);const r=this.clockwise,o=this.points;if(this._linear)return this.translate(this.normal(0),t?t(0):e,t?t(1):e);const a=t?t(0):e,i=t?t(1):e,l=[this.offset(0,10),this.offset(1,10)],s=[],u=ns.lli4(l[0],l[0].c,l[1],l[1].c);if(!u)throw new Error("cannot scale this curve. Try reducing it first.");return[0,1].forEach(function(e){const t=s[e*n]=ns.copy(o[e*n]);t.x+=(e?i:a)*l[e].n.x,t.y+=(e?i:a)*l[e].n.y}),t?([0,1].forEach(function(a){if(2!==n||!a){var i=o[a+1],l={x:i.x-u.x,y:i.y-u.y},c=t?t((a+1)/n):e;t&&!r&&(c=-c);var d=us(l.x*l.x+l.y*l.y);l.x/=d,l.y/=d,s[a+1]={x:i.x+c*l.x,y:i.y+c*l.y}}}),new ds(s)):([0,1].forEach(e=>{if(2===n&&e)return;const t=s[e*n],r=this.derivative(e),a={x:t.x+r.x,y:t.y+r.y};s[e+1]=ns.lli4(t,a,u,o[e+1])}),new ds(s))}outline(e,n,t,r){if(n=void 0===n?e:n,this._linear){const o=this.normal(0),a=this.points[0],i=this.points[this.points.length-1];let l,s,u;void 0===t&&(t=e,r=n),l={x:a.x+o.x*e,y:a.y+o.y*e},u={x:i.x+o.x*t,y:i.y+o.y*t},s={x:(l.x+u.x)/2,y:(l.y+u.y)/2};const c=[l,s,u];l={x:a.x-o.x*n,y:a.y-o.y*n},u={x:i.x-o.x*r,y:i.y-o.y*r},s={x:(l.x+u.x)/2,y:(l.y+u.y)/2};const d=[u,s,l],f=ns.makeline(d[2],c[0]),h=ns.makeline(c[2],d[0]),p=[f,new ds(c),h,new ds(d)];return new ts(p)}const o=this.reduce(),a=o.length,i=[];let l,s=[],u=0,c=this.length();const d=void 0!==t&&void 0!==r;function f(e,n,t,r,o){return function(a){const i=r/t,l=(r+o)/t,s=n-e;return ns.map(a,0,1,e+i*s,e+l*s)}}o.forEach(function(o){const a=o.length();d?(i.push(o.scale(f(e,t,c,u,a))),s.push(o.scale(f(-n,-r,c,u,a)))):(i.push(o.scale(e)),s.push(o.scale(-n))),u+=a}),s=s.map(function(e){return l=e.points,l[3]?e.points=[l[3],l[2],l[1],l[0]]:e.points=[l[2],l[1],l[0]],e}).reverse();const h=i[0].points[0],p=i[a-1].points[i[a-1].points.length-1],m=s[a-1].points[s[a-1].points.length-1],g=s[0].points[0],A=ns.makeline(m,h),y=ns.makeline(p,g),v=[A].concat(i).concat([y]).concat(s);return new ts(v)}outlineshapes(e,n,t){n=n||e;const r=this.outline(e,n).curves,o=[];for(let e=1,n=r.length;e<n/2;e++){const a=ns.makeshape(r[e],r[n-e],t);a.startcap.virtual=e>1,a.endcap.virtual=e<n/2-1,o.push(a)}return o}intersects(e,n){return e?e.p1&&e.p2?this.lineIntersects(e):(e instanceof ds&&(e=e.reduce()),this.curveintersects(this.reduce(),e,n)):this.selfintersects(n)}lineIntersects(e){const n=os(e.p1.x,e.p2.x),t=os(e.p1.y,e.p2.y),r=as(e.p1.x,e.p2.x),o=as(e.p1.y,e.p2.y);return ns.roots(this.points,e).filter(e=>{var a=this.get(e);return ns.between(a.x,n,r)&&ns.between(a.y,t,o)})}selfintersects(e){const n=this.reduce(),t=n.length-2,r=[];for(let o,a,i,l=0;l<t;l++)a=n.slice(l,l+1),i=n.slice(l+2),o=this.curveintersects(a,i,e),r.push(...o);return r}curveintersects(e,n,t){const r=[];e.forEach(function(e){n.forEach(function(n){e.overlaps(n)&&r.push({left:e,right:n})})});let o=[];return r.forEach(function(e){const n=ns.pairiteration(e.left,e.right,t);n.length>0&&(o=o.concat(n))}),o}arcs(e){return e=e||.5,this._iterate(e,[])}_error(e,n,t,r){const o=(r-t)/4,a=this.get(t+o),i=this.get(r-o),l=ns.dist(e,n),s=ns.dist(e,a),u=ns.dist(e,i);return rs(s-l)+rs(u-l)}_iterate(e,n){let t,r=0,o=1;do{t=0,o=1;let a,i,l,s,u,c=this.get(r),d=!1,f=!1,h=o,p=1,m=0;do{if(f=d,s=l,h=(r+o)/2,m++,a=this.get(h),i=this.get(o),l=ns.getccenter(c,a,i),l.interval={start:r,end:o},d=this._error(l,c,r,o)<=e,u=f&&!d,u||(p=o),d){if(o>=1){if(l.interval.end=p=1,s=l,o>1){let e={x:l.x+l.r*is(l.e),y:l.y+l.r*ls(l.e)};l.e+=ns.angle({x:l.x,y:l.y},e,this.get(1))}break}o+=(o-r)/2}else o=h}while(!u&&t++<100);if(t>=100)break;s=s||l,n.push(s),r=p}while(o<1);return n}}function fs(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=Array(n);t<n;t++)r[t]=e[t];return r}function hs(e){var n=function(e){if("object"!=typeof e||!e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var t=n.call(e,"string");if("object"!=typeof t)return t;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"==typeof n?n:n+""}function ps(e,n){if(e){if("string"==typeof e)return fs(e,n);var t={}.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?fs(e,n):void 0}}var ms=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[],n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:[],t=!(arguments.length>2&&void 0!==arguments[2])||arguments[2],r=arguments.length>3&&void 0!==arguments[3]&&arguments[3],o=(n instanceof Array?n.length?n:[void 0]:[n]).map(function(e){return{keyAccessor:e,isProp:!(e instanceof Function)}}),a=e.reduce(function(e,n){var r=e,a=n;return o.forEach(function(e,n){var i,l=e.keyAccessor;if(e.isProp){var s=a,u=s[l],c=function(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t={};for(var r in e)if({}.hasOwnProperty.call(e,r)){if(n.includes(r))continue;t[r]=e[r]}return t}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.includes(t)||{}.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}(s,[l].map(hs));i=u,a=c}else i=l(a,n);n+1<o.length?(r.hasOwnProperty(i)||(r[i]={}),r=r[i]):t?(r.hasOwnProperty(i)||(r[i]=[]),r[i].push(a)):r[i]=a}),e},{});t instanceof Function&&function e(n){var r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1;r===o.length?Object.keys(n).forEach(function(e){return n[e]=t(n[e])}):Object.values(n).forEach(function(n){return e(n,r+1)})}(a);var i=a;return r&&(i=[],function e(n){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:[];t.length===o.length?i.push({keys:t,vals:n}):Object.entries(n).forEach(function(n){var r=function(e,n){return function(e){if(Array.isArray(e))return e}(e)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var r,o,a,i,l=[],s=!0,u=!1;try{if(a=(t=t.call(e)).next,0===n);else for(;!(s=(r=a.call(t)).done)&&(l.push(r.value),l.length!==n);s=!0);}catch(e){u=!0,o=e}finally{try{if(!s&&null!=t.return&&(i=t.return(),Object(i)!==i))return}finally{if(u)throw o}}return l}}(e,n)||ps(e,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}(n,2),o=r[0],a=r[1];return e(a,[].concat(function(e){return function(e){if(Array.isArray(e))return fs(e)}(e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||ps(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}(t),[o]))})}(a),n instanceof Array&&0===n.length&&1===i.length&&(i[0].keys=[])),i};class gs extends Map{constructor(e,n=ys){if(super(),Object.defineProperties(this,{_intern:{value:new Map},_key:{value:n}}),null!=e)for(const[n,t]of e)this.set(n,t)}get(e){return super.get(As(this,e))}has(e){return super.has(As(this,e))}set(e,n){return super.set(function({_intern:e,_key:n},t){const r=n(t);return e.has(r)?e.get(r):(e.set(r,t),t)}(this,e),n)}delete(e){return super.delete(function({_intern:e,_key:n},t){const r=n(t);return e.has(r)&&(t=e.get(r),e.delete(r)),t}(this,e))}}function As({_intern:e,_key:n},t){const r=n(t);return e.has(r)?e.get(r):t}function ys(e){return null!==e&&"object"==typeof e?e.valueOf():e}function vs(e,n){switch(arguments.length){case 0:break;case 1:this.range(e);break;default:this.range(n).domain(e)}return this}Set;const bs=Symbol("implicit"),xs=function(e){for(var n=new Array(12),t=0;t<12;)n[t]="#"+e.slice(6*t,6*++t);return n}("a6cee31f78b4b2df8a33a02cfb9a99e31a1cfdbf6fff7f00cab2d66a3d9affff99b15928");function Es(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=Array(n);t<n;t++)r[t]=e[t];return r}function Cs(e,n,t){if(_s())return Reflect.construct.apply(null,arguments);var r=[null];return r.push.apply(r,n),new(e.bind.apply(e,r))}function ws(e,n,t){return(n=function(e){var n=function(e,n){if("object"!=typeof e||!e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var r=t.call(e,n);if("object"!=typeof r)return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e,"string");return"symbol"==typeof n?n:n+""}(n))in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function _s(){try{var e=!Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){}))}catch(e){}return(_s=function(){return!!e})()}function ks(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter(function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable})),t.push.apply(t,r)}return t}function Bs(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?ks(Object(t),!0).forEach(function(n){ws(e,n,t[n])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):ks(Object(t)).forEach(function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))})}return e}function Ss(e,n){return function(e){if(Array.isArray(e))return e}(e)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var r,o,a,i,l=[],s=!0,u=!1;try{if(a=(t=t.call(e)).next,0===n);else for(;!(s=(r=a.call(t)).done)&&(l.push(r.value),l.length!==n);s=!0);}catch(e){u=!0,o=e}finally{try{if(!s&&null!=t.return&&(i=t.return(),Object(i)!==i))return}finally{if(u)throw o}}return l}}(e,n)||js(e,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function zs(e){return function(e){if(Array.isArray(e))return Es(e)}(e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||js(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Ns(e){return Ns="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Ns(e)}function js(e,n){if(e){if("string"==typeof e)return Es(e,n);var t={}.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?Es(e,n):void 0}}!function(e,n){void 0===n&&(n={});var t=n.insertAt;if("undefined"!=typeof document){var r=document.head||document.getElementsByTagName("head")[0],o=document.createElement("style");o.type="text/css","top"===t&&r.firstChild?r.insertBefore(o,r.firstChild):r.appendChild(o),o.styleSheet?o.styleSheet.cssText=e:o.appendChild(document.createTextNode(e))}}(".force-graph-container canvas {\n  display: block;\n  user-select: none;\n  outline: none;\n  -webkit-tap-highlight-color: transparent;\n}\n\n.force-graph-container .clickable {\n  cursor: pointer;\n}\n\n.force-graph-container .grabbable {\n  cursor: move;\n  cursor: grab;\n  cursor: -moz-grab;\n  cursor: -webkit-grab;\n}\n\n.force-graph-container .grabbable:active {\n  cursor: grabbing;\n  cursor: -moz-grabbing;\n  cursor: -webkit-grabbing;\n}\n");var Ps=function e(){var n=new gs,t=[],r=[],o=bs;function a(e){let a=n.get(e);if(void 0===a){if(o!==bs)return o;n.set(e,a=t.push(e)-1)}return r[a%r.length]}return a.domain=function(e){if(!arguments.length)return t.slice();t=[],n=new gs;for(const r of e)n.has(r)||n.set(r,t.push(r)-1);return a},a.range=function(e){return arguments.length?(r=Array.from(e),a):r.slice()},a.unknown=function(e){return arguments.length?(o=e,a):o},a.copy=function(){return e(t,r).unknown(o)},vs.apply(a,arguments),a}(xs);function Ts(e,n,t){n&&"string"==typeof t&&e.filter(function(e){return!e[t]}).forEach(function(e){e[t]=Ps(n(e))})}var Ms=function(e,n){return n.onNeedsRedraw&&n.onNeedsRedraw()},Os=function(e,n){if(!n.isShadow){var t=ga(n.linkDirectionalParticles);n.graphData.links.forEach(function(e){var n=Math.round(Math.abs(t(e)));n?e.__photons=zs(Array(n)).map(function(){return{}}):delete e.__photons})}},Rs=ma({props:{graphData:{default:{nodes:[],links:[]},onChange:function(e,n){n.engineRunning=!1,Os(0,n)}},dagMode:{onChange:function(e,n){!e&&(n.graphData.nodes||[]).forEach(function(e){return e.fx=e.fy=void 0})}},dagLevelDistance:{},dagNodeFilter:{default:function(e){return!0}},onDagError:{triggerUpdate:!1},nodeRelSize:{default:4,triggerUpdate:!1,onChange:Ms},nodeId:{default:"id"},nodeVal:{default:"val",triggerUpdate:!1,onChange:Ms},nodeColor:{default:"color",triggerUpdate:!1,onChange:Ms},nodeAutoColorBy:{},nodeCanvasObject:{triggerUpdate:!1,onChange:Ms},nodeCanvasObjectMode:{default:function(){return"replace"},triggerUpdate:!1,onChange:Ms},nodeVisibility:{default:!0,triggerUpdate:!1,onChange:Ms},linkSource:{default:"source"},linkTarget:{default:"target"},linkVisibility:{default:!0,triggerUpdate:!1,onChange:Ms},linkColor:{default:"color",triggerUpdate:!1,onChange:Ms},linkAutoColorBy:{},linkLineDash:{triggerUpdate:!1,onChange:Ms},linkWidth:{default:1,triggerUpdate:!1,onChange:Ms},linkCurvature:{default:0,triggerUpdate:!1,onChange:Ms},linkCanvasObject:{triggerUpdate:!1,onChange:Ms},linkCanvasObjectMode:{default:function(){return"replace"},triggerUpdate:!1,onChange:Ms},linkDirectionalArrowLength:{default:0,triggerUpdate:!1,onChange:Ms},linkDirectionalArrowColor:{triggerUpdate:!1,onChange:Ms},linkDirectionalArrowRelPos:{default:.5,triggerUpdate:!1,onChange:Ms},linkDirectionalParticles:{default:0,triggerUpdate:!1,onChange:Os},linkDirectionalParticleSpeed:{default:.01,triggerUpdate:!1},linkDirectionalParticleOffset:{default:0,triggerUpdate:!1},linkDirectionalParticleWidth:{default:4,triggerUpdate:!1},linkDirectionalParticleColor:{triggerUpdate:!1},linkDirectionalParticleCanvasObject:{triggerUpdate:!1},globalScale:{default:1,triggerUpdate:!1},d3AlphaMin:{default:0,triggerUpdate:!1},d3AlphaDecay:{default:.0228,triggerUpdate:!1,onChange:function(e,n){n.forceLayout.alphaDecay(e)}},d3AlphaTarget:{default:0,triggerUpdate:!1,onChange:function(e,n){n.forceLayout.alphaTarget(e)}},d3VelocityDecay:{default:.4,triggerUpdate:!1,onChange:function(e,n){n.forceLayout.velocityDecay(e)}},warmupTicks:{default:0,triggerUpdate:!1},cooldownTicks:{default:1/0,triggerUpdate:!1},cooldownTime:{default:15e3,triggerUpdate:!1},onUpdate:{default:function(){},triggerUpdate:!1},onFinishUpdate:{default:function(){},triggerUpdate:!1},onEngineTick:{default:function(){},triggerUpdate:!1},onEngineStop:{default:function(){},triggerUpdate:!1},onNeedsRedraw:{triggerUpdate:!1},isShadow:{default:!1,triggerUpdate:!1}},methods:{d3Force:function(e,n,t){return void 0===t?e.forceLayout.force(n):(e.forceLayout.force(n,t),this)},d3ReheatSimulation:function(e){return e.forceLayout.alpha(1),this.resetCountdown(),this},resetCountdown:function(e){return e.cntTicks=0,e.startTickTime=new Date,e.engineRunning=!0,this},isEngineRunning:function(e){return!!e.engineRunning},tickFrame:function(e){var n,t,r,o,a,i;return!e.isShadow&&e.engineRunning&&(++e.cntTicks>e.cooldownTicks||new Date-e.startTickTime>e.cooldownTime||e.d3AlphaMin>0&&e.forceLayout.alpha()<e.d3AlphaMin?(e.engineRunning=!1,e.onEngineStop()):(e.forceLayout.tick(),e.onEngineTick())),function(){var n=ga(e.linkVisibility),t=ga(e.linkColor),r=ga(e.linkWidth),o=ga(e.linkLineDash),a=ga(e.linkCurvature),i=ga(e.linkCanvasObjectMode),l=e.ctx,s=2*e.isShadow,u=e.graphData.links.filter(n);u.forEach(function(e){var n=a(e);if(n){var t=e.source,r=e.target;if(t&&r&&t.hasOwnProperty("x")&&r.hasOwnProperty("x")){var o=Math.sqrt(Math.pow(r.x-t.x,2)+Math.pow(r.y-t.y,2));if(o>0){var i=Math.atan2(r.y-t.y,r.x-t.x),l=o*n,s={x:(t.x+r.x)/2+l*Math.cos(i-Math.PI/2),y:(t.y+r.y)/2+l*Math.sin(i-Math.PI/2)};e.__controlPoints=[s.x,s.y]}else{var u=70*n;e.__controlPoints=[r.x,r.y-u,r.x+u,r.y]}}}else e.__controlPoints=null});var c=[],d=[],f=u;if(e.linkCanvasObject){var h=[],p=[];u.forEach(function(e){return({before:c,after:d,replace:h}[i(e)]||p).push(e)}),f=[].concat(zs(c),d,p),c=c.concat(h)}l.save(),c.forEach(function(n){return e.linkCanvasObject(n,l,e.globalScale)}),l.restore();var m=ms(f,[t,r,o]);l.save(),Object.entries(m).forEach(function(n){var t=Ss(n,2),r=t[0],a=t[1],i=r&&"undefined"!==r?r:"rgba(0,0,0,0.15)";Object.entries(a).forEach(function(n){var t=Ss(n,2),r=t[0],a=t[1],u=(r||1)/e.globalScale+s;Object.entries(a).forEach(function(e){var n=Ss(e,2);n[0];var t=n[1],r=o(t[0]);l.beginPath(),t.forEach(function(e){var n=e.source,t=e.target;if(n&&t&&n.hasOwnProperty("x")&&t.hasOwnProperty("x")){l.moveTo(n.x,n.y);var r=e.__controlPoints;r?l[2===r.length?"quadraticCurveTo":"bezierCurveTo"].apply(l,zs(r).concat([t.x,t.y])):l.lineTo(t.x,t.y)}}),l.strokeStyle=i,l.lineWidth=u,l.setLineDash(r||[]),l.stroke()})})}),l.restore(),l.save(),d.forEach(function(n){return e.linkCanvasObject(n,l,e.globalScale)}),l.restore()}(),!e.isShadow&&(n=ga(e.linkDirectionalArrowLength),t=ga(e.linkDirectionalArrowRelPos),r=ga(e.linkVisibility),o=ga(e.linkDirectionalArrowColor||e.linkColor),a=ga(e.nodeVal),(i=e.ctx).save(),e.graphData.links.filter(r).forEach(function(r){var l=n(r);if(l&&!(l<0)){var s=r.source,u=r.target;if(s&&u&&s.hasOwnProperty("x")&&u.hasOwnProperty("x")){var c=Math.sqrt(Math.max(0,a(s)||1))*e.nodeRelSize,d=Math.sqrt(Math.max(0,a(u)||1))*e.nodeRelSize,f=Math.min(1,Math.max(0,t(r))),h=o(r)||"rgba(0,0,0,0.28)",p=l/1.6/2,m=r.__controlPoints&&Cs(ds,[s.x,s.y].concat(zs(r.__controlPoints),[u.x,u.y])),g=m?function(e){return m.get(e)}:function(e){return{x:s.x+(u.x-s.x)*e||0,y:s.y+(u.y-s.y)*e||0}},A=m?m.length():Math.sqrt(Math.pow(u.x-s.x,2)+Math.pow(u.y-s.y,2)),y=c+l+(A-c-d-l)*f,v=g(y/A),b=g((y-l)/A),x=g((y-.8*l)/A),E=Math.atan2(v.y-b.y,v.x-b.x)-Math.PI/2;i.beginPath(),i.moveTo(v.x,v.y),i.lineTo(b.x+p*Math.cos(E),b.y+p*Math.sin(E)),i.lineTo(x.x,x.y),i.lineTo(b.x-p*Math.cos(E),b.y-p*Math.sin(E)),i.fillStyle=h,i.fill()}}}),i.restore()),!e.isShadow&&function(){var n=ga(e.linkDirectionalParticles),t=ga(e.linkDirectionalParticleSpeed),r=ga(e.linkDirectionalParticleOffset),o=ga(e.linkDirectionalParticleWidth),a=ga(e.linkVisibility),i=ga(e.linkDirectionalParticleColor||e.linkColor),l=e.ctx;l.save(),e.graphData.links.filter(a).forEach(function(a){var s=n(a);if(a.hasOwnProperty("__photons")&&a.__photons.length){var u=a.source,c=a.target;if(u&&c&&u.hasOwnProperty("x")&&c.hasOwnProperty("x")){var d=t(a),f=Math.abs(r(a)),h=a.__photons||[],p=Math.max(0,o(a)/2)/Math.sqrt(e.globalScale),m=i(a)||"rgba(0,0,0,0.28)";l.fillStyle=m;var g=a.__controlPoints?Cs(ds,[u.x,u.y].concat(zs(a.__controlPoints),[c.x,c.y])):null,A=0,y=!1;h.forEach(function(n){var t=!!n.__singleHop;if(n.hasOwnProperty("__progressRatio")||(n.__progressRatio=t?0:(A+f)/s),!t&&A++,n.__progressRatio+=d,n.__progressRatio>=1){if(t)return void(y=!0);n.__progressRatio=n.__progressRatio%1}var r=n.__progressRatio,o=g?g.get(r):{x:u.x+(c.x-u.x)*r||0,y:u.y+(c.y-u.y)*r||0};e.linkDirectionalParticleCanvasObject?e.linkDirectionalParticleCanvasObject(o.x,o.y,a,l,e.globalScale):(l.beginPath(),l.arc(o.x,o.y,p,0,2*Math.PI,!1),l.fill())}),y&&(a.__photons=a.__photons.filter(function(e){return!e.__singleHop||e.__progressRatio<=1}))}}}),l.restore()}(),function(){var n=ga(e.nodeVisibility),t=ga(e.nodeVal),r=ga(e.nodeColor),o=ga(e.nodeCanvasObjectMode),a=e.ctx,i=e.isShadow/e.globalScale,l=e.graphData.nodes.filter(n);a.save(),l.forEach(function(n){var l=o(n);if(!e.nodeCanvasObject||"before"!==l&&"replace"!==l||(e.nodeCanvasObject(n,a,e.globalScale),"replace"!==l)){var s=Math.sqrt(Math.max(0,t(n)||1))*e.nodeRelSize+i;a.beginPath(),a.arc(n.x,n.y,s,0,2*Math.PI,!1),a.fillStyle=r(n)||"rgba(31, 120, 180, 0.92)",a.fill(),e.nodeCanvasObject&&"after"===l&&e.nodeCanvasObject(n,e.ctx,e.globalScale)}else a.restore()}),a.restore()}(),this},emitParticle:function(e,n){return n&&(!n.__photons&&(n.__photons=[]),n.__photons.push({__singleHop:!0})),this}},stateInit:function(){return{forceLayout:sl().force("link",hl()).force("charge",Dl()).force("center",Fl()).force("dagRadial",null).stop(),engineRunning:!1}},init:function(e,n){n.ctx=e},update:function(e,n){e.engineRunning=!1,e.onUpdate(),null!==e.nodeAutoColorBy&&Ts(e.graphData.nodes,ga(e.nodeAutoColorBy),e.nodeColor),null!==e.linkAutoColorBy&&Ts(e.graphData.links,ga(e.linkAutoColorBy),e.linkColor),e.graphData.links.forEach(function(n){n.source=n[e.linkSource],n.target=n[e.linkTarget]}),e.forceLayout.stop().alpha(1).nodes(e.graphData.nodes);var t=e.forceLayout.force("link");t&&t.id(function(n){return n[e.nodeId]}).links(e.graphData.links);var r=e.dagMode&&function(e,n){var t=e.nodes,r=e.links,o=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},a=o.nodeFilter,i=void 0===a?function(){return!0}:a,l=o.onLoopError,s=void 0===l?function(e){throw"Invalid DAG structure! Found cycle in node path: ".concat(e.join(" -> "),".")}:l,u={};t.forEach(function(e){return u[n(e)]={data:e,out:[],depth:-1,skip:!i(e)}}),r.forEach(function(e){var t=e.source,r=e.target,o=s(t),a=s(r);if(!u.hasOwnProperty(o))throw"Missing source node with id: ".concat(o);if(!u.hasOwnProperty(a))throw"Missing target node with id: ".concat(a);var i=u[o],l=u[a];function s(e){return"object"===Ns(e)?n(e):e}i.out.push(l)});var c=[];return function e(t){for(var r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:[],o=arguments.length>2&&void 0!==arguments[2]?arguments[2]:0,a=function(){var a=t[i];if(-1!==r.indexOf(a)){var l=[].concat(zs(r.slice(r.indexOf(a))),[a]).map(function(e){return n(e.data)});return c.some(function(e){return e.length===l.length&&e.every(function(e,n){return e===l[n]})})||(c.push(l),s(l)),1}o>a.depth&&(a.depth=o,e(a.out,[].concat(zs(r),[a]),o+(a.skip?0:1)))},i=0,l=t.length;i<l;i++)a()}(Object.values(u)),Object.assign.apply(Object,[{}].concat(zs(Object.entries(u).filter(function(e){return!Ss(e,2)[1].skip}).map(function(e){var n=Ss(e,2);return ws({},n[0],n[1].depth)}))))}(e.graphData,function(n){return n[e.nodeId]},{nodeFilter:e.dagNodeFilter,onLoopError:e.onDagError||void 0}),o=Math.max.apply(Math,zs(Object.values(r||[]))),a=e.dagLevelDistance||e.graphData.nodes.length/(o||1)*2*(-1!==["radialin","radialout"].indexOf(e.dagMode)?.7:1);if(["lr","rl","td","bu"].includes(n.dagMode)){var i=["lr","rl"].includes(n.dagMode)?"fx":"fy";e.graphData.nodes.filter(e.dagNodeFilter).forEach(function(e){return delete e[i]})}if(["lr","rl","td","bu"].includes(e.dagMode)){var l=["rl","bu"].includes(e.dagMode),s=["lr","rl"].includes(e.dagMode)?"fx":"fy";e.graphData.nodes.filter(e.dagNodeFilter).forEach(function(n){return n[s]=function(n){return(r[n[e.nodeId]]-o/2)*a*(l?-1:1)}(n)})}e.forceLayout.force("dagRadial",-1!==["radialin","radialout"].indexOf(e.dagMode)?function(e,n,t,r){var o,a,i,l,s=ul(.1);function u(e){for(var s=0,u=o.length;s<u;++s){var c=o[s],d=c.x-n||1e-6,f=(c.y||0)-t||1e-6,h=(c.z||0)-r||1e-6,p=Math.sqrt(d*d+f*f+h*h),m=(l[s]-p)*i[s]*e/p;c.vx+=d*m,a>1&&(c.vy+=f*m),a>2&&(c.vz+=h*m)}}function c(){if(o){var n,t=o.length;for(i=new Array(t),l=new Array(t),n=0;n<t;++n)l[n]=+e(o[n],n,o),i[n]=isNaN(l[n])?0:+s(o[n],n,o)}}return"function"!=typeof e&&(e=ul(+e)),null==n&&(n=0),null==t&&(t=0),null==r&&(r=0),u.initialize=function(e,...n){o=e,a=n.find(e=>[1,2,3].includes(e))||2,c()},u.strength=function(e){return arguments.length?(s="function"==typeof e?e:ul(+e),c(),u):s},u.radius=function(n){return arguments.length?(e="function"==typeof n?n:ul(+n),c(),u):e},u.x=function(e){return arguments.length?(n=+e,u):n},u.y=function(e){return arguments.length?(t=+e,u):t},u.z=function(e){return arguments.length?(r=+e,u):r},u}(function(n){var t=r[n[e.nodeId]]||-1;return("radialin"===e.dagMode?o-t:t)*a}).strength(function(n){return e.dagNodeFilter(n)?1:0}):null);for(var u=0;u<e.warmupTicks&&!(e.d3AlphaMin>0&&e.forceLayout.alpha()<e.d3AlphaMin);u++)e.forceLayout.tick();this.resetCountdown(),e.onFinishUpdate()}});function Is(e,n){var t=e instanceof Array?e:[e],r=new n;return r._destructor&&r._destructor(),{linkProp:function(e){return{default:r[e](),onChange:function(n,r){t.forEach(function(t){return r[t][e](n)})},triggerUpdate:!1}},linkMethod:function(e){return function(n){for(var r=arguments.length,o=new Array(r>1?r-1:0),a=1;a<r;a++)o[a-1]=arguments[a];var i=[];return t.forEach(function(t){var r=n[t],a=r[e].apply(r,o);a!==r&&i.push(a)}),i.length?i[0]:this}}}}var Ls=Is("forceGraph",Rs),Ds=Is(["forceGraph","shadowGraph"],Rs),Fs=Object.assign.apply(Object,zs(["nodeColor","nodeAutoColorBy","nodeCanvasObject","nodeCanvasObjectMode","linkColor","linkAutoColorBy","linkLineDash","linkWidth","linkCanvasObject","linkCanvasObjectMode","linkDirectionalArrowLength","linkDirectionalArrowColor","linkDirectionalArrowRelPos","linkDirectionalParticles","linkDirectionalParticleSpeed","linkDirectionalParticleOffset","linkDirectionalParticleWidth","linkDirectionalParticleColor","linkDirectionalParticleCanvasObject","dagMode","dagLevelDistance","dagNodeFilter","onDagError","d3AlphaMin","d3AlphaDecay","d3VelocityDecay","warmupTicks","cooldownTicks","cooldownTime","onEngineTick","onEngineStop"].map(function(e){return ws({},e,Ls.linkProp(e))})).concat(zs(["nodeRelSize","nodeId","nodeVal","nodeVisibility","linkSource","linkTarget","linkVisibility","linkCurvature"].map(function(e){return ws({},e,Ds.linkProp(e))})))),Us=Object.assign.apply(Object,zs(["d3Force","d3ReheatSimulation","emitParticle"].map(function(e){return ws({},e,Ls.linkMethod(e))})));function $s(e){if(e.canvas){var n=e.canvas.width,t=e.canvas.height;300===n&&150===t&&(n=t=0);var r=window.devicePixelRatio;n/=r,t/=r,[e.canvas,e.shadowCanvas].forEach(function(o){o.style.width="".concat(e.width,"px"),o.style.height="".concat(e.height,"px"),o.width=e.width*r,o.height=e.height*r,n||t||o.getContext("2d").scale(r,r)});var o=go(e.canvas).k;e.zoom.translateBy(e.zoom.__baseElem,(e.width-n)/2/o,(e.height-t)/2/o),e.needsRedraw=!0}}function qs(e){var n=window.devicePixelRatio;e.setTransform(n,0,0,n,0,0)}function Hs(e,n,t){e.save(),qs(e),e.clearRect(0,0,n,t),e.restore()}var Ws=ma({props:Bs({width:{default:window.innerWidth,onChange:function(e,n){return $s(n)},triggerUpdate:!1},height:{default:window.innerHeight,onChange:function(e,n){return $s(n)},triggerUpdate:!1},graphData:{default:{nodes:[],links:[]},onChange:function(e,n){[e.nodes,e.links].every(function(e){return(e||[]).every(function(e){return!e.hasOwnProperty("__indexColor")})})&&n.colorTracker.reset(),[{type:"Node",objs:e.nodes},{type:"Link",objs:e.links}].forEach(function(e){var t=e.type;e.objs.filter(function(e){if(!e.hasOwnProperty("__indexColor"))return!0;var t=n.colorTracker.lookup(e.__indexColor);return!t||!t.hasOwnProperty("d")||t.d!==e}).forEach(function(e){e.__indexColor=n.colorTracker.register({type:t,d:e})})}),n.forceGraph.graphData(e),n.shadowGraph.graphData(e)},triggerUpdate:!1},backgroundColor:{onChange:function(e,n){n.canvas&&e&&(n.canvas.style.background=e)},triggerUpdate:!1},nodeLabel:{default:"name",triggerUpdate:!1},nodePointerAreaPaint:{onChange:function(e,n){n.shadowGraph.nodeCanvasObject(e?function(n,t,r){return e(n,n.__indexColor,t,r)}:null),n.flushShadowCanvas&&n.flushShadowCanvas()},triggerUpdate:!1},linkPointerAreaPaint:{onChange:function(e,n){n.shadowGraph.linkCanvasObject(e?function(n,t,r){return e(n,n.__indexColor,t,r)}:null),n.flushShadowCanvas&&n.flushShadowCanvas()},triggerUpdate:!1},linkLabel:{default:"name",triggerUpdate:!1},linkHoverPrecision:{default:4,triggerUpdate:!1},minZoom:{default:.01,onChange:function(e,n){n.zoom.scaleExtent([e,n.zoom.scaleExtent()[1]])},triggerUpdate:!1},maxZoom:{default:1e3,onChange:function(e,n){n.zoom.scaleExtent([n.zoom.scaleExtent()[0],e])},triggerUpdate:!1},enableNodeDrag:{default:!0,triggerUpdate:!1},enableZoomInteraction:{default:!0,triggerUpdate:!1},enablePanInteraction:{default:!0,triggerUpdate:!1},enableZoomPanInteraction:{default:!0,triggerUpdate:!1},enablePointerInteraction:{default:!0,onChange:function(e,n){n.hoverObj=null},triggerUpdate:!1},autoPauseRedraw:{default:!0,triggerUpdate:!1},onNodeDrag:{default:function(){},triggerUpdate:!1},onNodeDragEnd:{default:function(){},triggerUpdate:!1},onNodeClick:{triggerUpdate:!1},onNodeRightClick:{triggerUpdate:!1},onNodeHover:{triggerUpdate:!1},onLinkClick:{triggerUpdate:!1},onLinkRightClick:{triggerUpdate:!1},onLinkHover:{triggerUpdate:!1},onBackgroundClick:{triggerUpdate:!1},onBackgroundRightClick:{triggerUpdate:!1},onZoom:{triggerUpdate:!1},onZoomEnd:{triggerUpdate:!1},onRenderFramePre:{triggerUpdate:!1},onRenderFramePost:{triggerUpdate:!1}},Fs),aliases:{stopAnimation:"pauseAnimation"},methods:Bs({graph2ScreenCoords:function(e,n,t){var r=go(e.canvas);return{x:n*r.k+r.x,y:t*r.k+r.y}},screen2GraphCoords:function(e,n,t){var r=go(e.canvas);return{x:(n-r.x)/r.k,y:(t-r.y)/r.k}},centerAt:function(e,n,t,r){if(!e.canvas)return null;if(void 0!==n||void 0!==t){var o=Object.assign({},void 0!==n?{x:n}:{},void 0!==t?{y:t}:{});return r?e.tweenGroup.add(new ca(a()).to(o,r).easing(oa.Quadratic.Out).onUpdate(i).start()):i(o),this}return a();function a(){var n=go(e.canvas);return{x:(e.width/2-n.x)/n.k,y:(e.height/2-n.y)/n.k}}function i(n){var t=n.x,r=n.y;e.zoom.translateTo(e.zoom.__baseElem,void 0===t?a().x:t,void 0===r?a().y:r),e.needsRedraw=!0}},zoom:function(e,n,t){return e.canvas?void 0!==n?(t?e.tweenGroup.add(new ca({k:r()}).to({k:n},t).easing(oa.Quadratic.Out).onUpdate(function(e){return o(e.k)}).start()):o(n),this):r():null;function r(){return go(e.canvas).k}function o(n){e.zoom.scaleTo(e.zoom.__baseElem,n),e.needsRedraw=!0}},zoomToFit:function(e){for(var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,t=arguments.length>2&&void 0!==arguments[2]?arguments[2]:10,r=arguments.length,o=new Array(r>3?r-3:0),a=3;a<r;a++)o[a-3]=arguments[a];var i=this.getGraphBbox.apply(this,o);if(i){var l={x:(i.x[0]+i.x[1])/2,y:(i.y[0]+i.y[1])/2},s=Math.max(1e-12,Math.min(1e12,(e.width-2*t)/(i.x[1]-i.x[0]),(e.height-2*t)/(i.y[1]-i.y[0])));this.centerAt(l.x,l.y,n),this.zoom(s,n)}return this},getGraphBbox:function(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:function(){return!0},t=ga(e.nodeVal),r=function(n){return Math.sqrt(Math.max(0,t(n)||1))*e.nodeRelSize},o=e.graphData.nodes.filter(n).map(function(e){return{x:e.x,y:e.y,r:r(e)}});return o.length?{x:[Po(o,function(e){return e.x-e.r}),To(o,function(e){return e.x+e.r})],y:[Po(o,function(e){return e.y-e.r}),To(o,function(e){return e.y+e.r})]}:null},pauseAnimation:function(e){return e.animationFrameRequestId&&(cancelAnimationFrame(e.animationFrameRequestId),e.animationFrameRequestId=null),this},resumeAnimation:function(e){return e.animationFrameRequestId||this._animationCycle(),this},_destructor:function(){this.pauseAnimation(),this.graphData({nodes:[],links:[]})}},Us),stateInit:function(){return{lastSetZoom:1,zoom:_o(),forceGraph:new Rs,shadowGraph:(new Rs).cooldownTicks(0).nodeColor("__indexColor").linkColor("__indexColor").isShadow(!0),colorTracker:new bi,tweenGroup:new ia}},init:function(e,n){var t=this;e.innerHTML="";var r=document.createElement("div");r.classList.add("force-graph-container"),r.style.position="relative",e.appendChild(r),n.canvas=document.createElement("canvas"),n.backgroundColor&&(n.canvas.style.background=n.backgroundColor),r.appendChild(n.canvas),n.shadowCanvas=document.createElement("canvas");var o=n.canvas.getContext("2d"),a=n.shadowCanvas.getContext("2d",{willReadFrequently:!0}),i={x:-1e12,y:-1e12},l=function(){var e=null,t=window.devicePixelRatio,r=i.x>0&&i.y>0?a.getImageData(i.x*t,i.y*t,1,1):null;return r&&(e=n.colorTracker.lookup(r.data)),e};ot(n.canvas).call(function(){var e,n,t,r,o=So,a=zo,i=No,l=jo,s={},u=ct("start","drag","end"),c=0,d=0;function f(e){e.on("mousedown.drag",h).filter(l).on("touchstart.drag",g).on("touchmove.drag",A,dt).on("touchend.drag touchcancel.drag",y).style("touch-action","none").style("-webkit-tap-highlight-color","rgba(0,0,0,0)")}function h(i,l){if(!r&&o.call(this,i,l)){var s=v(this,a.call(this,i,l),i,l,"mouse");s&&(ot(i.view).on("mousemove.drag",p,ft).on("mouseup.drag",m,ft),mt(i.view),ht(i),t=!1,e=i.clientX,n=i.clientY,s("start",i))}}function p(r){if(pt(r),!t){var o=r.clientX-e,a=r.clientY-n;t=o*o+a*a>d}s.mouse("drag",r)}function m(e){ot(e.view).on("mousemove.drag mouseup.drag",null),gt(e.view,t),pt(e),s.mouse("end",e)}function g(e,n){if(o.call(this,e,n)){var t,r,i=e.changedTouches,l=a.call(this,e,n),s=i.length;for(t=0;t<s;++t)(r=v(this,l,e,n,i[t].identifier,i[t]))&&(ht(e),r("start",e,i[t]))}}function A(e){var n,t,r=e.changedTouches,o=r.length;for(n=0;n<o;++n)(t=s[r[n].identifier])&&(pt(e),t("drag",e,r[n]))}function y(e){var n,t,o=e.changedTouches,a=o.length;for(r&&clearTimeout(r),r=setTimeout(function(){r=null},500),n=0;n<a;++n)(t=s[o[n].identifier])&&(ht(e),t("end",e,o[n]))}function v(e,n,t,r,o,a){var l,d,h,p=u.copy(),m=vt(a||t,n);if(null!=(h=i.call(e,new Bo("beforestart",{sourceEvent:t,target:f,identifier:o,active:c,x:m[0],y:m[1],dx:0,dy:0,dispatch:p}),r)))return l=h.x-m[0]||0,d=h.y-m[1]||0,function t(a,i,u){var g,A=m;switch(a){case"start":s[o]=t,g=c++;break;case"end":delete s[o],--c;case"drag":m=vt(u||i,n),g=c}p.call(a,e,new Bo(a,{sourceEvent:i,subject:h,target:f,identifier:o,active:g,x:m[0]+l,y:m[1]+d,dx:m[0]-A[0],dy:m[1]-A[1],dispatch:p}),r)}}return f.filter=function(e){return arguments.length?(o="function"==typeof e?e:ko(!!e),f):o},f.container=function(e){return arguments.length?(a="function"==typeof e?e:ko(e),f):a},f.subject=function(e){return arguments.length?(i="function"==typeof e?e:ko(e),f):i},f.touchable=function(e){return arguments.length?(l="function"==typeof e?e:ko(!!e),f):l},f.on=function(){var e=u.on.apply(u,arguments);return e===u?f:e},f.clickDistance=function(e){return arguments.length?(d=(e=+e)*e,f):Math.sqrt(d)},f}().subject(function(){if(!n.enableNodeDrag)return null;var e=l();return e&&"Node"===e.type?e.d:null}).on("start",function(e){var t=e.subject;t.__initialDragPos={x:t.x,y:t.y,fx:t.fx,fy:t.fy},e.active||(t.fx=t.x,t.fy=t.y),n.canvas.classList.add("grabbable")}).on("drag",function(e){var t=e.subject,r=t.__initialDragPos,o=e,a=go(n.canvas).k,i={x:r.x+(o.x-r.x)/a-t.x,y:r.y+(o.y-r.y)/a-t.y};["x","y"].forEach(function(e){return t["f".concat(e)]=t[e]=r[e]+(o[e]-r[e])/a}),!t.__dragged&&5>=Math.sqrt(function(e){let n=0;for(let t of e)(t=+t)&&(n+=t);return n}(["x","y"].map(function(n){return Math.pow(e[n]-r[n],2)})))||(n.forceGraph.d3AlphaTarget(.3).resetCountdown(),n.isPointerDragging=!0,t.__dragged=!0,n.onNodeDrag(t,i))}).on("end",function(e){var t=e.subject,r=t.__initialDragPos,o={x:t.x-r.x,y:t.y-r.y};void 0===r.fx&&(t.fx=void 0),void 0===r.fy&&(t.fy=void 0),delete t.__initialDragPos,n.forceGraph.d3AlphaTarget()&&n.forceGraph.d3AlphaTarget(0).resetCountdown(),n.canvas.classList.remove("grabbable"),n.isPointerDragging=!1,t.__dragged&&(delete t.__dragged,n.onNodeDragEnd(t,o))})),n.zoom(n.zoom.__baseElem=ot(n.canvas)),n.zoom.__baseElem.on("dblclick.zoom",null),n.zoom.filter(function(e){return!e.button&&n.enableZoomPanInteraction&&("wheel"!==e.type||ga(n.enableZoomInteraction)(e))&&("wheel"===e.type||ga(n.enablePanInteraction)(e))}).on("zoom",function(e){var r=e.transform;[o,a].forEach(function(e){qs(e),e.translate(r.x,r.y),e.scale(r.k,r.k)}),n.isPointerDragging=!0,n.onZoom&&n.onZoom(Bs(Bs({},r),t.centerAt())),n.needsRedraw=!0}).on("end",function(e){n.isPointerDragging=!1,n.onZoomEnd&&n.onZoomEnd(Bs(Bs({},e.transform),t.centerAt()))}),$s(n),n.forceGraph.onNeedsRedraw(function(){return n.needsRedraw=!0}).onFinishUpdate(function(){go(n.canvas).k===n.lastSetZoom&&n.graphData.nodes.length&&(n.zoom.scaleTo(n.zoom.__baseElem,n.lastSetZoom=4/Math.cbrt(n.graphData.nodes.length)),n.needsRedraw=!0)}),n.tooltip=new nl(r),["pointermove","pointerdown"].forEach(function(e){return r.addEventListener(e,function(t){"pointerdown"===e&&(n.isPointerPressed=!0,n.pointerDownEvent=t),!n.isPointerDragging&&"pointermove"===t.type&&n.onBackgroundClick&&(t.pressure>0||n.isPointerPressed)&&("mouse"===t.pointerType||void 0===t.movementX||[t.movementX,t.movementY].some(function(e){return Math.abs(e)>1}))&&(n.isPointerDragging=!0);var o,a,l,s=(o=r.getBoundingClientRect(),a=window.pageXOffset||document.documentElement.scrollLeft,l=window.pageYOffset||document.documentElement.scrollTop,{top:o.top+l,left:o.left+a});i.x=t.pageX-s.left,i.y=t.pageY-s.top},{passive:!0})}),r.addEventListener("pointerup",function(e){if(n.isPointerPressed)if(n.isPointerPressed=!1,n.isPointerDragging)n.isPointerDragging=!1;else{var t=[e,n.pointerDownEvent];requestAnimationFrame(function(){if(0===e.button)if(n.hoverObj){var r=n["on".concat(n.hoverObj.type,"Click")];r&&r.apply(void 0,[n.hoverObj.d].concat(t))}else n.onBackgroundClick&&n.onBackgroundClick.apply(n,t);if(2===e.button)if(n.hoverObj){var o=n["on".concat(n.hoverObj.type,"RightClick")];o&&o.apply(void 0,[n.hoverObj.d].concat(t))}else n.onBackgroundRightClick&&n.onBackgroundRightClick.apply(n,t)})}},{passive:!0}),r.addEventListener("contextmenu",function(e){return!(n.onBackgroundRightClick||n.onNodeRightClick||n.onLinkRightClick)||(e.preventDefault(),!1)}),n.forceGraph(o),n.shadowGraph(a);var s=function(e,n,t){var r=!0,o=!0;if("function"!=typeof e)throw new TypeError("Expected a function");return Mo(t)&&(r="leading"in t?!!t.leading:r,o="trailing"in t?!!t.trailing:o),ra(e,n,{leading:r,maxWait:n,trailing:o})}(function(){Hs(a,n.width,n.height),n.shadowGraph.linkWidth(function(e){return ga(n.linkWidth)(e)+n.linkHoverPrecision});var e=go(n.canvas);n.shadowGraph.globalScale(e.k).tickFrame()},800);n.flushShadowCanvas=s.flush,(this._animationCycle=function e(){var t=!n.autoPauseRedraw||!!n.needsRedraw||n.forceGraph.isEngineRunning()||n.graphData.links.some(function(e){return e.__photons&&e.__photons.length});if(n.needsRedraw=!1,n.enablePointerInteraction){var r=n.isPointerDragging?null:l();if(r!==n.hoverObj){var a=n.hoverObj,i=a?a.type:null,u=r?r.type:null;if(i&&i!==u){var c=n["on".concat(i,"Hover")];c&&c(null,a.d)}if(u){var d=n["on".concat(u,"Hover")];d&&d(r.d,i===u?a.d:null)}n.tooltip.content(r&&ga(n["".concat(r.type.toLowerCase(),"Label")])(r.d)||null),n.canvas.classList[r&&n["on".concat(u,"Click")]||!r&&n.onBackgroundClick?"add":"remove"]("clickable"),n.hoverObj=r}t&&s()}if(t){Hs(o,n.width,n.height);var f=go(n.canvas).k;n.onRenderFramePre&&n.onRenderFramePre(o,f),n.forceGraph.globalScale(f).tickFrame(),n.onRenderFramePost&&n.onRenderFramePost(o,f)}n.tweenGroup.update(),n.animationFrameRequestId=requestAnimationFrame(e)})()},update:function(e){}}),Ys=r(556);const Vs={width:Ys.number,height:Ys.number,graphData:Ys.shape({nodes:Ys.arrayOf(Ys.object).isRequired,links:Ys.arrayOf(Ys.object).isRequired}),backgroundColor:Ys.string,nodeRelSize:Ys.number,nodeId:Ys.string,nodeLabel:Ys.oneOfType([Ys.string,Ys.func]),nodeVal:Ys.oneOfType([Ys.number,Ys.string,Ys.func]),nodeVisibility:Ys.oneOfType([Ys.bool,Ys.string,Ys.func]),nodeColor:Ys.oneOfType([Ys.string,Ys.func]),nodeAutoColorBy:Ys.oneOfType([Ys.string,Ys.func]),onNodeHover:Ys.func,onNodeClick:Ys.func,linkSource:Ys.string,linkTarget:Ys.string,linkLabel:Ys.oneOfType([Ys.string,Ys.func]),linkVisibility:Ys.oneOfType([Ys.bool,Ys.string,Ys.func]),linkColor:Ys.oneOfType([Ys.string,Ys.func]),linkAutoColorBy:Ys.oneOfType([Ys.string,Ys.func]),linkWidth:Ys.oneOfType([Ys.number,Ys.string,Ys.func]),linkCurvature:Ys.oneOfType([Ys.number,Ys.string,Ys.func]),linkDirectionalArrowLength:Ys.oneOfType([Ys.number,Ys.string,Ys.func]),linkDirectionalArrowColor:Ys.oneOfType([Ys.string,Ys.func]),linkDirectionalArrowRelPos:Ys.oneOfType([Ys.number,Ys.string,Ys.func]),linkDirectionalParticles:Ys.oneOfType([Ys.number,Ys.string,Ys.func]),linkDirectionalParticleSpeed:Ys.oneOfType([Ys.number,Ys.string,Ys.func]),linkDirectionalParticleOffset:Ys.oneOfType([Ys.number,Ys.string,Ys.func]),linkDirectionalParticleWidth:Ys.oneOfType([Ys.number,Ys.string,Ys.func]),linkDirectionalParticleColor:Ys.oneOfType([Ys.string,Ys.func]),onLinkHover:Ys.func,onLinkClick:Ys.func,dagMode:Ys.oneOf(["td","bu","lr","rl","zin","zout","radialin","radialout"]),dagLevelDistance:Ys.number,dagNodeFilter:Ys.func,onDagError:Ys.func,d3AlphaMin:Ys.number,d3AlphaDecay:Ys.number,d3VelocityDecay:Ys.number,warmupTicks:Ys.number,cooldownTicks:Ys.number,cooldownTime:Ys.number,onEngineTick:Ys.func,onEngineStop:Ys.func,getGraphBbox:Ys.func},Xs={zoomToFit:Ys.func,onNodeRightClick:Ys.func,onNodeDrag:Ys.func,onNodeDragEnd:Ys.func,onLinkRightClick:Ys.func,linkHoverPrecision:Ys.number,onBackgroundClick:Ys.func,onBackgroundRightClick:Ys.func,enablePointerInteraction:Ys.bool,enableNodeDrag:Ys.bool},Qs={showNavInfo:Ys.bool,nodeOpacity:Ys.number,nodeResolution:Ys.number,nodeThreeObject:Ys.oneOfType([Ys.object,Ys.string,Ys.func]),nodeThreeObjectExtend:Ys.oneOfType([Ys.bool,Ys.string,Ys.func]),nodePositionUpdate:Ys.func,linkOpacity:Ys.number,linkResolution:Ys.number,linkCurveRotation:Ys.oneOfType([Ys.number,Ys.string,Ys.func]),linkMaterial:Ys.oneOfType([Ys.object,Ys.string,Ys.func]),linkThreeObject:Ys.oneOfType([Ys.object,Ys.string,Ys.func]),linkThreeObjectExtend:Ys.oneOfType([Ys.bool,Ys.string,Ys.func]),linkPositionUpdate:Ys.func,linkDirectionalArrowResolution:Ys.number,linkDirectionalParticleResolution:Ys.number,linkDirectionalParticleThreeObject:Ys.oneOfType([Ys.object,Ys.string,Ys.func]),forceEngine:Ys.oneOf(["d3","ngraph"]),ngraphPhysics:Ys.object,numDimensions:Ys.oneOf([1,2,3])},Gs=Object.assign({},Vs,Xs,{linkLineDash:Ys.oneOfType([Ys.arrayOf(Ys.number),Ys.string,Ys.func]),nodeCanvasObjectMode:Ys.oneOfType([Ys.string,Ys.func]),nodeCanvasObject:Ys.func,nodePointerAreaPaint:Ys.func,linkCanvasObjectMode:Ys.oneOfType([Ys.string,Ys.func]),linkCanvasObject:Ys.func,linkPointerAreaPaint:Ys.func,linkDirectionalParticleCanvasObject:Ys.func,autoPauseRedraw:Ys.bool,minZoom:Ys.number,maxZoom:Ys.number,enableZoomInteraction:Ys.oneOfType([Ys.bool,Ys.func]),enablePanInteraction:Ys.oneOfType([Ys.bool,Ys.func]),onZoom:Ys.func,onZoomEnd:Ys.func,onRenderFramePre:Ys.func,onRenderFramePost:Ys.func});Object.assign({},Vs,Xs,Qs,{enableNavigationControls:Ys.bool,controlType:Ys.oneOf(["trackball","orbit","fly"]),rendererConfig:Ys.object,extraRenderers:Ys.arrayOf(Ys.shape({render:Ys.func.isRequired}))}),Object.assign({},Vs,Qs,{nodeDesc:Ys.oneOfType([Ys.string,Ys.func]),linkDesc:Ys.oneOfType([Ys.string,Ys.func])}),Object.assign({},Vs,Qs,{markerAttrs:Ys.object,yOffset:Ys.number,glScale:Ys.number});const Ks=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=t.wrapperElementType,o=void 0===r?"div":r,a=t.nodeMapper,i=void 0===a?function(e){return e}:a,l=t.methodNames,s=void 0===l?[]:l,u=t.initPropNames,c=void 0===u?[]:u;return(0,n.forwardRef)(function(t,r){var a=(0,n.useRef)(),l=(0,n.useMemo)(function(){var n=Object.fromEntries(c.filter(function(e){return t.hasOwnProperty(e)}).map(function(e){return[e,t[e]]}));return e(n)},[]);He(function(){l(i(a.current))},n.useLayoutEffect),He(function(){return l._destructor instanceof Function?l._destructor:void 0});var u,d,f,h,p=(0,n.useCallback)(function(e){for(var n=arguments.length,t=new Array(n>1?n-1:0),r=1;r<n;r++)t[r-1]=arguments[r];return l[e]instanceof Function?l[e].apply(l,t):void 0},[l]),m=(0,n.useRef)({});return Object.keys((u=t,d=[].concat($e(s),$e(c)),f=new Set(d),Object.assign.apply(Object,[{}].concat((h=Object.entries(u).filter(function(e){var n=Le(e,1)[0];return!f.has(n)}).map(function(e){var n=Le(e,2);return function(e,n,t){return(n=function(e){var n=function(e){if("object"!=typeof e||null===e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var t=n.call(e,"string");if("object"!=typeof t)return t;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"==typeof n?n:String(n)}(n))in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}({},n[0],n[1])}),function(e){if(Array.isArray(e))return Fe(e)}(h)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(h)||De(h)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()))))).filter(function(e){return m.current[e]!==t[e]}).forEach(function(e){return p(e,t[e])}),m.current=t,(0,n.useImperativeHandle)(r,function(){return Object.fromEntries(s.map(function(e){return[e,function(){for(var n=arguments.length,t=new Array(n),r=0;r<n;r++)t[r]=arguments[r];return p.apply(void 0,[e].concat(t))}]}))},[p]),n.createElement(o,{ref:a})})}(Ws,{methodNames:["emitParticle","d3Force","d3ReheatSimulation","stopAnimation","pauseAnimation","resumeAnimation","centerAt","zoom","zoomToFit","getGraphBbox","screen2GraphCoords","graph2ScreenCoords"]});Ks.displayName="ForceGraph2D",Ks.propTypes=Gs;const Zs=e=>e.replace(/([a-z0-9])([A-Z])/g,"$1-$2").toLowerCase(),Js=e=>{const n=(e=>e.replace(/^([A-Z])|[\s-_]+(\w)/g,(e,n,t)=>t?t.toUpperCase():n.toLowerCase()))(e);return n.charAt(0).toUpperCase()+n.slice(1)},eu=(...e)=>e.filter((e,n,t)=>Boolean(e)&&""!==e.trim()&&t.indexOf(e)===n).join(" ").trim(),nu=e=>{for(const n in e)if(n.startsWith("aria-")||"role"===n||"title"===n)return!0};var tu={xmlns:"http://www.w3.org/2000/svg",width:24,height:24,viewBox:"0 0 24 24",fill:"none",stroke:"currentColor",strokeWidth:2,strokeLinecap:"round",strokeLinejoin:"round"};const ru=(0,n.forwardRef)(({color:e="currentColor",size:t=24,strokeWidth:r=2,absoluteStrokeWidth:o,className:a="",children:i,iconNode:l,...s},u)=>(0,n.createElement)("svg",{ref:u,...tu,width:t,height:t,stroke:e,strokeWidth:o?24*Number(r)/Number(t):r,className:eu("lucide",a),...!i&&!nu(s)&&{"aria-hidden":"true"},...s},[...l.map(([e,t])=>(0,n.createElement)(e,t)),...Array.isArray(i)?i:[i]])),ou=(e,t)=>{const r=(0,n.forwardRef)(({className:r,...o},a)=>(0,n.createElement)(ru,{ref:a,iconNode:t,className:eu(`lucide-${Zs(Js(e))}`,`lucide-${e}`,r),...o}));return r.displayName=Js(e),r},au=ou("message-circle",[["path",{d:"M2.992 16.342a2 2 0 0 1 .094 1.167l-1.065 3.29a1 1 0 0 0 1.236 1.168l3.413-.998a2 2 0 0 1 1.099.092 10 10 0 1 0-4.777-4.719",key:"1sd12s"}]]),iu=ou("x",[["path",{d:"M18 6 6 18",key:"1bl5f8"}],["path",{d:"m6 6 12 12",key:"d8bk6v"}]]),lu=ou("plus",[["path",{d:"M5 12h14",key:"1ays0h"}],["path",{d:"M12 5v14",key:"s699le"}]]),su=ou("send",[["path",{d:"M14.536 21.686a.5.5 0 0 0 .937-.024l6.5-19a.496.496 0 0 0-.635-.635l-19 6.5a.5.5 0 0 0-.024.937l7.93 3.18a2 2 0 0 1 1.112 1.11z",key:"1ffxy3"}],["path",{d:"m21.854 2.147-10.94 10.939",key:"12cjpa"}]]),uu="https://api.openai.com/v1",cu="https://generativelanguage.googleapis.com/v1beta",du={async chat(e,n,t="gpt-3.5-turbo"){try{const r=await fetch(`${uu}/chat/completions`,{method:"POST",headers:{"Content-Type":"application/json",Authorization:`Bearer ${n}`},body:JSON.stringify({model:t,messages:e,max_tokens:1e3,temperature:.7})});if(!r.ok)throw new Error(`OpenAI API error: ${r.status}`);const o=await r.json(),a=o.choices[0]?.message?.content||"";return{content:a,relatedTopics:hu(a),confidence:.8}}catch(e){throw console.error("OpenAI API error:",e),e}}},fu={async chat(e,n,t="gemini-pro"){try{const r=e.map(e=>({role:"user"===e.role?"user":"model",parts:[{text:e.content}]})),o=await fetch(`${cu}/models/${t}:generateContent?key=${n}`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({contents:r,generationConfig:{maxOutputTokens:1e3,temperature:.7}})});if(!o.ok)throw new Error(`Gemini API error: ${o.status}`);const a=await o.json(),i=a.candidates[0]?.content?.parts[0]?.text||"";return{content:i,relatedTopics:hu(i),confidence:.8}}catch(e){throw console.error("Gemini API error:",e),e}}};function hu(e){const n=["related to","connected to","similar to","see also","topics:","concepts:"],t=[],r=e.split("\n");for(const e of r)if(n.some(n=>e.toLowerCase().includes(n))){const n=e.match(/[A-Z][a-zA-Z\s]+(?:,|\.|$)/g);n&&t.push(...n.map(e=>e.replace(/[,.]/g,"").trim()))}if(0===t.length){const n=e.match(/[A-Z][a-zA-Z]+/g)||[];t.push(...n.slice(0,5))}return t.filter(e=>e.length>2).slice(0,5)}const pu={async chat(e,n){switch(e.name){case"openai":return du.chat(n,e.apiKey,e.model);case"gemini":return fu.chat(n,e.apiKey,e.model);default:throw new Error(`Unsupported AI service: ${e.name}`)}}},mu=(e,n)=>{if(!n||0===n.trim().length)return!1;switch(e){case"openai":return n.startsWith("sk-")&&n.length>20;case"gemini":return n.length>20;default:return!1}},gu=()=>Math.random().toString(36).substr(2,9)+Date.now().toString(36),Au=e=>{const n=new Date,t=Math.floor((n.getTime()-e.getTime())/1e3);return t<60?"Just now":t<3600?`${Math.floor(t/60)}m ago`:t<86400?`${Math.floor(t/3600)}h ago`:t<2592e3?`${Math.floor(t/86400)}d ago`:(e=>e.toLocaleDateString("en-US",{year:"numeric",month:"short",day:"numeric",hour:"2-digit",minute:"2-digit"}))(e)};var yu=r(72),vu=r.n(yu),bu=r(825),xu=r.n(bu),Eu=r(659),Cu=r.n(Eu),wu=r(56),_u=r.n(wu),ku=r(159),Bu=r.n(ku),Su=r(113),zu=r.n(Su),Nu=r(374),ju={};ju.styleTagTransform=zu(),ju.setAttributes=_u(),ju.insert=Cu().bind(null,"head"),ju.domAPI=xu(),ju.insertStyleElement=Bu(),vu()(Nu.A,ju),Nu.A&&Nu.A.locals&&Nu.A.locals;const Pu=({node:t,onClose:r,onChatSession:o,aiService:a,onAddRelatedNode:i})=>{const[l,s]=(0,n.useState)([]),[u,c]=(0,n.useState)(""),[d,f]=(0,n.useState)(!1),[h,p]=(0,n.useState)([]),[m,g]=(0,n.useState)(!1),A=(0,n.useRef)(null);(0,n.useEffect)(()=>{A.current?.scrollIntoView({behavior:"smooth"})},[l]);const y=async()=>{if(!u.trim()||!a||!a.isEnabled)return;const e={id:gu(),nodeId:t.id,role:"user",content:u.trim(),timestamp:new Date};s(n=>[...n,e]),c(""),f(!0);try{const n=[{role:"user",content:`You are an AI assistant helping explore the topic: "${t.label}". Provide informative responses and suggest related topics that could be connected to this subject.`},...l.map(e=>({role:e.role,content:e.content})),{role:"user",content:u.trim()}],r=await pu.chat(a,n),i={id:gu(),nodeId:t.id,role:"assistant",content:r.content,timestamp:new Date,relatedTopics:r.relatedTopics};s(e=>[...e,i]),p(r.relatedTopics),g(!0);const c={id:gu(),nodeId:t.id,messages:[...l,e,i],createdAt:new Date,updatedAt:new Date};o(c)}catch(e){console.error("AI chat error:",e);const n={id:gu(),nodeId:t.id,role:"assistant",content:"Sorry, I encountered an error. Please check your API key and try again.",timestamp:new Date};s(e=>[...e,n])}finally{f(!1)}},v=a&&a.isEnabled&&mu(a.name,a.apiKey);return(0,e.jsxs)("div",{className:"node-chat",children:[(0,e.jsxs)("div",{className:"chat-header",children:[(0,e.jsxs)("div",{className:"chat-node-info",children:[(0,e.jsx)(au,{size:20}),(0,e.jsx)("h3",{children:t.label})]}),(0,e.jsx)("button",{className:"close-button",onClick:r,children:(0,e.jsx)(iu,{size:20})})]}),(0,e.jsxs)("div",{className:"chat-messages",children:[0===l.length&&(0,e.jsxs)("div",{className:"welcome-message",children:[(0,e.jsx)(au,{size:48}),(0,e.jsxs)("h4",{children:['Start exploring "',t.label,'"']}),(0,e.jsx)("p",{children:"Ask me anything about this topic and I'll help you discover connections!"})]}),l.map(n=>(0,e.jsxs)("div",{className:`message ${n.role}`,children:[(0,e.jsx)("div",{className:"message-content",children:n.content}),(0,e.jsx)("div",{className:"message-timestamp",children:n.timestamp.toLocaleTimeString()})]},n.id)),d&&(0,e.jsx)("div",{className:"message assistant",children:(0,e.jsx)("div",{className:"message-content",children:(0,e.jsxs)("div",{className:"typing-indicator",children:[(0,e.jsx)("span",{}),(0,e.jsx)("span",{}),(0,e.jsx)("span",{})]})})}),(0,e.jsx)("div",{ref:A})]}),m&&h.length>0&&(0,e.jsxs)("div",{className:"related-topics",children:[(0,e.jsx)("h4",{children:"Related Topics:"}),(0,e.jsx)("div",{className:"topics-list",children:h.map((n,t)=>(0,e.jsxs)("button",{className:"topic-button",onClick:()=>(e=>{i(e),g(!1)})(n),children:[(0,e.jsx)(lu,{size:16}),n]},t))})]}),(0,e.jsx)("div",{className:"chat-input-section",children:v?(0,e.jsxs)("div",{className:"chat-input-container",children:[(0,e.jsx)("input",{type:"text",className:"chat-input",placeholder:"Ask about this topic...",value:u,onChange:e=>c(e.target.value),onKeyPress:e=>{"Enter"!==e.key||e.shiftKey||(e.preventDefault(),y())},disabled:d}),(0,e.jsx)("button",{className:"send-button",onClick:y,disabled:d||!u.trim(),children:(0,e.jsx)(su,{size:18})})]}):(0,e.jsx)("div",{className:"ai-not-configured",children:(0,e.jsx)("p",{children:"⚠️ AI service not configured. Please set up your API keys in Settings."})})})]})};var Tu=r(276),Mu={};Mu.styleTagTransform=zu(),Mu.setAttributes=_u(),Mu.insert=Cu().bind(null,"head"),Mu.domAPI=xu(),Mu.insertStyleElement=Bu(),vu()(Tu.A,Mu),Tu.A&&Tu.A.locals&&Tu.A.locals;const Ou=({graph:t,selectedNode:r,onGraphUpdate:o,onNodeSelect:a,onChatSession:i,aiServices:l,defaultService:s})=>{const[u,c]=(0,n.useState)(t),[d,f]=(0,n.useState)(!1),[h,p]=(0,n.useState)(""),m=(0,n.useRef)(null);(0,n.useEffect)(()=>{c(t)},[t]);const g=(0,n.useCallback)(e=>{const n=u.nodes.find(n=>n.id===e.id);n&&(a(n),f(!0),m.current&&(m.current.centerAt(e.x,e.y,1e3),m.current.zoom(2,1e3)))},[u.nodes,a]),A=(0,n.useCallback)((e,n)=>{c(n=>({...n,nodes:n.nodes.map(n=>n.id===e.id?{...n,x:e.x,y:e.y}:n)}))},[]),y=()=>{if(!h.trim())return;const e={id:gu(),label:h.trim(),x:800*Math.random()-400,y:600*Math.random()-300,color:`hsl(${360*Math.random()}, 70%, 50%)`,size:20},n={...u,nodes:[...u.nodes,e]};c(n),o(n),p("")};return(0,e.jsxs)("div",{className:"graph-viewer",children:[(0,e.jsxs)("div",{className:"graph-controls",children:[(0,e.jsxs)("div",{className:"add-node-section",children:[(0,e.jsx)("input",{type:"text",className:"input",placeholder:"Enter new topic/node name...",value:h,onChange:e=>p(e.target.value),onKeyPress:e=>"Enter"===e.key&&y()}),(0,e.jsx)("button",{className:"button",onClick:y,children:"Add Node"})]}),r&&(0,e.jsxs)("div",{className:"selected-node-info",children:[(0,e.jsxs)("h3",{children:["Selected: ",r.label]}),(0,e.jsx)("button",{className:"button secondary",onClick:()=>(e=>{const n={nodes:u.nodes.filter(n=>n.id!==e),edges:u.edges.filter(n=>n.source!==e&&n.target!==e)};c(n),o(n),r?.id===e&&(a(null),f(!1))})(r.id),children:"Remove Node"})]})]}),(0,e.jsx)("div",{className:"graph-container",children:(0,e.jsx)(Ks,{ref:m,graphData:{nodes:u.nodes,links:u.edges},nodeLabel:"label",nodeColor:"color",nodeRelSize:6,linkColor:()=>"#999",linkWidth:1,onNodeClick:g,onNodeDrag:A,cooldownTicks:100,nodeCanvasObject:(e,n,t)=>{const r=e.label,o=12/t;n.font=`${o}px Sans-Serif`;const a=[n.measureText(r).width,o].map(e=>e+.2*o);n.fillStyle="rgba(255, 255, 255, 0.8)",n.fillRect(e.x-a[0]/2,e.y-a[1]/2,...a),n.textAlign="center",n.textBaseline="middle",n.fillStyle=e.color,n.fillText(r,e.x,e.y)}})}),d&&r&&(0,e.jsx)("div",{className:"chat-overlay",children:(0,e.jsx)(Pu,{node:r,onClose:()=>{f(!1),a(null)},onChatSession:i,aiService:l.find(e=>e.isEnabled)||l.find(e=>e.name===s),onAddRelatedNode:e=>{const n={id:gu(),label:e,x:r.x+200*(Math.random()-.5),y:r.y+200*(Math.random()-.5),color:`hsl(${360*Math.random()}, 70%, 50%)`,size:20},t={...u,nodes:[...u.nodes,n],edges:[...u.edges,{id:gu(),source:r.id,target:n.id,strength:1}]};c(t),o(t)}})})]})},Ru=ou("search",[["path",{d:"m21 21-4.34-4.34",key:"14j7rj"}],["circle",{cx:"11",cy:"11",r:"8",key:"4ej97u"}]]),Iu=ou("hash",[["line",{x1:"4",x2:"20",y1:"9",y2:"9",key:"4lhtct"}],["line",{x1:"4",x2:"20",y1:"15",y2:"15",key:"vyu0kd"}],["line",{x1:"10",x2:"8",y1:"3",y2:"21",key:"1ggp8o"}],["line",{x1:"16",x2:"14",y1:"3",y2:"21",key:"weycgp"}]]),Lu=ou("clock",[["path",{d:"M12 6v6l4 2",key:"mmk7yg"}],["circle",{cx:"12",cy:"12",r:"10",key:"1mglay"}]]);var Du=r(548),Fu={};Fu.styleTagTransform=zu(),Fu.setAttributes=_u(),Fu.insert=Cu().bind(null,"head"),Fu.domAPI=xu(),Fu.insertStyleElement=Bu(),vu()(Du.A,Fu),Du.A&&Du.A.locals&&Du.A.locals;const Uu=({chatSessions:t,onChatSession:r})=>{const[o,a]=(0,n.useState)(""),[i,l]=(0,n.useState)(null),[s,u]=(0,n.useState)("all"),c=(0,n.useMemo)(()=>{const e=new Set;return t.forEach(n=>{n.nodeId&&e.add(n.nodeId)}),Array.from(e)},[t]),d=(0,n.useMemo)(()=>t.filter(e=>{const n=""===o||e.messages.some(e=>e.content.toLowerCase().includes(o.toLowerCase())),t="all"===s||e.nodeId===s;return n&&t}),[t,o,s]),f=e=>e||"Unknown Node",h=e=>{const n=e.messages[e.messages.length-1];return n?(t=n.content).length<=100?t:t.substr(0,100)+"...":"No messages";var t},p=e=>e.messages.length;return(0,e.jsxs)("div",{className:"chat-history",children:[(0,e.jsxs)("div",{className:"chat-history-header",children:[(0,e.jsx)("h2",{children:"💬 Chat History"}),(0,e.jsx)("p",{children:"Review your conversations and explore past discussions"})]}),(0,e.jsxs)("div",{className:"chat-history-controls",children:[(0,e.jsx)("div",{className:"search-section",children:(0,e.jsxs)("div",{className:"search-input-wrapper",children:[(0,e.jsx)(Ru,{size:20,className:"search-icon"}),(0,e.jsx)("input",{type:"text",className:"search-input",placeholder:"Search conversations...",value:o,onChange:e=>a(e.target.value)})]})}),(0,e.jsx)("div",{className:"filter-section",children:(0,e.jsxs)("select",{className:"filter-select",value:s,onChange:e=>u(e.target.value),children:[(0,e.jsx)("option",{value:"all",children:"All Nodes"}),c.map(n=>(0,e.jsx)("option",{value:n,children:f(n)},n))]})})]}),(0,e.jsxs)("div",{className:"chat-history-content",children:[(0,e.jsx)("div",{className:"sessions-list",children:0===d.length?(0,e.jsxs)("div",{className:"no-sessions",children:[(0,e.jsx)(au,{size:48}),(0,e.jsx)("h3",{children:"No conversations yet"}),(0,e.jsx)("p",{children:"Start chatting with nodes in the graph to see your history here!"})]}):d.map(n=>(0,e.jsxs)("div",{className:"session-item "+(i?.id===n.id?"selected":""),onClick:()=>(e=>{l(e)})(n),children:[(0,e.jsxs)("div",{className:"session-header",children:[(0,e.jsxs)("div",{className:"session-node",children:[(0,e.jsx)(Iu,{size:16}),(0,e.jsx)("span",{children:f(n.nodeId||"")})]}),(0,e.jsxs)("div",{className:"session-meta",children:[(0,e.jsxs)("span",{className:"message-count",children:[(0,e.jsx)(au,{size:14}),p(n)]}),(0,e.jsxs)("span",{className:"session-time",children:[(0,e.jsx)(Lu,{size:14}),Au(n.updatedAt)]})]})]}),(0,e.jsx)("div",{className:"session-preview",children:h(n)}),(0,e.jsxs)("div",{className:"session-actions",children:[(0,e.jsx)("button",{className:"button secondary small",onClick:e=>{e.stopPropagation(),r(n)},children:"Continue Chat"}),(0,e.jsx)("button",{className:"button secondary small danger",onClick:e=>{var t;e.stopPropagation(),t=n.id,console.log("Delete session:",t)},children:"Delete"})]})]},n.id))}),i&&(0,e.jsxs)("div",{className:"session-detail",children:[(0,e.jsxs)("div",{className:"session-detail-header",children:[(0,e.jsx)("h3",{children:"Conversation Details"}),(0,e.jsx)("button",{className:"close-detail",onClick:()=>l(null),children:"×"})]}),(0,e.jsxs)("div",{className:"session-detail-content",children:[(0,e.jsxs)("div",{className:"session-info",children:[(0,e.jsxs)("p",{children:[(0,e.jsx)("strong",{children:"Node:"})," ",f(i.nodeId||"")]}),(0,e.jsxs)("p",{children:[(0,e.jsx)("strong",{children:"Started:"})," ",i.createdAt.toLocaleString()]}),(0,e.jsxs)("p",{children:[(0,e.jsx)("strong",{children:"Last Updated:"})," ",i.updatedAt.toLocaleString()]}),(0,e.jsxs)("p",{children:[(0,e.jsx)("strong",{children:"Messages:"})," ",i.messages.length]})]}),(0,e.jsxs)("div",{className:"session-messages",children:[(0,e.jsx)("h4",{children:"Messages:"}),i.messages.map((n,t)=>(0,e.jsxs)("div",{className:`detail-message ${n.role}`,children:[(0,e.jsx)("div",{className:"message-role",children:"user"===n.role?"You":"AI"}),(0,e.jsx)("div",{className:"message-content",children:n.content}),(0,e.jsx)("div",{className:"message-time",children:n.timestamp.toLocaleTimeString()})]},t))]})]})]})]})]})},$u=ou("circle-check-big",[["path",{d:"M21.801 10A10 10 0 1 1 17 3.335",key:"yps3ct"}],["path",{d:"m9 11 3 3L22 4",key:"1pflzl"}]]),qu=ou("circle-alert",[["circle",{cx:"12",cy:"12",r:"10",key:"1mglay"}],["line",{x1:"12",x2:"12",y1:"8",y2:"12",key:"1pkeuh"}],["line",{x1:"12",x2:"12.01",y1:"16",y2:"16",key:"4dfq90"}]]),Hu=ou("key",[["path",{d:"m15.5 7.5 2.3 2.3a1 1 0 0 0 1.4 0l2.1-2.1a1 1 0 0 0 0-1.4L19 4",key:"g0fldk"}],["path",{d:"m21 2-9.6 9.6",key:"1j0ho8"}],["circle",{cx:"7.5",cy:"15.5",r:"5.5",key:"yqb3hr"}]]),Wu=ou("eye-off",[["path",{d:"M10.733 5.076a10.744 10.744 0 0 1 11.205 6.575 1 1 0 0 1 0 .696 10.747 10.747 0 0 1-1.444 2.49",key:"ct8e1f"}],["path",{d:"M14.084 14.158a3 3 0 0 1-4.242-4.242",key:"151rxh"}],["path",{d:"M17.479 17.499a10.75 10.75 0 0 1-15.417-5.151 1 1 0 0 1 0-.696 10.75 10.75 0 0 1 4.446-5.143",key:"13bj9a"}],["path",{d:"m2 2 20 20",key:"1ooewy"}]]),Yu=ou("eye",[["path",{d:"M2.062 12.348a1 1 0 0 1 0-.696 10.75 10.75 0 0 1 19.876 0 1 1 0 0 1 0 .696 10.75 10.75 0 0 1-19.876 0",key:"1nclc0"}],["circle",{cx:"12",cy:"12",r:"3",key:"1v7zrd"}]]),Vu=ou("save",[["path",{d:"M15.2 3a2 2 0 0 1 1.4.6l3.8 3.8a2 2 0 0 1 .6 1.4V19a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2z",key:"1c8476"}],["path",{d:"M17 21v-7a1 1 0 0 0-1-1H8a1 1 0 0 0-1 1v7",key:"1ydtos"}],["path",{d:"M7 3v4a1 1 0 0 0 1 1h7",key:"t51u73"}]]);var Xu=r(577),Qu={};Qu.styleTagTransform=zu(),Qu.setAttributes=_u(),Qu.insert=Cu().bind(null,"head"),Qu.domAPI=xu(),Qu.insertStyleElement=Bu(),vu()(Xu.A,Qu),Xu.A&&Xu.A.locals&&Xu.A.locals;const Gu=({aiServices:t,onAIServicesUpdate:r,defaultService:o})=>{const[a,i]=(0,n.useState)({}),[l,s]=(0,n.useState)(t),[u,c]=(0,n.useState)(!1),[d,f]=(0,n.useState)(null),h=(e,n)=>{s(t=>t.map(t=>t.name===e?{...t,...n}:t))},p=JSON.stringify(l)!==JSON.stringify(t);return(0,e.jsxs)("div",{className:"api-settings",children:[(0,e.jsxs)("div",{className:"api-settings-header",children:[(0,e.jsx)("h2",{children:"🔑 API Settings"}),(0,e.jsx)("p",{children:"Configure your AI service API keys for OpenAI and Gemini"})]}),d&&(0,e.jsxs)("div",{className:`save-message ${d.type}`,children:["success"===d.type?(0,e.jsx)($u,{size:20}):(0,e.jsx)(qu,{size:20}),(0,e.jsx)("span",{children:d.text})]}),(0,e.jsx)("div",{className:"api-services",children:l.map(n=>{const t=(e=>{const n=(e=>e.apiKey?mu(e.name,e.apiKey)?"valid":"invalid":"no-key")(e);switch(n){case"valid":return{icon:$u,color:"success",text:"Valid API Key"};case"invalid":return{icon:qu,color:"error",text:"Invalid API Key"};default:return{icon:qu,color:"warning",text:"No API Key"}}})(n),r=t.icon;return(0,e.jsxs)("div",{className:"api-service-card",children:[(0,e.jsxs)("div",{className:"service-header",children:[(0,e.jsxs)("div",{className:"service-info",children:[(0,e.jsx)("h3",{children:"openai"===n.name?"OpenAI":"Gemini"}),(0,e.jsx)("p",{className:"service-description",children:"openai"===n.name?"Access to GPT models for intelligent conversations":"Google's Gemini AI for advanced reasoning"})]}),(0,e.jsxs)("div",{className:"service-status",children:[(0,e.jsx)(r,{size:24,className:`status-icon ${t.color}`}),(0,e.jsx)("span",{className:"status-text",children:t.text})]})]}),(0,e.jsxs)("div",{className:"service-config",children:[(0,e.jsxs)("div",{className:"form-group",children:[(0,e.jsx)("label",{className:"label",children:"API Key"}),(0,e.jsxs)("div",{className:"api-key-input",children:[(0,e.jsx)(Hu,{size:20,className:"key-icon"}),(0,e.jsx)("input",{type:a[n.name]?"text":"password",className:"input",placeholder:`Enter your ${n.name} API key`,value:n.apiKey,onChange:e=>h(n.name,{apiKey:e.target.value})}),(0,e.jsx)("button",{type:"button",className:"toggle-key-button",onClick:()=>{return e=n.name,void i(n=>({...n,[e]:!n[e]}));var e},children:a[n.name]?(0,e.jsx)(Wu,{size:18}):(0,e.jsx)(Yu,{size:18})})]}),(0,e.jsx)("small",{className:"help-text",children:"openai"===n.name?"Get your API key from OpenAI platform (starts with sk-)":"Get your API key from Google AI Studio"})]}),(0,e.jsxs)("div",{className:"form-group",children:[(0,e.jsx)("label",{className:"label",children:"Model"}),(0,e.jsx)("select",{className:"input",value:n.model||"",onChange:e=>h(n.name,{model:e.target.value}),children:"openai"===n.name?(0,e.jsxs)(e.Fragment,{children:[(0,e.jsx)("option",{value:"gpt-3.5-turbo",children:"GPT-3.5 Turbo"}),(0,e.jsx)("option",{value:"gpt-4",children:"GPT-4"}),(0,e.jsx)("option",{value:"gpt-4-turbo",children:"GPT-4 Turbo"})]}):(0,e.jsxs)(e.Fragment,{children:[(0,e.jsx)("option",{value:"gemini-pro",children:"Gemini Pro"}),(0,e.jsx)("option",{value:"gemini-pro-vision",children:"Gemini Pro Vision"})]})})]}),(0,e.jsx)("div",{className:"form-group",children:(0,e.jsxs)("label",{className:"service-toggle",children:[(0,e.jsx)("input",{type:"checkbox",checked:n.isEnabled,onChange:e=>h(n.name,{isEnabled:e.target.checked})}),(0,e.jsxs)("span",{className:"toggle-label",children:["Enable ","openai"===n.name?"OpenAI":"Gemini"]})]})})]})]},n.name)})}),(0,e.jsxs)("div",{className:"api-settings-actions",children:[(0,e.jsx)("button",{className:"button secondary",onClick:()=>{s(t),f(null)},disabled:!p,children:"Reset Changes"}),(0,e.jsxs)("button",{className:"button",onClick:async()=>{c(!0),f(null);try{const e=l.filter(e=>e.isEnabled).filter(e=>!mu(e.name,e.apiKey));if(e.length>0)throw new Error(`Invalid API keys for: ${e.map(e=>e.name).join(", ")}`);r(l),f({type:"success",text:"API settings saved successfully!"}),setTimeout(()=>f(null),3e3)}catch(e){f({type:"error",text:e instanceof Error?e.message:"Failed to save settings"})}finally{c(!1)}},disabled:u||!p,children:[(0,e.jsx)(Vu,{size:18}),u?"Saving...":"Save Settings"]})]}),(0,e.jsxs)("div",{className:"api-settings-info",children:[(0,e.jsx)("h4",{children:"ℹ️ Important Notes:"}),(0,e.jsxs)("ul",{children:[(0,e.jsx)("li",{children:"API keys are stored locally in your browser and never sent to our servers"}),(0,e.jsx)("li",{children:"Only enabled services will be available for chat"}),(0,e.jsx)("li",{children:"Make sure to use valid API keys to avoid errors during conversations"}),(0,e.jsx)("li",{children:"You can switch between services in the main chat interface"})]})]})]})},Ku=ou("rotate-ccw",[["path",{d:"M3 12a9 9 0 1 0 9-9 9.75 9.75 0 0 0-6.74 2.74L3 8",key:"1357e3"}],["path",{d:"M3 3v5h5",key:"1xhq8a"}]]),Zu=ou("palette",[["path",{d:"M12 22a1 1 0 0 1 0-20 10 9 0 0 1 10 9 5 5 0 0 1-5 5h-2.25a1.75 1.75 0 0 0-1.4 2.8l.3.4a1.75 1.75 0 0 1-1.4 2.8z",key:"e79jfc"}],["circle",{cx:"13.5",cy:"6.5",r:".5",fill:"currentColor",key:"1okk4w"}],["circle",{cx:"17.5",cy:"10.5",r:".5",fill:"currentColor",key:"f64h9f"}],["circle",{cx:"6.5",cy:"12.5",r:".5",fill:"currentColor",key:"qy21gx"}],["circle",{cx:"8.5",cy:"7.5",r:".5",fill:"currentColor",key:"fotxhn"}]]),Ju=ou("sun",[["circle",{cx:"12",cy:"12",r:"4",key:"4exip2"}],["path",{d:"M12 2v2",key:"tus03m"}],["path",{d:"M12 20v2",key:"1lh1kg"}],["path",{d:"m4.93 4.93 1.41 1.41",key:"149t6j"}],["path",{d:"m17.66 17.66 1.41 1.41",key:"ptbguv"}],["path",{d:"M2 12h2",key:"1t8f8n"}],["path",{d:"M20 12h2",key:"1q8mjw"}],["path",{d:"m6.34 17.66-1.41 1.41",key:"1m8zz5"}],["path",{d:"m19.07 4.93-1.41 1.41",key:"1shlcs"}]]),ec=ou("moon",[["path",{d:"M20.985 12.486a9 9 0 1 1-9.473-9.472c.405-.022.617.46.402.803a6 6 0 0 0 8.268 8.268c.344-.215.825-.004.803.401",key:"kfwtm"}]]),nc=ou("bot",[["path",{d:"M12 8V4H8",key:"hb8ula"}],["rect",{width:"16",height:"12",x:"4",y:"8",rx:"2",key:"enze0r"}],["path",{d:"M2 14h2",key:"vft8re"}],["path",{d:"M20 14h2",key:"4cs60a"}],["path",{d:"M15 13v2",key:"1xurst"}],["path",{d:"M9 13v2",key:"rq6x2g"}]]),tc=ou("hard-drive",[["line",{x1:"22",x2:"2",y1:"12",y2:"12",key:"1y58io"}],["path",{d:"M5.45 5.11 2 12v6a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2v-6l-3.45-6.89A2 2 0 0 0 16.76 4H7.24a2 2 0 0 0-1.79 1.11z",key:"oot6mr"}],["line",{x1:"6",x2:"6.01",y1:"16",y2:"16",key:"sgf278"}],["line",{x1:"10",x2:"10.01",y1:"16",y2:"16",key:"1l4acy"}]]);var rc=r(35),oc={};oc.styleTagTransform=zu(),oc.setAttributes=_u(),oc.insert=Cu().bind(null,"head"),oc.domAPI=xu(),oc.insertStyleElement=Bu(),vu()(rc.A,oc),rc.A&&rc.A.locals&&rc.A.locals;const ac=({settings:t,onSettingsUpdate:r})=>{const[o,a]=(0,n.useState)(t),[i,l]=(0,n.useState)(!1),[s,u]=(0,n.useState)(null),c=(e,n)=>{a(t=>({...t,[e]:n}))},d=JSON.stringify(o)!==JSON.stringify(t);return(0,e.jsxs)("div",{className:"settings",children:[(0,e.jsxs)("div",{className:"settings-header",children:[(0,e.jsx)("h2",{children:"⚙️ Settings"}),(0,e.jsx)("p",{children:"Customize your knowledge graph explorer experience"})]}),s&&(0,e.jsxs)("div",{className:`save-message ${s.type}`,children:["success"===s.type?(0,e.jsx)(Vu,{size:20}):(0,e.jsx)(Ku,{size:20}),(0,e.jsx)("span",{children:s.text})]}),(0,e.jsxs)("div",{className:"settings-sections",children:[(0,e.jsxs)("div",{className:"settings-section",children:[(0,e.jsxs)("div",{className:"section-header",children:[(0,e.jsx)(Zu,{size:24}),(0,e.jsx)("h3",{children:"Appearance"})]}),(0,e.jsxs)("div",{className:"setting-item",children:[(0,e.jsxs)("label",{className:"setting-label",children:[(0,e.jsx)("span",{children:"Theme"}),(0,e.jsx)("small",{children:"Choose your preferred color scheme"})]}),(0,e.jsxs)("div",{className:"theme-options",children:[(0,e.jsxs)("label",{className:"theme-option",children:[(0,e.jsx)("input",{type:"radio",name:"theme",value:"light",checked:"light"===o.theme,onChange:e=>c("theme",e.target.value)}),(0,e.jsxs)("div",{className:"theme-preview light",children:[(0,e.jsx)(Ju,{size:16}),(0,e.jsx)("span",{children:"Light"})]})]}),(0,e.jsxs)("label",{className:"theme-option",children:[(0,e.jsx)("input",{type:"radio",name:"theme",value:"dark",checked:"dark"===o.theme,onChange:e=>c("theme",e.target.value)}),(0,e.jsxs)("div",{className:"theme-preview dark",children:[(0,e.jsx)(ec,{size:16}),(0,e.jsx)("span",{children:"Dark"})]})]})]})]})]}),(0,e.jsxs)("div",{className:"settings-section",children:[(0,e.jsxs)("div",{className:"section-header",children:[(0,e.jsx)(nc,{size:24}),(0,e.jsx)("h3",{children:"AI Service"})]}),(0,e.jsxs)("div",{className:"setting-item",children:[(0,e.jsxs)("label",{className:"setting-label",children:[(0,e.jsx)("span",{children:"Default AI Service"}),(0,e.jsx)("small",{children:"Choose which AI service to use by default"})]}),(0,e.jsxs)("select",{className:"setting-select",value:o.defaultAIService,onChange:e=>c("defaultAIService",e.target.value),children:[(0,e.jsx)("option",{value:"openai",children:"OpenAI (GPT)"}),(0,e.jsx)("option",{value:"gemini",children:"Google Gemini"})]})]})]}),(0,e.jsxs)("div",{className:"settings-section",children:[(0,e.jsxs)("div",{className:"section-header",children:[(0,e.jsx)(tc,{size:24}),(0,e.jsx)("h3",{children:"Data & Storage"})]}),(0,e.jsxs)("div",{className:"setting-item",children:[(0,e.jsxs)("label",{className:"setting-label",children:[(0,e.jsx)("span",{children:"Auto-save"}),(0,e.jsx)("small",{children:"Automatically save changes to local storage"})]}),(0,e.jsxs)("label",{className:"toggle-switch",children:[(0,e.jsx)("input",{type:"checkbox",checked:o.autoSave,onChange:e=>c("autoSave",e.target.checked)}),(0,e.jsx)("span",{className:"toggle-slider"})]})]})]}),(0,e.jsxs)("div",{className:"settings-section",children:[(0,e.jsxs)("div",{className:"section-header",children:[(0,e.jsx)(Ku,{size:24}),(0,e.jsx)("h3",{children:"Data Management"})]}),(0,e.jsxs)("div",{className:"setting-item",children:[(0,e.jsxs)("label",{className:"setting-label",children:[(0,e.jsx)("span",{children:"Export Data"}),(0,e.jsx)("small",{children:"Download your knowledge graph and chat history"})]}),(0,e.jsx)("button",{className:"button secondary",children:"Export Data"})]}),(0,e.jsxs)("div",{className:"setting-item",children:[(0,e.jsxs)("label",{className:"setting-label",children:[(0,e.jsx)("span",{children:"Import Data"}),(0,e.jsx)("small",{children:"Import knowledge graph from a file"})]}),(0,e.jsx)("button",{className:"button secondary",children:"Import Data"})]}),(0,e.jsxs)("div",{className:"setting-item",children:[(0,e.jsxs)("label",{className:"setting-label",children:[(0,e.jsx)("span",{children:"Clear All Data"}),(0,e.jsx)("small",{children:"Remove all stored data (cannot be undone)"})]}),(0,e.jsx)("button",{className:"button secondary danger",children:"Clear Data"})]})]})]}),(0,e.jsxs)("div",{className:"settings-actions",children:[(0,e.jsxs)("button",{className:"button secondary",onClick:()=>{a(t),u(null)},disabled:!d,children:[(0,e.jsx)(Ku,{size:18}),"Reset Changes"]}),(0,e.jsxs)("button",{className:"button",onClick:async()=>{l(!0),u(null);try{r(o),u({type:"success",text:"Settings saved successfully!"}),setTimeout(()=>u(null),3e3)}catch(e){u({type:"error",text:"Failed to save settings"})}finally{l(!1)}},disabled:i||!d,children:[(0,e.jsx)(Vu,{size:18}),i?"Saving...":"Save Settings"]})]}),(0,e.jsxs)("div",{className:"settings-info",children:[(0,e.jsx)("h4",{children:"ℹ️ About Settings"}),(0,e.jsxs)("ul",{children:[(0,e.jsxs)("li",{children:[(0,e.jsx)("strong",{children:"Theme:"})," Changes the overall appearance of the application"]}),(0,e.jsxs)("li",{children:[(0,e.jsx)("strong",{children:"Default AI Service:"})," Sets which AI service to use when starting new conversations"]}),(0,e.jsxs)("li",{children:[(0,e.jsx)("strong",{children:"Auto-save:"})," Automatically saves your work as you make changes"]}),(0,e.jsxs)("li",{children:[(0,e.jsx)("strong",{children:"Data Management:"})," Export your work or start fresh with new data"]})]})]})]})},ic="knowledge_graph_data",lc="chat_history",sc="ai_services",uc="app_settings",cc={get:e=>{try{const n=window.localStorage.getItem(e);return n?JSON.parse(n):null}catch(e){return console.error("Error reading from localStorage:",e),null}},set:(e,n)=>{try{window.localStorage.setItem(e,JSON.stringify(n))}catch(e){console.error("Error writing to localStorage:",e)}},remove:e=>{try{window.localStorage.removeItem(e)}catch(e){console.error("Error removing from localStorage:",e)}},clear:()=>{try{window.localStorage.clear()}catch(e){console.error("Error clearing localStorage:",e)}}},dc={save:e=>{cc.set(lc,e)},load:()=>cc.get(lc)||[],addChat:e=>{const n=dc.load();n.push(e),dc.save(n)}},fc={graph:{save:e=>{cc.set(ic,e)},load:()=>cc.get(ic)||{nodes:[],edges:[]}},chat:dc,aiServices:{save:e=>{cc.set(sc,e)},load:()=>cc.get(sc)||[]},settings:{save:e=>{cc.set(uc,e)},load:()=>cc.get(uc)||{theme:"light",autoSave:!0,defaultAIService:"openai"}},localStorage:cc};var hc=r(626),pc={};pc.styleTagTransform=zu(),pc.setAttributes=_u(),pc.insert=Cu().bind(null,"head"),pc.domAPI=xu(),pc.insertStyleElement=Bu(),vu()(hc.A,pc),hc.A&&hc.A.locals&&hc.A.locals;const mc=()=>{const n=Y();return(0,e.jsxs)("nav",{className:"navigation",children:[(0,e.jsx)("div",{className:"nav-brand",children:(0,e.jsx)("h1",{children:"🧠 Knowledge Graph Explorer"})}),(0,e.jsx)("ul",{className:"nav-links",children:[{path:"/",label:"Graph View",icon:"🔗"},{path:"/chat-history",label:"Chat History",icon:"💬"},{path:"/api-settings",label:"API Settings",icon:"🔑"},{path:"/settings",label:"Settings",icon:"⚙️"}].map(t=>(0,e.jsx)("li",{children:(0,e.jsxs)(Pe,{to:t.path,className:n.pathname===t.path?"active":"",children:[(0,e.jsx)("span",{className:"nav-icon",children:t.icon}),t.label]})},t.path))})]})},gc=document.getElementById("root");if(!gc)throw new Error("Root element not found");(0,o.createRoot)(gc).render((0,e.jsx)(n.StrictMode,{children:(0,e.jsx)(()=>{const[t,r]=(0,n.useState)({graph:{nodes:[],edges:[]},selectedNode:null,chatSessions:[],aiServices:[],settings:{theme:"light",autoSave:!0,defaultAIService:"openai"}});(0,n.useEffect)(()=>{(()=>{const e=fc.graph.load(),n=fc.chat.load(),t=fc.aiServices.load(),o=fc.settings.load();r(r=>({...r,graph:e,chatSessions:n,aiServices:t.length>0?t:[{name:"openai",apiKey:"",model:"gpt-3.5-turbo",isEnabled:!1},{name:"gemini",apiKey:"",model:"gemini-pro",isEnabled:!1}],settings:o}))})()},[]),(0,n.useEffect)(()=>{t.settings.autoSave&&(fc.graph.save(t.graph),fc.chat.save(t.chatSessions),fc.aiServices.save(t.aiServices),fc.settings.save(t.settings))},[t]);const o=e=>{r(n=>({...n,chatSessions:[...n.chatSessions,e]}))};return(0,e.jsx)(Ne,{children:(0,e.jsxs)("div",{className:`app ${t.settings.theme}`,children:[(0,e.jsx)(mc,{}),(0,e.jsx)("main",{className:"main-content",children:(0,e.jsxs)(se,{children:[(0,e.jsx)(ie,{path:"/",element:(0,e.jsx)(Ou,{graph:t.graph,selectedNode:t.selectedNode,onGraphUpdate:e=>{r(n=>({...n,graph:e}))},onNodeSelect:e=>{r(n=>({...n,selectedNode:e}))},onChatSession:o,aiServices:t.aiServices,defaultService:t.settings.defaultAIService})}),(0,e.jsx)(ie,{path:"/chat-history",element:(0,e.jsx)(Uu,{chatSessions:t.chatSessions,onChatSession:o})}),(0,e.jsx)(ie,{path:"/api-settings",element:(0,e.jsx)(Gu,{aiServices:t.aiServices,onAIServicesUpdate:e=>{r(n=>({...n,aiServices:e}))},defaultService:t.settings.defaultAIService})}),(0,e.jsx)(ie,{path:"/settings",element:(0,e.jsx)(ac,{settings:t.settings,onSettingsUpdate:e=>{r(n=>({...n,settings:e}))}})})]})})]})})},{})}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,